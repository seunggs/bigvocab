{"version":3,"sources":["app.js","app-module.es6","main-app/top-menu.tpl.html","main-app/test-words.tpl.html","main-app/sidebar.tpl.html","main-app/settings.tpl.html","main-app/review-words.tpl.html","main-app/main-app.tpl.html","main-app/logout.tpl.html","main-app/list-words.tpl.html","main-app/import.tpl.html","main-app/collections.tpl.html","main-app/add-words.tpl.html","home/root.tpl.html","home/nav-home.tpl.html","home/home.tpl.html","common/spinner-directive.tpl.html","common/notification-directive.tpl.html","common/modal-directive.tpl.html","auth/register.tpl.html","auth/login.tpl.html","auth/auth.tpl.html","main-app/main-app-module.es6","main-app/words-service-factory.es6","main-app/users-service-factory.es6","main-app/top-menu-controller.es6","main-app/test-words-controller.es6","main-app/sidebar-controller.es6","main-app/settings-controller.es6","main-app/review-words-controller.es6","main-app/main-app-routes.es6","main-app/logout-controller.es6","main-app/list-words-controller.es6","main-app/import-controller.es6","main-app/collections-service-factory.es6","main-app/collections-controller.es6","main-app/add-words-controller.es6","home/home-module.es6","home/nav-home-controller.es6","home/home-routes.es6","home/home-controller.es6","common/common-module.es6","common/text-convert-service-factory.es6","common/spinner-directive.es6","common/sm2-service-factory.es6","common/notification-directive.es6","common/modal-directive.es6","common/import-service-factory.es6","common/fileread-directive.es6","common/dictionary-service-factory.es6","common/config-service-factory.es6","auth/auth-module.es6","auth/register-controller.es6","auth/login-controller.es6","auth/auth-service-factory.es6","auth/auth-routes.es6","app-routes.es6"],"names":["_classCallCheck","instance","Constructor","TypeError","angular","module","run","$templateCache","put","WordsService","$http","WordsServiceBase","getUserAll","userId","get","getAll","collectionId","getDue","create","word","post","wordId","find","wordStr","exists","update","wordUpdate","factory","$inject","UsersService","UsersServiceBase","updateObj","TopMenuCtrl","$state","resetForm","vm","formData","this","submitSearch","isValid","searchString","go","controller","TestWordsCtrl","ctrlName","SidebarCtrl","toggle","toggleSidebar","navItems","id","title","icon","link","SettingsCtrl","user","$timeout","changeSettings","maxDailyWords","settingsUpdate","console","log","placeholder","btnState","loading","success","notification","error","msg","notificationSuccessMsg","notificationErrorMsg","saveSettings","then","dbRes","ReviewWordsCtrl","$stateParams","$moment","Sm2Service","ConfigService","DictionaryService","TextConvertService","$sce","ngAudio","submitErrorHandler","err","initEditWord","currentWord","definition","getNextWord","wordCounter","words","undefined","fromHtml","isFinished","pronunciationFallback","wordObj","updatePronunciationMw","pronunciationPaths","pronunciations","fromJson","data","showWord","showAnswer","showModal","editToggle","finished","studyCountToday","res","totalWordsCount","length","revealWord","hideWord","revealAnswer","hideAnswer","toggleEdit","deleteWord","closeModal","playPronunciation","pronunciation","pronunciationAudioObj","load","play","submitDelete","deleteId","submitEdit","toHtml","submitRes","choice","newEaseFactor","calcEaseFactor","easeFactor","newPhase","calcPhase","phase","interval","newInterval","calcInterval","lastReviewed","lastReviewedEpochTime","unix","newNextReview","calcNextReview","newNextReviewEpochTime","newReviewRes","copy","reviewRes","nextReviewEpochTime","config","$stateProvider","state","abstract","url","views","templateUrl","sidebar@mainApp","controllerAs","top-menu@mainApp","resolve","AuthService","checkLoggedIn","params","LogoutCtrl","$window","logout","location","goBack","history","ListWordsCtrl","CollectionsService","$q","getAllWords","wordsCount","map","initShowEdit","showEdit","displayLimit","pronunciationBtnState","deleteSuccess","pronunciationError","searchWords","document","getElementById","focus","modalYes","filter","index","indexOf","splice","modalClose","saveChanges","selectedWordId","addAllPronunciations","count","promises","reduce","prev","curr","concat","all","ImportCtrl","ImportService","SettingsService","importTextfile","anki","dbResData","generated_keys","href","files","collectionTitle","CollectionsServiceBase","collection","merge","newCollectionId","newCollection","CollectionsCtrl","resetStudyCountAt4am","timeTo4am","now","Date","endOfDay","endOf","add","resetAt4am","attemptCount","getAllCollections","collectionList","checks","initChecks","mergeCollections","collectionIds","mainCollectionId","remainingCollectionIds","forEach","push","deleteCollections","collections","addCollectionForm","$touched","$submitted","mergeError","noneSelectedError","toggleSuccessNotification","successMessage","toggleErrorNotification","errorMessage","createCollection","mergeList","deleteList","showConfirmDeleteModal","confirmModal","AddWordsCtrl","submitSuccessHandler","definitions","composeWordDetails","nextReview","convertedDefinition","again","hard","good","easy","addWord","updateWord","checkDuplicate","isDuplicate","addWordForm","modalNo","getDefinition","getDefinitionFree","mashapeKey","submit","copyDefinition","NavHomeCtrl","setActive","page","active","isLoggedIn","nav-home@root","HomeCtrl","TextConvertServiceBase","text","convertedText","replace","spinner","restrict","scope","element","attrs","width","directive","Sm2ServiceBase","oldEaseFactor","minEaseFactor","show","color","transclude","$watch","modal","yesCb","noCb","modalBg","yesMessage","noMessage","showYesBtn","showNoBtn","showAbortBtn","addAbortButton","ImportServiceBase","fileread","bind","changeEvent","target","i","f","reader","FileReader","onload","file","loadEvent","$apply","name","content","result","readAsText","DictionaryServiceBase","headers","X-Mashape-Key","getPronunciationMw","getPronunciationForvo","forvoKey","deferred","defer","jsonp","pronunciationData","attributes","total","items","pathmp3","reject","promise","ConfigServiceBase","mwKey","RegisterCtrl","LoginCtrl","AuthServiceBase","new_val","$urlRouterProvider","otherwise"],"mappings":"AAAA,YAw7BA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAqChH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAuBhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCA6DhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCA2EhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAoVhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAmChH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAuMhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAkIhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAuPhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAgMhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAuEhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCA+ehH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAuBhH,QAASH,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,sCCh0F/G,WAQCC,QACGC,OAAO,YACN,SACA,YACA,aACA,YACA,iBACA,UACA,mBACA,UACA,OACA,OACA,UAEA,cCtBND,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,6BACA,wbCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,+BACA,2tBCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,4BACA,i9DCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,6BACA,i3CCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,iCACA,01JCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,6BACA,kOCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,2BACA,6cCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,+BACA,+5LCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,2BACA,g5FCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,gCACA,y1ICFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,8BACA,29GCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,qBACA,0DCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,yBACA,ynCCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,qBACA;;ICFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,oCACA,gFCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,yCACA,yLCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,kCACA,0pCCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,yBACA,yoBCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,sBACA,wZCFAJ,QAAAC,OAAA,YAAAC,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,qBACA,+DCFC,WAQCJ,QACGC,OAAO,WACN,iBCVN,WAcE,QAASI,GAAaC,GAEpB,GAAIC,KA2CJ,OAxCAA,GAAiBC,WAAa,SAAAC,GAC5B,MAAOH,GAAMI,IAAI,kBAAoBD,IAIvCF,EAAiBI,OAAS,SAAAC,GACxB,MAAON,GAAMI,IAAI,QAAUE,EAAe,WAI5CL,EAAiBM,OAAS,SAAAD,GACxB,MAAON,GAAMI,IAAI,QAASE,EAAe,4BAG3CL,EAAiBO,OAAS,SAAAC,GACxB,MAAOT,GAAMU,KAAK,aAAcD,IAGlCR,EAAiBG,IAAM,SAAAO,GACrB,MAAOX,GAAMI,IAAI,cAAgBO,IAInCV,EAAiBW,KAAO,SAACN,EAAcO,GACrC,MAAOb,GAAMI,IAAI,QAAUE,EAAe,UAAYO,IAIxDZ,EAAiBa,OAAS,SAACR,EAAcG,GACvC,MAAOT,GAAMI,IAAI,QAAUE,EAAe,UAAYG,EAAO,aAG/DR,EAAiBc,OAAS,SAACJ,EAAQK,GACjC,MAAOhB,GAAMF,IAAI,cAAgBa,EAAQK,IAG3Cf,EAAgB,UAAU,SAAAU,GACxB,MAAOX,GAAK,UAAQ,cAAgBW,IAG/BV,EAjDTP,QACGC,OAAO,WACPsB,QAAQ,eAAgBlB,GvBg5B3BA,EAAamB,SAAW,YwB55B1B,WAcE,QAASC,GAAanB,GAEpB,GAAIoB,KAMJ,OAJAA,GAAiBL,OAAS,SAACZ,EAAQkB,GAClC,MAAOrB,GAAMF,IAAI,cAAgBK,EAAQkB,IAGnCD,EAZT1B,QACGC,OAAO,WACPsB,QAAQ,eAAgBE,GxB06B3BA,EAAaD,SAAW,YyBt7BzB,WzB67BC,GyB17BMI,GACO,QADPA,GACQC,GAMV,QAASC,KACPC,EAAGC,YzBm7BPpC,gBAAgBqC,KyB37BZL,EAGF,IAAIG,GAAKE,IAETF,GAAGC,YAMHD,EAAGG,aAAe,SAACC,EAASC,GACrBD,IAELL,IACAD,EAAOQ,GAAG,sBAAwBD,aAAcA,MzBi8BtDR,GAAYJ,SAAW,UyBp7BvBxB,QACGC,OAAO,WACPqC,WAAW,cAAeV,MCjC9B,W1Bk+BC,G0B/9BMW,GACO,QADPA,K1Bg+BJ3C,gBAAgBqC,K0Bh+BZM,EAEF,IAAIR,GAAKE,IACTF,GAAGS,SAAW,gBAWlBxC,SACGC,OAAO,WACPqC,WAAW,gBAAiBC,MCnBhC,W3By/BC,G2Bt/BME,GACO,QADPA,K3Bu/BJ7C,gBAAgBqC,K2Bv/BZQ,EAGF,IAAIV,GAAKE,IAETF,GAAGW,QAAS,EACZX,EAAGY,cAAgB,WACjBZ,EAAGW,QAAUX,EAAGW,QAGlBX,EAAGa,WAECC,GAAI,EACJC,MAAO,cACPC,KAAM,gBACNC,KAAM,wBAGNH,GAAI,EACJC,MAAO,iBACPC,KAAM,UACNC,KAAM,uBASNH,GAAI,EACJC,MAAO,SACPC,KAAM,YACNC,KAAM,mBAGNH,GAAI,EACJC,MAAO,WACPC,KAAM,cACNC,KAAM,qBAGNH,GAAI,EACJC,MAAO,UACPC,KAAM,gBACNC,KAAM,mBAcdhD,SACGC,OAAO,WACPqC,WAAW,cAAeG,MChE9B,W5BsjCC,G4BnjCMQ,GACO,QADPA,GACQxB,EAAcyB,EAAMC,GA6B9B,QAASC,GAAgB3C,EAAQ4C,GAChC,GAAIC,IAAmBD,cAAeA,EAGtC,OAFAE,SAAQC,IAAIF,GAEL7B,EAAaJ,OAAOZ,EAAQ6C,G5BkhCtC1D,gBAAgBqC,K4BpjCZgB,EAGF,IAAIlB,GAAKE,IAITF,GAAGC,YACHD,EAAGC,SAASqB,cAAgBH,EAAKG,cAEjCtB,EAAG0B,aACDJ,cAAe,2BAEjBtB,EAAG2B,UACDC,SAAS,EACTC,SAAS,GAEX7B,EAAG8B,cACDD,SAAS,EACTE,OAAO,GAET/B,EAAGgC,KACDH,QAAS,6BACTE,MAAO,2CAET/B,EAAGiC,uBAAyBjC,EAAGgC,IAAIH,QACnC7B,EAAGkC,qBAAuBlC,EAAGgC,IAAID,MAajC/B,EAAGmC,aAAe,SAAAb,GACjBD,EAAeF,EAAKL,GAAIQ,GACtBc,KAAK,SAAAC,GAELb,QAAQC,IAAIY,GACTrC,EAAG2B,SAASC,SAAU,EACtB5B,EAAG2B,SAASE,SAAU,EAEtB7B,EAAG8B,aAAaD,SAAU,EAE1BT,EAAS,WACPpB,EAAG2B,SAASE,SAAU,GACrB,QACH,SACK,WACL7B,EAAG2B,SAASC,SAAU,EAEtB5B,EAAG8B,aAAaC,OAAQ,K5BwjClCb,GAAazB,SAAW,eAAgB,OAAQ,Y4B1iChDxB,QACGC,OAAO,WACPqC,WAAW,eAAgBW,MC3E/B,W7BioCC,G6B9nCMoB,GACO,QADPA,GACQhE,EAAcoB,EAAc6C,EAAcC,EAASpB,EAAUqB,EAAYC,EAAeC,EAAmBC,EAAoBC,EAAMC,EAAS3B,GAuDxJ,QAAS4B,GAAoBC,GAC3BhD,EAAG8B,aAAaC,OAAQ,EACxBP,QAAQC,IAAI,yBAA0BuB,GAGxC,QAASC,GAAcC,GACrB,OACElE,KAAMkE,EAAYlE,KAClBmE,WAAYD,EAAYC,YAI5B,QAASC,GAAaC,EAAaC,GACjC,GAAIJ,GAAcI,EAAMD,EAExB,OAAoBE,UAAhBL,EAAoCK,QAExCL,EAAYC,WAAaP,EAAmBY,SAASN,EAAYC,YAE1DD,GAGT,QAASO,GAAYP,GACnB,MAAuBK,UAAhBL,GAA4B,GAAO,EAI5C,QAASQ,GAAuBC,GAE9BhB,EAAkBiB,sBAAsBD,GACrCvB,KAAK,SAAAyB,GACJ7D,EAAG8D,eAAiB7F,QAAQ8F,SAASF,GAAoBG,KACzDxC,QAAQC,IAAI,uCACZ,SACK,SAAAuB,GACLxB,QAAQC,IAAI,iCAAkCuB,K7BoiCtDnF,gBAAgBqC,K6B/nCZoC,EAGF,IAAItC,GAAKE,KAILrB,EAAe0D,EAAa1D,YAChCmB,GAAGqD,YAAc,EACjBrD,EAAGiE,UAAW,EACdjE,EAAGkE,YAAa,EAChBlE,EAAGmE,WAAY,EACfnE,EAAGoE,YAAa,EAChBpE,EAAGC,YACHD,EAAGqE,UAAW,EACdrE,EAAG8B,cACDD,SAAS,EACTE,OAAO,GAET/B,EAAGgC,KACDH,QAAS,6BACTE,MAAO,2CAET/B,EAAGiC,uBAAyBjC,EAAGgC,IAAIH,QACnC7B,EAAGkC,qBAAuBlC,EAAGgC,IAAID,MAIjC/B,EAAGsE,gBAAkBnD,EAAKmD,iBAAmB,EAE7ChG,EAAaQ,OAAOD,GACjBuD,KAAK,SAAAmC,GACJvE,EAAGsD,MAAQrF,QAAQ8F,SAASQ,GAAKP,KACjChE,EAAGwE,gBAAkBxE,EAAGsD,MAAMmB,OAE9BzE,EAAGkD,YAAcE,EAAYpD,EAAGqD,YAAarD,EAAGsD,OAGhDtD,EAAGqE,SAAWZ,EAAWzD,EAAGkD,aAExBlD,EAAGqE,WAG+Bd,SAAlCvD,EAAGkD,YAAYY,eACjB9D,EAAG8D,eAAiB9D,EAAGkD,YAAYY,eAEnCJ,EAAsB1D,EAAGkD,aAI3BlD,EAAGC,SAAWgD,EAAajD,EAAGkD,gBAC9B,SACKH,GA6CT/C,EAAG0E,WAAa,WACd1E,EAAGiE,UAAW,GAGhBjE,EAAG2E,SAAW,WACZ3E,EAAGiE,UAAW,GAGhBjE,EAAG4E,aAAe,WAChB5E,EAAGkE,YAAa,GAGlBlE,EAAG6E,WAAa,WACd7E,EAAGkE,YAAa,GAGlBlE,EAAG8E,WAAa,WACd9E,EAAGoE,YAAcpE,EAAGoE,YAGtBpE,EAAG+E,WAAa,SAAA7F,GACdZ,EAAY,UAAQY,GACjBkD,KAAK,WACJpC,EAAG8B,aAAaD,SAAU,EAC1B7B,EAAG8E,aACH1B,MACA,SACKL,IAGX/C,EAAGgF,WAAa,WACdhF,EAAGmE,WAAY,GAGjBnE,EAAGiF,kBAAoB,SAAAC,GACrB,GAAIC,GAAwBrC,EAAQsC,KAAKF,EACzCC,GAAsBE,QAGxBrF,EAAGsF,aAAe,SAAApG,GAChBc,EAAGuF,SAAWrG,EACdc,EAAGmE,WAAY,GAGjBnE,EAAGwF,WAAa,SAACtG,EAAQE,EAAS+D,GAChC,GAAI5D,IACFP,KAAMI,EACN+D,WAAYP,EAAmB6C,OAAOtC,GAGxC7E,GAAagB,OAAOJ,EAAQK,GACzB6C,KAAK,WACJpC,EAAGkD,YAAYlE,KAAOI,EACtBY,EAAGkD,YAAYC,WAAaP,EAAmBY,SAASL,GAExDnD,EAAG8B,aAAaD,SAAU,EAC1B7B,EAAG8E,eACH,SACK/B,IAGX/C,EAAG0F,UAAY,SAAC/B,EAASgC,GAEvB3F,EAAG2E,WACH3E,EAAG6E,YAEH,IAAIe,GAAgBnD,EAAWoD,eAAelC,EAAQmC,WAAYH,GAC9DI,EAAWtD,EAAWuD,UAAUrC,EAAQsC,MAAOtC,EAAQuC,SAAUP,GACjEQ,EAAc1D,EAAW2D,aAAazC,EAAQsC,MAAOtC,EAAQuC,SAAUvC,EAAQmC,WAAYH,GAC3FU,EAAe7D,IACf8D,EAAwBD,EAAaE,OACrCC,EAAgB/D,EAAWgE,eAAeN,GAC1CO,EAAyBF,EAAcD,OAEvCI,EAAe1I,QAAQ2I,KAAKjD,EAAQkD,UACxCF,GAAahB,IAEb,IAAIpG,IACFsH,UAAWF,EACXL,sBAAuBA,EACvBR,WAAYF,EACZK,MAAOF,EACPG,SAAUC,EACVW,oBAAqBJ,EAGvBpI,GAAagB,OAAOqE,EAAQ7C,GAAIvB,GAC7B6C,KAAK,WACJpC,EAAGqD,cACHrD,EAAGkD,YAAcE,EAAYpD,EAAGqD,YAAarD,EAAGsD,OAGhDtD,EAAGqE,SAAWZ,EAAWzD,EAAGkD,aAExBlD,EAAGqE,WAG+Bd,SAAlCvD,EAAGkD,YAAYY,eACjB9D,EAAG8D,eAAiB9D,EAAGkD,YAAYY,eAEnCJ,EAAsB1D,EAAGkD,aAI3BlD,EAAGC,SAAWgD,EAAajD,EAAGkD,aAE9BlD,EAAG6E,aACH7E,EAAG0E,gBACH,SACK3B,GAGT/C,EAAGsE,kBACH9C,QAAQC,IAAI,uBAAwBzB,EAAGsE,iBAEvC5E,EAAaJ,OAAO6B,EAAKL,IAAMwD,gBAAiBtE,EAAGsE,kBAAkB,SAC5D,SAAAtB,GACLxB,QAAQC,IAAI,8DAA+DuB,M7BioCrFV,GAAgB7C,SAAW,eAAgB,eAAgB,eAAgB,UAAW,WAAY,aAAc,gBAAiB,oBAAqB,qBAAsB,OAAQ,UAAW,Q6BlnC/LxB,QACGC,OAAO,WACPqC,WAAW,kBAAmB+B,MC1OnC,WAOE,QAASyE,GAAOC,GACdA,EACGC,MAAM,WACLC,YAAU,EACVC,IAAK,YACLC,OACE,IACEC,YAAa,8BAEfC,mBACED,YAAa,4BACb9G,WAAY,cACZgH,aAAc,WAEhBC,oBACEH,YAAa,6BACb9G,WAAY,cACZgH,aAAc,cAInBN,MAAM,uBACLE,IAAK,eACLE,YAAa,gCACb9G,WAAY,kBACZgH,aAAc,cACdE,SACEtG,MAAA,cAAM,SAAAuG,GACJ,MAAOA,GAAYC,qBAIxBV,MAAM,qBACLE,IAAK,uCACLE,YAAa,8BACb9G,WAAY,eACZgH,aAAc,WACdE,SACEtG,MAAA,cAAM,SAAAuG,GACJ,MAAOA,GAAYC,qBAIxBV,MAAM,wBACLE,IAAK,0CACLE,YAAa,iCACb9G,WAAY,kBACZgH,aAAc,cACdE,SACEtG,MAAA,cAAM,SAAAuG,GACJ,MAAOA,GAAYC,qBAIxBV,MAAM,sBACLE,IAAK,cACLE,YAAa,+BACb9G,WAAY,gBACZgH,aAAc,YACdE,SACEtG,MAAA,cAAM,SAAAuG,GACJ,MAAOA,GAAYC,mBAGvBC,QAAUvH,aAAc,QAEzB4G,MAAM,sBACLE,IAAK,cACLE,YAAa,+BACb9G,WAAY,gBACZgH,aAAc,YACdE,SACEtG,MAAA,cAAM,SAAAuG,GACJ,MAAOA,GAAYC,qBAIxBV,MAAM,kBACLE,IAAK,UACLE,YAAa,2BACb9G,WAAY,aACZgH,aAAc,SACdE,SACEtG,MAAA,cAAM,SAAAuG,GACJ,MAAOA,GAAYC,qBAIxBV,MAAM,kBACLE,IAAK,UACLE,YAAa,2BACb9G,WAAY,aACZgH,aAAc,SACdE,SACEtG,MAAA,cAAM,SAAAuG,GACJ,MAAOA,GAAYC,qBAIxBV,MAAM,oBACLE,IAAK,YACLE,YAAa,6BACb9G,WAAY,eACZgH,aAAc,WACdE,SACEtG,MAAA,cAAM,SAAAuG,GACJ,MAAOA,GAAYC,qBA9G7B1J,QACGC,OAAO,WACP6I,OAAOA,G9B68CVA,EAAOtH,SAAW,qB+Bl9CnB,W/Bq9CC,G+Bl9CMoI,GACO,QADPA,GACQH,EAAaI,G/Bk9CzBjK,gBAAgBqC,K+Bn9CZ2H,EAGF,IAAI7H,GAAKE,IAETF,GAAG+H,OAAS,WACVL,EAAYK,SACT3F,KAAK,WACJZ,QAAQC,IAAI,gCACZqG,EAAQE,SAAW,YACnB,SACK,SAAAhF,GACLxB,QAAQC,IAAI,yBAA0BuB,MAI5ChD,EAAGiI,OAAS,WACVH,EAAQI,QAAQ5H,GAAG,K/By9CzBuH,GAAWpI,SAAW,cAAe,W+B58CrCxB,QACGC,OAAO,WACPqC,WAAW,aAAcsH,MCnC7B,WhCw/CC,GgCr/CMM,GACO,QADPA,GACQ5F,EAAc6F,EAAoB9J,EAAcsE,EAAoBF,EAAeC,EAAmBvB,EAAUD,EAAM2B,EAASuF,GA0CzI,QAAStF,GAAoBC,GAC3BhD,EAAG2B,SAASC,SAAU,EACtB5B,EAAG8B,aAAaC,OAAQ,EACxBP,QAAQC,IAAI,yBAA0BuB,GAGxC,QAASsF,GAAa5J,GACrBJ,EAAaG,WAAWC,GACtB0D,KAAK,SAAAmC,GACL,GAAIjB,GAAQrF,QAAQ8F,SAASQ,GAAKP,IAElChE,GAAGsD,MAAQA,EACXtD,EAAGuI,WAAajF,EAAMmB,OAEnBzE,EAAGsD,MAAMkF,IAAI,SAAAxJ,GAEX,MADAA,GAAKmE,WAAaP,EAAmBY,SAASxE,EAAKmE,YAC5CnE,IAGZyJ,EAAanF,KACZ,SACKP,GAGT,QAAS0F,GAAcnF,GACtBA,EAAMkF,IAAI,SAAAxJ,GAET,MADAgB,GAAG0I,SAAS1J,EAAK8B,KAAM,EAChB9B,IhCg7CXnB,gBAAgBqC,KgCt/CZiI,EAGF,IAAInI,GAAKE,IAITF,GAAGC,YACHD,EAAG0I,YACH1I,EAAG2I,aAAe,IAClB3I,EAAG2B,UACDC,SAAS,EACTC,SAAS,GAEX7B,EAAG4I,uBACDhH,SAAS,EACTC,SAAS,GAEX7B,EAAG8B,cACDD,SAAS,EACTE,OAAO,GAET/B,EAAGgC,KACDH,QAAS,6BACTgH,cAAe,2BACf9G,MAAO,0CACP+G,mBAAoB,wDAEtB9I,EAAGiC,uBAAyBjC,EAAGgC,IAAIH,QACnC7B,EAAGkC,qBAAuBlC,EAAGgC,IAAID,MAIpCuG,EAAYnH,EAAKL,IAEoB,OAA9ByB,EAAalC,eACfL,EAAGC,SAAS8I,YAAcxG,EAAalC,cAGzC2I,SAASC,eAAe,eAAeC,QAqCvClJ,EAAG8E,WAAa,SAAA9F,GAChBgB,EAAGC,SAASjB,KAAOA,EAAKA,KACzBgB,EAAGC,SAASkD,WAAanE,EAAKmE,WAE5BnD,EAAG0I,SAAS1J,EAAK8B,KAAOd,EAAG0I,SAAS1J,EAAK8B,KAG1Cd,EAAGmJ,SAAW,SAAAjK,GACZZ,EAAY,UAAQY,GACjBkD,KAAK,WAEJ,GAAIc,GAAclD,EAAGsD,MAAM8F,OAAO,SAAAlG,GAChC,MAAOA,GAAYpC,KAAO5B,IACzB,GACCmK,EAAQrJ,EAAGsD,MAAMgG,QAAQpG,EAC7BlD,GAAGsD,MAAMiG,OAAOF,EAAO,GAEvBrJ,EAAGiC,uBAAyBjC,EAAGgC,IAAI6G,cACnC7I,EAAG8B,aAAaD,SAAU,IAC1B,SACKkB,IAGX/C,EAAGwJ,WAAa,WACdxJ,EAAGmE,WAAY,GAIjBnE,EAAGiF,kBAAoB,SAAAjG,GACrB,GAAIA,EAAK8E,qBAAiDP,SAAxBvE,EAAK8E,eAA8B,CACnE,GAAIoB,GAAgBpC,EAAQsC,KAAKpG,EAAK8E,eAAe,GACrDoB,GAAcG,SAIlBrF,EAAGyJ,YAAc,SAACrJ,EAASpB,EAAMiB,GAC3BG,GAEL9B,EAAagB,OAAON,EAAK8B,GAAIb,GAC3BmC,KAAK,WACFpC,EAAG2B,SAASC,SAAU,EACtB5B,EAAG2B,SAASE,SAAU,EAEtB7B,EAAGiC,uBAAyBjC,EAAGgC,IAAIH,QACnC7B,EAAG8B,aAAaD,SAAU,EAE1BT,EAAS,WACPpB,EAAG2B,SAASE,SAAU,EAEvB7B,EAAG0I,SAAS1J,EAAK8B,KAAOd,EAAG0I,SAAS1J,EAAK8B,IAGzCd,EAAGsD,MAAMkF,IAAI,SAAAtF,GAMZ,MALIA,GAAYpC,KAAO9B,EAAK8B,KAC3BoC,EAAYlE,KAAOgB,EAAGC,SAASjB,KAC/BkE,EAAYC,WAAaP,EAAmBY,SAASxD,EAAGC,SAASkD,aAG3DD,KAEN,QACL,SACKH,IAGT/C,EAAGsF,aAAe,SAAApG,GAChBc,EAAGmE,WAAY,EACfnE,EAAG0J,eAAiBxK,GAGtBc,EAAG2J,qBAAuB,SAAArG,GACxBtD,EAAG4I,sBAAsBhH,SAAU,CAEnC,IAAIgI,GAAQ,EAERC,EAAWvG,EAAMwG,OAAO,SAACC,EAAMC,GAEjC,MADAJ,KACOG,EAAKE,OAAOtH,EAAkBiB,sBAAsBoG,QAG7D3B,GAAG6B,IAAIL,GACJzH,KAAK,WACJpC,EAAG4I,sBAAsBhH,SAAU,EACnC5B,EAAG4I,sBAAsB/G,SAAU,EAEnC7B,EAAGiC,uBAAyBjC,EAAGgC,IAAIH,QACnC7B,EAAG8B,aAAaD,SAAU,EAE1BT,EAAS,WACPpB,EAAG4I,sBAAsB/G,SAAU,GAClC,MAEHyG,EAAYnH,EAAKL,MACjB,SACK,SAAAkC,GACLxB,QAAQC,IAAI,iCAAkCuB,MhCugDxDmF,GAAc1I,SAAW,eAAgB,qBAAsB,eAAgB,qBAAsB,gBAAiB,oBAAqB,WAAY,OAAQ,UAAW,MgC1+C1KxB,QACGC,OAAO,WACPqC,WAAW,gBAAiB4H,MC7MhC,WjC+rDC,GiC5rDMgC,GACO,QADPA,GACQC,EAAe9L,EAAcoE,EAAe2H,EAAiBlJ,EAAMC,EAAU0G,GA4BvF,QAASwC,GAAgB5L,EAAQsF,GAE/BhE,EAAG2B,SAASC,SAAU,EAEtBwI,EAAcG,KAAK7L,EAAQsF,GACxB5B,KAAK,SAAAC,GACJ,GAAImI,GAAYvM,QAAQ8F,SAAS1B,GAAO2B,KACpCnF,EAAe2L,EAAUC,eAAe,EAE5C,OAAOnM,GAAaM,OAAOC,KAE5BuD,KAAK,WACJpC,EAAG2B,SAASC,SAAU,EACtB5B,EAAG2B,SAASE,SAAU,EAEtB7B,EAAG8B,aAAaD,SAAU,EAE1BT,EAAS,WACPpB,EAAG2B,SAASE,SAAU,EACtBiG,EAAQE,SAAS0C,KAAO,2BACvB,QACH,SACK,SAAA1H,GACLhD,EAAG2B,SAASC,SAAU,EAEtB5B,EAAG8B,aAAaC,OAAQ,EAExBP,QAAQC,IAAI,sCAAuCuB,KjCqoD3DnF,gBAAgBqC,KiC7rDZiK,EAGF,IAAInK,GAAKE,IAITF,GAAGC,YACHD,EAAG2B,UACDC,SAAS,EACTC,SAAS,GAEX7B,EAAG0B,aACDiJ,MAAO,kCACPC,gBAAiB,6BAEnB5K,EAAG8B,cACDD,SAAS,EACTE,OAAO,GAET/B,EAAGgC,KACDH,QAAS,+BACTE,MAAO,2CAET/B,EAAGiC,uBAAyBjC,EAAGgC,IAAIH,QACnC7B,EAAGkC,qBAAuBlC,EAAGgC,IAAID,MAsCjC/B,EAAGsK,eAAiB,SAAClK,EAASH,GAEvBG,GAELkK,EAAenJ,EAAKL,GAAIb,IjCqsD9BkK,GAAW1K,SAAW,gBAAiB,eAAgB,gBAAiB,kBAAmB,OAAQ,WAAY,WiCvrD/GxB,QACGC,OAAO,WACPqC,WAAW,aAAc4J,MCtF7B,WAcC,QAAS/B,GAAmB7J,GAE1B,GAAIsM,KA0BJ,OAxBAA,GAAuBjM,OAAS,SAAAF,GAC9B,MAAOH,GAAMI,IAAI,QAAUD,EAAS,iBAGtCmM,EAAuB9L,OAAS,SAAA+L,GAC9B,MAAOvM,GAAMU,KAAK,mBAAoB6L,IAGxCD,EAAuBlM,IAAM,SAAAE,GAC3B,MAAON,GAAMI,IAAI,oBAAsBE,IAGzCgM,EAAuBE,MAAQ,SAAClM,EAAcmM,GAC5C,MAAOzM,GAAMF,IAAI,0BAA4BQ,EAAcmM,IAG7DH,EAAuBvL,OAAS,SAACT,EAAcoM,GAC7C,MAAO1M,GAAMF,IAAI,oBAAsBQ,EAAcoM,IAGvDJ,EAAsB,UAAU,SAAAhM,GAC9B,MAAON,GAAK,UAAQ,oBAAsBM,IAGrCgM,EAhCT5M,QACGC,OAAO,WACPsB,QAAQ,qBAAsB4I,GlCszDjCA,EAAmB3I,SAAW,YmCl0D/B,WnCi0DC,GmC9zDMyL,GACO,QADPA,GACQ9C,EAAoB9J,EAAcoB,EAAc0B,EAAUD,EAAMkH,EAAI7F,GAuC9E,QAAS2I,KACP,QAASC,KACP,GAAIC,GAAM,GAAIC,MACVC,EAAW/I,IAAUgJ,MAAM,OAAOC,IAAI,EAAG,QAC7C,OAAOF,GAAWF,EAAM,IAK1B,QAASK,KACPhM,EAAaJ,OAAO6B,EAAKL,IAAMwD,gBAAiB,IAC7ClC,KAAK,WACJhB,EAASsK,EAAYN,OACrB,SACK,SAAApI,GACLxB,QAAQC,IAAI,iCAAkCkK,EAAe,MAAO3I,GAChD,GAAhB2I,IACFA,IACAvK,EAASsK,EAAY,QAX7B,GAAIC,GAAe,CAgBnBvK,GAASsK,EAAYN,KAGvB,QAASQ,GAAmBzK,GAC1BiH,EAAmBxJ,OAAOuC,EAAKL,IAC5BsB,KAAK,SAAAmC,GACJvE,EAAG6L,eAAiB5N,QAAQ8F,SAASQ,GAAKP,KAG1ChE,EAAG8L,OAASC,EAAW/L,EAAG6L,kBAC1B,SACK,SAAA7I,GACLxB,QAAQC,IAAI,yBAA0BuB,KAI5C,QAASgJ,GAAkBC,GACzB,GAAIC,GAAmBD,EAAc,GACjCE,EAAyBF,EAAc7C,OAAO,SAAAvK,GAChD,MAAOA,KAAiBqN,IAGtBrC,IAMJ,OAJAsC,GAAuBC,QAAQ,SAAAvN,GAC7BgL,EAASwC,KAAKjE,EAAmB2C,MAAMlM,GAAgBmM,gBAAiBkB,OAGnE7D,EAAG6B,IAAIL,GAGhB,QAASyC,GAAmBL,GAC1B,GAAIpC,KAMJ,OAJAoC,GAAcG,QAAQ,SAAAvN,GACpBgL,EAASwC,KAAKjE,EAAkB,UAAQvJ,MAGnCwJ,EAAG6B,IAAIL,GAGhB,QAASkC,GAAWQ,GAClB,GAAIT,KAMJ,OAJAS,GAAYH,QAAQ,SAAAtB,GAClBgB,EAAOhB,EAAWhK,KAAM,IAGnBgL,EAGT,QAAS/L,KACPC,EAAGwM,kBAAkB5B,gBAAgB6B,UAAW,EAChDzM,EAAGwM,kBAAkBE,YAAa,EAClC1M,EAAGC,YnC0sDPpC,gBAAgBqC,KmC/zDZgL,EAGF,IAAIlL,GAAKE,IAITF,GAAGC,YACHD,EAAG0B,aACDkJ,gBAAiB,8BAEnB5K,EAAG2B,UACDC,SAAS,EACTC,SAAS,GAEX7B,EAAGmB,KAAOA,EACVnB,EAAG8L,UACH9L,EAAG0I,UAAW,EACd1I,EAAG8B,cACDD,SAAS,EACTE,OAAO,GAET/B,EAAGgC,KACDH,QAAS,WACTE,MAAO,2CACP4K,WAAY,yCACZC,kBAAmB,0CAErB5M,EAAGiC,uBAAyBjC,EAAGgC,IAAIH,QACnC7B,EAAGkC,qBAAuBlC,EAAGgC,IAAID,MACjC/B,EAAGmE,WAAY,EAIfyH,EAAkBzK,GAElBgK,IAsFAnL,EAAG8E,WAAa,WACd9E,EAAG0I,UAAY1I,EAAG0I,UAGpB1I,EAAG6M,0BAA4B,SAACC,GAC9B9M,EAAG8B,aAAaD,SAAU,EAC1B7B,EAAGiC,uBAAyB6K,GAG9B9M,EAAG+M,wBAA0B,SAACC,GAC5BhN,EAAG8B,aAAaC,OAAQ,EACxB/B,EAAGkC,qBAAuB8K,GAG5BhN,EAAGiN,iBAAmB,SAAC7M,EAAS0K,GACzB1K,IAELJ,EAAG2B,SAASC,SAAU,EAEtBwG,EAAmBrJ,OAAO+L,GACvB1I,KAAK,WACJpC,EAAG2B,SAASC,SAAU,EACtB5B,EAAG2B,SAASE,SAAU,EAEtB7B,EAAG6M,0BAA0B7M,EAAGgC,IAAIH,SAEpC+J,EAAkBzK,GAClBpB,IAEAqB,EAAS,WACPpB,EAAG2B,SAASE,SAAU,GACrB,QACH,SACK,SAAAmB,GACLhD,EAAG2B,SAASC,SAAU,EACtB5B,EAAG+M,wBAAwB/M,EAAGgC,IAAI2K,YAElCnL,QAAQC,IAAI,yBAA0BuB,OAI5ChD,EAAGgM,iBAAmB,SAACO,EAAaT,GAElC,GAAIoB,KAEJX,GAAYH,QAAQ,SAACtB,GACfgB,EAAOhB,EAAWhK,OAAQ,GAC5BoM,EAAUb,KAAKvB,EAAWhK,MAI1BoM,EAAUzI,QAAU,EACtBuH,EAAiBkB,GACd9K,KAAK,WACJpC,EAAG6M,0BAA0B7M,EAAGgC,IAAIH,SACpC+J,EAAkBzK,KAClB,SACK,SAAA6B,GACLhD,EAAG+M,wBAAwB/M,EAAGgC,IAAID,OAClCP,QAAQC,IAAI,yBAA0BuB,KAG1ChD,EAAG+M,wBAAwB/M,EAAGgC,IAAI2K,aAKtC3M,EAAGsM,kBAAoB,SAACC,EAAaT,GAEnC,GAAIqB,KAEJZ,GAAYH,QAAQ,SAACtB,GACfgB,EAAOhB,EAAWhK,OAAQ,GAC5BqM,EAAWd,KAAKvB,EAAWhK,MAI3BqM,EAAW1I,QAAU,EACvB6H,EAAkBa,GACf/K,KAAK,WACJpC,EAAG6M,0BAA0B7M,EAAGgC,IAAIH,SACpC+J,EAAkBzK,KAClB,SACK,SAAA6B,GACLhD,EAAG+M,wBAAwB/M,EAAGgC,IAAID,OAClCP,QAAQC,IAAI,yBAA0BuB,KAG1ChD,EAAG+M,wBAAwB/M,EAAGgC,IAAI4K,oBAKtC5M,EAAGoN,uBAAyB,SAACb,EAAaT,GACxC,GAAIqB,KAEJZ,GAAYH,QAAQ,SAACtB,GACfgB,EAAOhB,EAAWhK,OAAQ,GAC5BqM,EAAWd,KAAKvB,EAAWhK,MAI3BqM,EAAW1I,QAAU,EACvBzE,EAAGmE,WAAY,EAEfnE,EAAG+M,wBAAwB/M,EAAGgC,IAAI4K,oBAItC5M,EAAGqN,aAAe,WAChBrN,EAAGsM,kBAAkBtM,EAAG6L,eAAgB7L,EAAG8L,SAG7C9L,EAAGgF,WAAa,WACdhF,EAAGmE,WAAY,GnCk0DrB+G,GAAgBzL,SAAW,qBAAsB,eAAgB,eAAgB,WAAY,OAAQ,KAAM,WmCrzD3GxB,QACGC,OAAO,WACPqC,WAAW,kBAAmB2K,MC9PnC,WpCwjEE,GoCrjEMoC,GACO,QADPA,GACQ5K,EAAeC,EAAmBrE,EAAcsE,EAAoBL,EAAcnB,EAAUoB,GA8BtG,QAAS+K,KACPvN,EAAG2B,SAASC,SAAU,EACtB5B,EAAG2B,SAASE,SAAU,EAEtB9B,IACAC,EAAGwN,eAEHxN,EAAG8B,aAAaD,SAAU,EAC1BmH,SAASC,eAAe,YAAYC,QAEpC9H,EAAS,WACPpB,EAAG2B,SAASE,SAAU,GACrB,MAGL,QAASkB,GAAoBC,GAC3BhD,EAAG2B,SAASC,SAAU,EACtB5B,EAAG8B,aAAaC,OAAQ,EACxBP,QAAQC,IAAI,yBAA0BuB,GAGxC,QAASyK,GAAoB5O,EAAcoB,GACzC,GAAIoG,GAAe7D,IACf8D,EAAwBD,EAAaE,OACrCmH,EAAalL,IAAUiJ,IAAI,EAAG,WAC9B3E,EAAsB4G,EAAWnH,OAEjCoH,EAAsB/K,EAAmB6C,OAAOxF,EAASkD,YAEzDnE,GACFA,KAAMiB,EAASjB,KACfmE,WAAYwK,EACZ9O,aAAcA,EACdyH,sBAAuBA,EACvBJ,SAAU,EACVY,oBAAqBA,EACrBb,MAAO,WACPY,WACE+G,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,KAAM,GAERjI,WAAY,IAGd,OAAO9G,GAGT,QAASgP,GAASnP,EAAcoB,GAC9B,GAAIjB,GAAOyO,EAAmB5O,EAAcoB,EAE5C3B,GAAaS,OAAOC,GACjBoD,KAAKmL,GAAqB,SACpBxK,GAGX,QAASkL,GAAYpP,EAAcoB,GACjC,GAAIjB,GAAOyO,EAAmB5O,EAAcoB,EAE5C3B,GAAaa,KAAKN,EAAcoB,EAASjB,MACtCoD,KAAK,SAAAmC,GACJ,GAAIrF,GAASjB,QAAQ8F,SAASQ,GAAKP,KAAK,GAAGlD,EAC3C,OAAOxC,GAAagB,OAAOJ,EAAQF,KAEpCoD,KAAKmL,GAAqB,SACpBxK,GAGX,QAASmL,GAAgBrP,EAAcoB,GACrC3B,EAAae,OAAOR,EAAcoB,EAASjB,MACxCoD,KAAK,SAAAmC,GACJ,GAAI4J,GAAclQ,QAAQ8F,SAASQ,GAAKP,IAEpCmK,IACFnO,EAAGmE,WAAY,EACfnE,EAAG2B,SAASC,SAAU,GAEtBoM,EAAQnP,EAAcoB,KAExB,SACK,SAAA+C,GACLxB,QAAQC,IAAI,uBAAwBuB,KAI1C,QAASjD,KACPC,EAAGoO,YAAYpP,KAAKyN,UAAW,EAC/BzM,EAAGoO,YAAYjL,WAAWsJ,UAAW,EACrCzM,EAAGoO,YAAY1B,YAAa,EAC5B1M,EAAGC,YpC67DPpC,gBAAgBqC,KoCtjEZoN,EAGF,IAAItN,GAAKE,IAITF,GAAGC,YACHD,EAAG0B,aACD1C,KAAM,iBACNmE,WAAY,uFAEdnD,EAAG2B,UACDC,SAAS,EACTC,SAAS,GAEX7B,EAAGnB,aAAe0D,EAAa1D,aAC/BmB,EAAG8B,cACDD,SAAS,EACTE,OAAO,GAET/B,EAAGgC,KACDH,QAAS,2BACTE,MAAO,2CAET/B,EAAGiC,uBAAyBjC,EAAGgC,IAAIH,QACnC7B,EAAGkC,qBAAuBlC,EAAGgC,IAAID,MACjC/B,EAAGmE,WAAY,EAmGfnE,EAAGwJ,WAAa,WACdxJ,EAAGmE,WAAY,GAGjBnE,EAAGmJ,SAAW,SAACtK,EAAcoB,GAC3BgO,EAAWpP,EAAcoB,IAG3BD,EAAGqO,QAAU,SAACxP,EAAcoB,GAC1B+N,EAAQnP,EAAcoB,IAGxBD,EAAGsO,cAAgB,SAAAtP,GACJuE,SAATvE,GACF2D,EAAkB4L,kBAAkB7L,EAAc8L,WAAYxP,GAC3DoD,KAAK,SAAAmC,GACJvE,EAAGwN,YAAcjJ,EAAIP,KAAKwJ,cAC1B,SACK,SAAAxK,GACLxB,QAAQC,IAAI,yBAA0BuB,MAK9ChD,EAAGyO,OAAS,SAACrO,EAASvB,EAAcoB,GAC7BG,IAELJ,EAAG2B,SAASC,SAAU,EAEtBsM,EAAerP,EAAcoB,KAG/BD,EAAG0O,eAAiB,SAAAvL,GAEhBnD,EAAGC,SAASkD,WADiBI,SAA3BvD,EAAGC,SAASkD,WACWnD,EAAGC,SAASkD,WAAa,OAASA,EAElCA,GAI7BnD,EAAGD,UAAY,WACbA,KpC4jENuN,GAAa7N,SAAW,gBAAiB,oBAAqB,eAAgB,qBAAsB,eAAgB,WAAY,WoC/iEhIxB,QACGC,OAAO,WACPqC,WAAW,eAAgB+M,MCzLhC,WAQErP,QACGC,OAAO,QACN,iBCVN,WtCwvEE,GsCrvEMyQ,GACO,QADPA,GACQjH,EAAaI,GtCqvEzBjK,gBAAgBqC,KsCtvEZyO,EAGF,IAAI3O,GAAKE,IAITF,GAAGmB,MAAO,EAEVnB,EAAG4O,UAAY,SAAAC,GACb7O,EAAG8O,OAASD,GAKdnH,EAAYqH,aACT3M,KAAK,SAAAjB,GACAA,EAAK6C,QAAS,IAChBhE,EAAGmB,MAAO,EACV2G,EAAQE,SAAW,2BAGrBxG,QAAQC,IAAI,aAAczB,EAAGmB,QAC7B,SACK,SAAA6B,GACLxB,QAAQC,IAAI,yBAA0BuB,KtCkwE9C2L,GAAYlP,SAAW,cAAe,WsCrvEtCxB,QACGC,OAAO,QACPqC,WAAW,cAAeoO,MC3C9B,WAOC,QAAS5H,GAAOC,GACdA,EACGC,MAAM,QACLC,YAAU,EACVE,OACE,IACEC,YAAa,sBAEf2H,iBACE3H,YAAa,yBACb9G,WAAY,cACZgH,aAAc,cAInBN,MAAM,aACLE,IAAK,QACLE,YAAa,qBACb9G,WAAY,WACZgH,aAAc,SAvBpBtJ,QACGC,OAAO,QACP6I,OAAOA,GvC+zEVA,EAAOtH,SAAW,qBwCp0EnB,WxC+zEC,GwC5zEMwP,GACO,QADPA,KxC6zEJpR,gBAAgBqC,KwC7zEZ+O,EAEF,IAAIjP,GAAKE,IACTF,GAAGS,SAAW,WAWlBxC,SACGC,OAAO,QACPqC,WAAW,WAAY0O,MCnB5B,WAQEhR,QACGC,OAAO,gBCTZ,WAcE,QAAS0E,KAEP,GAAIsM,KAqBJ,OAnBAA,GAAuBzJ,OAAS,SAAA0J,GAC9B,GAAa5L,SAAT4L,EAAJ,CAEA,GAAIC,GAAgBD,EAAKE,QAAQ,MAAO,OACxC,OAAOD,KAGTF,EAAuB1L,SAAW,SAAA2L,GAChC,GAAa5L,SAAT4L,EAAJ,CAEA,GAAIC,GAAgBD,EAAKE,QAAQ,QAAS,MACjBA,QAAQ,SAAU,MAClBA,QAAQ,WAAY,MACpBA,QAAQ,SAAU,KAClBA,QAAQ,UAAW,KACnBA,QAAQ,QAAS,IAC1C,OAAOD,KAGFF,EA3BTjR,QACGC,OAAO,UACPsB,QAAQ,qBAAsBoD,MCZnC,WAuBE,QAAS0M,KACP,OACEC,SAAU,KACVC,SACAnI,YAAa,oCACbgI,SAAS,EACTpO,KAAI,SAACuO,EAAOC,EAASC,GAGnBF,EAAMG,MAAQD,EAAMC,QAb1B1R,QACGC,OAAO,UACP0R,UAAU,UAAWN,MCrB1B,WAcE,QAAS7M,GAAWD,GAClB,GAAIqN,KA2FJ,OAvEAA,GAAehK,eAAiB,SAACC,EAAYH,GAC3C,GAAImK,GAAgBhK,EAChBF,EAAarC,OACbwM,EAAgB,GAEpB,QAAQpK,GACN,IAAK,QACHC,EAAgBkK,EAAgB,GAChClK,EAAgCmK,EAAhBnK,EAAgCmK,EAAgBnK,CAChE,MACF,KAAK,OACHA,EAAgBkK,EAAgB,IAChClK,EAAgCmK,EAAhBnK,EAAgCmK,EAAgBnK,CAChE,MACF,KAAK,OACHA,EAAgBkK,CAChB,MACF,KAAK,OACHlK,EAAgBkK,EAAgB,IAIpC,MAAOlK,IAITiK,EAAe7J,UAAY,SAACC,EAAOC,EAAUP,GAC3C,GAAe,UAAXA,EACF,MAAO,UACF,IAAe,SAAXA,EACT,MAAO,QAGT,IAAc,aAAVM,EAAsB,CACxB,GAAkB,IAAbC,EACH,MAAO,UACF,IAAiB,KAAbA,EACT,MAAO,SAIX,MAAc,WAAVD,EACK,SADT,QAOF4J,EAAezJ,aAAe,SAACH,EAAOC,EAAUJ,EAAYH,GAC1D,GAAe,UAAXA,EACF,MAAO,EACF,IAAe,SAAXA,GAA+B,aAAVM,EAC9B,MAAO,KAGT,IAAc,aAAVA,EACF,OAAQC,GACN,IAAK,GACH,MAAO,GACT,KAAK,IACH,MAAO,UAEN,IAAc,WAAVD,EACT,MAAOC,GAAWJ,GAItB+J,EAAepJ,eAAiB,SAACN,GAC/B,MAAO3D,KAAUiJ,IAAItF,EAAa,YAG7B0J,EAhGT5R,QACGC,OAAO,UACPsB,QAAQ,aAAciD,G5CmhFzBA,EAAWhD,SAAW,c6C/hFxB,WAmBE,QAASqC,GAAaV,GACpB,OACEmO,SAAU,KACVC,OACEQ,KAAM,IACNC,MAAO,KAET5I,YAAa,yCACb6I,YAAY,EACZb,SAAS,EACTpO,KAAI,SAACuO,EAAOC,EAASC,GAGnBF,EAAMW,OAAO,OAAQ,WACnB/O,EAAS,WACPoO,EAAMQ,MAAO,GACZ,UApBX/R,QACGC,OAAO,UACP0R,UAAU,eAAgB9N,G7CwjF7BA,EAAarC,SAAW,e8CzkF1B,WA0BE,QAAS2Q,KACP,OACEb,SAAU,KACVC,OACEQ,KAAM,IACNK,MAAO,KACPC,KAAM,MAERjJ,YAAa,kCACbgI,SAAS,EACTa,YAAY,EACZjP,KAAI,SAACuO,EAAOC,EAASC,GAGnBF,EAAMe,QAAUb,EAAMa,SAAW,GAEjCf,EAAMgB,WAAad,EAAMc,YAAc,MACvChB,EAAMiB,UAAYf,EAAMe,WAAa,KAErCjB,EAAMkB,WAA6BnN,SAAhBiM,EAAMa,OAAsB,GAAO,EACtDb,EAAMmB,UAA2BpN,SAAfiM,EAAMc,MAAqB,GAAO,EAEpDd,EAAMoB,aAAwCrN,SAAzBmM,EAAMmB,gBAA+B,GAAO,EAEjErB,EAAMxK,WAAa,WACjBwK,EAAMQ,MAAO,KA7BrB/R,QACGC,OAAO,UACP0R,UAAU,QAASQ,MCxBxB,WAcE,QAAShG,GAAc7L,GACrB,GAAIuS,KAOJ,OAJAA,GAAkBvG,KAAO,SAAC7L,EAAQsF,GAChC,MAAOzF,GAAMU,KAAK,oBAAsBP,EAAQsF,IAG3C8M,EAZT7S,QACGC,OAAO,UACPsB,QAAQ,gBAAiB4K,G/CgpF5BA,EAAc3K,SAAW,YgD5pF3B,WAuBE,QAASsR,KACP,OACExB,SAAU,IACVC,OACEuB,SAAU,KAEZ1B,SAAS,EACTpO,KAAI,SAACuO,EAAOC,EAASC,GAInBD,EAAQuB,KAAK,SAAU,SAAUC,GAC/BzB,EAAMuB,WAGN,KAAK,GAFDpG,GAAQsG,EAAYC,OAAOvG,MAEtBwG,EAAI,EAAGC,EAAC7N,OAAE6N,EAAIzG,EAAMwG,GAAIA,IAAK,CACpC,GAAIE,GAAS,GAAIC,WAEjBD,GAAOE,OAAS,SAAWC,GACzB,MAAO,UAAUC,GACfjC,EAAMkC,OAAO,WACXlC,EAAMuB,SAAS1E,MAAOsF,KAAMH,EAAKG,KAAMC,QAASH,EAAUP,OAAOW,aAGpET,GAEHC,EAAOS,WAAWV,QA9B5BnT,QACGC,OAAO,UACP0R,UAAU,WAAYmB,MCrB3B,WAcE,QAASpO,GAAkBpE,EAAO8J,GAEhC,GAAI0J,KA6CJ,OA3CAA,GAAsBxD,kBAAoB,SAACC,EAAYxP,GACrD,MAAOT,GAAMI,IAAI,6DAA+DK,GAC9EgT,SAAWC,gBAAiBzD,MAKhCuD,EAAsBG,mBAAqB,SAAAlT,GACzC,MAAOT,GAAMI,IAAI,uBAAyBK,IAI5C+S,EAAsBnO,sBAAwB,SAAAD,GAC5C,MAAOpF,GAAMF,IAAI,uBAAyBsF,EAAQ7C,GAAI6C,IAIxDoO,EAAsBI,sBAAwB,SAACC,EAAUpT,GAEvD,GAAIqT,GAAWhK,EAAGiK,OAoBlB,OAlBA/T,GAAMgU,MAAM,wEAA0EvT,EAAO,4CAA8CoT,EAAW,2BACnJhQ,KAAK,SAAAmC,GACJ,GAAIiO,GAAoBvU,QAAQ8F,SAASQ,GAAKP,KAC1CH,EAAkBN,MAGpBM,GADyC,IAAvC2O,EAAkBC,WAAWC,MACV7O,EAAmBwI,KAAKmG,EAAkBG,MAAM,GAAGC,SAEnD,KAGvBP,EAAS5K,QAAQ5D,KACjB,SACK,SAAAb,GACLqP,EAASQ,OAAO7P,GAChBxB,QAAQC,IAAI,yBAA0BuB,KAGnCqP,EAASS,SAIXf,EAnDT9T,QACGC,OAAO,UACPsB,QAAQ,oBAAqBmD,GjDswFhCA,EAAkBlD,SAAW,QAAS,SkDlxFvC,WAcC,QAASiD,KAEP,GAAIqQ,KAMJ,OAJAA,GAAkBvE,WAAa,qDAC/BuE,EAAkBX,SAAW,mCAC7BW,EAAkBC,MAAQ,uCAEnBD,EAZT9U,QACGC,OAAO,UACPsB,QAAQ,gBAAiBkD,MCZ9B,WAQEzE,QACGC,OAAO,QACN,iBCVL,WpD8yFC,GoD3yFM+U,GACO,QADPA,KpD4yFJpV,gBAAgBqC,KoD5yFZ+S,EAEF,IAAIjT,GAAKE,IACTF,GAAGS,SAAW,eAWlBxC,SACGC,OAAO,QACPqC,WAAW,eAAgB0S,MCnB/B,WrDq0FC,GqDl0FMC,GACO,QADPA,KrDm0FJrV,gBAAgBqC,KqDn0FZgT,EAEF,IAAIlT,GAAKE,IACTF,GAAGS,SAAW,YAWlBxC,SACGC,OAAO,QACPqC,WAAW,YAAa2S,MCnB7B,WAcE,QAASxL,GAAYhF,EAAenE,EAAO8J,EAAIP,GAE7C,GAAIqL,KAsCJ,OAlCAA,GAAgBpE,WAAa,WAC3B,MAAOxQ,GAAMI,IAAI,mBAKnBwU,EAAgBxL,cAAgB,WAE9B,GAAI0K,GAAWhK,EAAGiK,OAkBlB,OAhBA/T,GAAMI,IAAI,kBACPyD,KAAK,SAAAjB,GACJ,GAAIA,GAAOA,EAAK6C,IACZ7C,MAAS,EACXkR,EAAS5K,QAAQtG,EAAKiS,UAEtBf,EAASQ,SACT/K,EAAQE,SAAW,cAErB,SACK,SAAAhF,GACLqP,EAASQ,SACT/K,EAAQE,SAAW,MACnBxG,QAAQC,IAAI,yBAA0BuB,KAGnCqP,EAASS,SAIlBK,EAAgBpL,OAAS,WACvB,MAAOxJ,GAAMI,IAAI,iBAGZwU,EA5CTlV,QACGC,OAAO,QACPsB,QAAQ,cAAekI,GtDg5F1BA,EAAYjI,SAAW,gBAAiB,QAAS,KAAM,cuD55FzD,WAOE,QAASsH,GAAOC,GACdA,EACGC,MAAM,aACLC,YAAU,EACVE,OACE,IACEC,YAAa,yBAIlBJ,MAAM,mBACLE,IAAK,SACLE,YAAa,sBACb9G,WAAY,YACZgH,aAAc,UAEfN,MAAM,sBACLE,IAAK,YACLE,YAAa,yBACb9G,WAAY,eACZgH,aAAc,aAEfN,MAAM,oBACLE,IAAK,UACLE,YAAa,uBACb9G,WAAY,aACZgH,aAAc,WA9BpBtJ,QACGC,OAAO,QACP6I,OAAOA,GvDy7FVA,EAAOtH,SAAW,qBwD97FpB,WAOE,QAASsH,GAAOsM,GACdA,EAAmBC,UAAU,SAL/BrV,QACGC,OAAO,YACP6I,OAAOA,GxDq8FVA,EAAOtH,SAAW","file":"app-de08b051.js","sourcesContent":["'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name bigvocab\n   * @description\n   *\n   */\n  angular.module('bigvocab', ['ngAria', 'ngAnimate', 'ngMessages', 'ui.router', '720kb.tooltips', 'ngAudio', 'angular-momentjs', 'cb.x2js', 'home', 'auth', 'mainApp',\n  // 'ramda',\n  'common']);\n\n  // ramda module\n  // angular.module('ramda', []);\n  // angular.module('ramda').factory('R', function ($window) {\n  //   return $window.R;\n  // });\n})();\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/top-menu.tpl.html',\n    '<div class=\"p2\">\\n' +\n    '\t<form name=\"topMenu.topMenuForm\" ng-submit=\"topMenu.submitSearch(topMenu.topMenuForm.$valid, topMenu.formData.searchString)\">\\n' +\n    '\t\t<input type=\"text\" name=\"search\" ng-model=\"topMenu.formData.searchString\" class=\"field field-search col-8 sm-col-6 md-col-4 lg-col-3 col-right\">\\n' +\n    '\t\t\\n' +\n    '\t\t<!-- hidden button -->\\n' +\n    '\t\t<button type=\"submit\" style=\"visibility: hidden\"></button>\\n' +\n    '\t\t<!-- end: hidden button -->\\n' +\n    '\t</form>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/test-words.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix center\">\\n' +\n    '\\n' +\n    '\t\t<h1 class=\"mt1 mb3\">Test Time!</h1>\\n' +\n    '\\n' +\n    '\t\t<div class=\"mb2 bold\"><span class=\"gray\">Today\\'s Quota:</span> 78 <span class=\"gray\">/ 123 words left</span></div>\\n' +\n    '\\n' +\n    '\t\t<div class=\"md-col-4 sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"h2 px2 py4 bg-white rounded\">Hello</div>\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t\t<div class=\"md-col-4 sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"clearfix mxn1\">\\n' +\n    '\t\t\t\t<div class=\"col col-6 px1\">\\n' +\n    '\t\t\t\t\t<a class=\"btn mt2 bg-red block white\">Not sure<span class=\"ti-close ml1\"></span></a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div class=\"col col-6 px1\">\\n' +\n    '\t\t\t\t\t<a class=\"btn mt2 bg-green block white\">Easy<span class=\"ti-check ml1\"></span></a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/sidebar.tpl.html',\n    '<!--/////////// DESKTOP ONLY ///////////-->\\n' +\n    '<div class=\"sm-show\" style=\"margin-right: 63px;\">\\n' +\n    '\\n' +\n    '\t<div class=\"bg-navy fixed white z1\" style=\"height: 100vh;\">\\n' +\n    '\t\t<div class=\"flex flex-column flex-center py3\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<a ui-sref=\"mainApp.collections\"><img class=\"mb2\" src=\"../images/logo/bigvocab-logo-color.svg\" width=\"56px\"></a>\\n' +\n    '\t\t\t<a ui-sref=\"{{ navItem.link }}\" tooltips title=\"{{ navItem.title }}\" tooltip-placement=\"right\" class=\"btn btn-icon h2 center p2\" ng-repeat=\"navItem in sidebar.navItems | orderBy:\\'id\\'\" tabindex=\"-1\">\\n' +\n    '\t\t\t\t<span class=\"{{ navItem.icon }}\"></span>\\n' +\n    '\t\t\t</a>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '<!--/////////// end: DESKTOP ONLY ///////////-->\\n' +\n    '\\n' +\n    '<!--/////////// MOBILE ONLY ///////////-->\\n' +\n    '<div class=\"sm-hide\">\\n' +\n    '\\n' +\n    '\t<!-- toggle button background -->\\n' +\n    '\t<div class=\"fixed z2\" style=\"background-color: rgba(255,255,255,0.93); width: 58px; height:58px;\"></div>\\n' +\n    '\t<!-- toggle button background -->\\n' +\n    '\\n' +\n    '\t<!-- toggle button -->\\n' +\n    '\t<div class=\"fixed z3\">\\n' +\n    '\t\t<a ng-click=\"sidebar.toggleSidebar()\" class=\"btn btn-icon p2 h3\" ng-class=\"{\\'black\\': sidebar.toggle === false, \\'white\\': sidebar.toggle === true}\"><span class=\"ti-menu\"></span></a>\\n' +\n    '\t</div>\\n' +\n    '\t<!-- end: toggle button -->\\n' +\n    '\\n' +\n    '\t<!-- menu items -->\\n' +\n    '\t<div class=\"bg-navy fixed white z2 translateX-n-100 transition-all-300\" ng-class=\"{\\'translateX-n-100\\': sidebar.toggle === false, \\'translateX-0\\': sidebar.toggle === true }\" style=\"height: 100vh;\">\\n' +\n    '\t\t<div class=\"flex flex-column py2 mt4\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<div style=\"margin-left:20px\"><img class=\"mb2\" src=\"../images/logo/bigvocab-logo-color.svg\" width=\"56px\"></div>\\n' +\n    '\t\t\t<a ui-sref=\"{{ navItem.link }}\" ng-click=\"sidebar.toggleSidebar();\" class=\"btn btn-icon py2 px3 flex flex-center\" ng-repeat=\"navItem in sidebar.navItems | orderBy:\\'id\\'\" tabindex=\"-1\">\\n' +\n    '\t\t\t\t<div class=\"{{ navItem.icon }} h3 mr2\"></div>\\n' +\n    '\t\t\t\t<div class=\"h5\">{{ navItem.title }}</div>\\n' +\n    '\t\t\t</a>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\t<!-- end: menu items -->\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '<!--/////////// end: MOBILE ONLY ///////////-->\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/settings.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-8 md-col-4 mx-auto center px2\">\\n' +\n    '\t\\n' +\n    '\t\t\t<h1 class=\"mt1 mb2\">Settings</h1>\\n' +\n    '\\n' +\n    '\t\t\t<form name=\"settings.settingsForm\" \\n' +\n    '\t\t\t\t\t\tng-submit=\"settings.saveSettings(settings.formData.maxDailyWords)\"\\n' +\n    '\t\t\t\t\t\tnovalidate>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mb1 bold\">Max # of study words per day</div>\\n' +\n    '\t\t\t\t<input name=\"maxDailyWords\" type=\"number\" ng-model=\"settings.formData.maxDailyWords\" class=\"field col-12\" placeholder=\"{{ settings.placeholder.maxDailyWords }}\" autofocus>\\n' +\n    '\\n' +\n    '\t\t\t\t<button type=\"submit\"\\n' +\n    '\t\t\t\t\t\t\t\tclass=\"btn btn-primary col-12 mt2\"\\n' +\n    '\t\t\t\t\t\t\t\tng-disabled=\"settings.btnState.success || settings.btnState.loading\">\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"!settings.btnState.loading && !settings.btnState.success\">Save Changes</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"settings.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"settings.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t</button>\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"settings.notification.success\"><span class=\"ti-check mr1\"></span>{{ settings.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"settings.notification.error\"><span class=\"ti-alert mr1\"></span>{{ settings.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/review-words.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix center\">\\n' +\n    '\\n' +\n    '\t\t<h1 class=\"mt1 mb3\">Study Time!</h1>\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"flex flex-justify\">\\n' +\n    '\t\t\t\t<div class=\"mb2 bold\">\\n' +\n    '\t\t\t\t\t<span class=\"gray\">Today\\'s Quota:</span> {{ reviewWords.totalWordsCount - reviewWords.wordCounter }} <span class=\"gray\">/ {{ reviewWords.totalWordsCount }} words left</span>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div>\\n' +\n    '\t\t\t\t\t<a ng-click=\"reviewWords.toggleEdit()\" ng-if=\"!reviewWords.finished\" class=\"h5 gray underline\">Edit</a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t\t<!-- edit word -->\\n' +\n    '\t\t<div class=\"sm-col-6 mx-auto px2 bg-lighten-3 rounded py2 mb2 ng-animation-fadeInDown\" ng-if=\"reviewWords.editToggle && !reviewWords.finished\">\\n' +\n    '\t\t\t<form>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"col-12 flex mb1\">\\n' +\n    '\t\t\t\t\t<input type=\"text\" name=\"editWord\" ng-model=\"reviewWords.formData.word\" class=\"field flex-auto mr1\" required>\\n' +\n    '\t\t\t\t\t<button class=\"btn btn-form btn-red-outline\" ng-click=\"reviewWords.submitDelete(reviewWords.currentWord.id)\"><span class=\"ti-trash\"></span></button>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<textarea name=\"editDefinition\" ng-model=\"reviewWords.formData.definition\" class=\"field col-12\" style=\"height: 80px;\"></textarea>\\n' +\n    '\\n' +\n    '\t\t\t\t<button ng-click=\"reviewWords.submitEdit(reviewWords.currentWord.id, reviewWords.formData.word, reviewWords.formData.definition)\" class=\"btn btn-green btn-form col-12 mt1\">Save Changes</button>\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: edit word -->\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"p3 bg-white rounded flex flex-column flex-center-justified\" style=\"min-height: 184px\">\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- word -->\\n' +\n    '\t\t\t\t<div ng-if=\"reviewWords.showWord\" class=\"h2 mb1\">{{ reviewWords.currentWord.word }}</div>\\n' +\n    '\t\t\t\t<!-- end: word -->\\n' +\n    '\\n' +\n    '\t\t\t\t<div ng-if=\"reviewWords.showAnswer\">\\n' +\n    '\t\t\t\t\t<!-- definition -->\\n' +\n    '\t\t\t\t\t<div class=\"h4 dark-gray\" style=\"white-space: pre-wrap;\">{{ reviewWords.currentWord.definition }}</div>\\n' +\n    '\t\t\t\t\t<!-- end: definition -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t<!-- pronunciation -->\\n' +\n    '\t\t\t\t\t<div ng-if=\"reviewWords.pronunciations !== [] && !reviewWords.finished\" \\n' +\n    '\t\t\t\t\t\t\t class=\"mt2 mx-auto\">\\n' +\n    '\t\t\t\t\t\t<button ng-repeat=\"pronunciation in reviewWords.pronunciations\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\tng-click=\"reviewWords.playPronunciation(pronunciation)\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-blue-outline btn-sm ml1 mr1\" style=\"width: 48px; height: 48px; border-radius: 50%;\">\\n' +\n    '\t\t\t\t\t\t\t<span class=\"ti-control-play\" style=\"margin-left:4px\"></span>\\n' +\n    '\t\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<!-- end: pronunciation -->\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- finish message -->\\n' +\n    '\t\t\t\t<div class=\"h2 mb1\" ng-if=\"reviewWords.finished\">All done for the day!</div>\\n' +\n    '\t\t\t\t<!-- finish message -->\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t\t<!-- show answer button -->\\n' +\n    '\t\t<div ng-if=\"!reviewWords.showAnswer && !reviewWords.finished\" class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<button ng-click=\"reviewWords.revealAnswer()\" \\n' +\n    '\t\t\t\t\t\t\tclass=\"btn btn-primary mt2 col-12\">Show Answer</button>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: show answer button -->\\n' +\n    '\\n' +\n    '\t\t<!-- review response buttons -->\\n' +\n    '\t\t<div ng-if=\"reviewWords.showAnswer && !reviewWords.finished\" class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"clearfix mxn1\">\\n' +\n    '\t\t\t\t<div class=\"col col-3 px1 red\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, \\'again\\')\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-red mt2 col-12\">Again</button>\\n' +\n    '\t\t\t\t\t<div class=\"h6 gray center mt1\">Can\\'t recall</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div class=\"col col-3 px1 green\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, \\'hard\\')\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-yellow-green mt2 col-12\">Hard</button>\\n' +\n    '\t\t\t\t\t<div class=\"h6 gray center mt1\">Challenging</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div class=\"col col-3 px1 green\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, \\'good\\')\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-green mt2 col-12\">Good</button>\\n' +\n    '\t\t\t\t\t<div class=\"h6 gray center mt1\">Just right</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div class=\"col col-3 px1 green\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, \\'easy\\')\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-green mt2 col-12\">Easy</button>\\n' +\n    '\t\t\t\t\t<div class=\"h6 gray center mt1\">Too easy</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: review response buttons -->\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"reviewWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ reviewWords.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"reviewWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ reviewWords.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '<!-- modal -->\\n' +\n    '<modal show=\"reviewWords.showModal\" \\n' +\n    '\t      modal-bg=\"bg-white\" \\n' +\n    '\t      yes-cb=\"reviewWords.deleteWord(reviewWords.deleteId)\" \\n' +\n    '\t      no-cb=\"reviewWords.closeModal()\"\\n' +\n    '\t      yes-message=\"Yes, delete it\"\\n' +\n    '\t      no-message=\"No, cancel\">\\n' +\n    '\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\\n' +\n    '</modal>\\n' +\n    '<!-- end: modal -->');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/main-app.tpl.html',\n    '<div class=\"flex\">\\n' +\n    '\t<div ui-view=\"sidebar\"></div>\\n' +\n    '\t<div class=\"flex-auto flex flex-column bg-darken-1\">\\n' +\n    '\t\t<div ui-view=\"top-menu\"></div>\\n' +\n    '\t\t<div ui-view class=\"py3\" style=\"min-height: 100vh\"></div>\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/logout.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-10 md-col-6 mx-auto center px2\">\\n' +\n    '\t\\n' +\n    '\t\t\t<h1 class=\"mt1 mb2\">Log Out</h1>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"mb3 h4\">Are you sure you want to sign out from Big Vocab?</div>\\n' +\n    '\\n' +\n    '\t\t\t<button class=\"btn btn-blue-outline\" ng-click=\"logout.logout()\">Yes, log me out</button>&nbsp;&nbsp;\\n' +\n    '\t\t\t<button class=\"btn btn-primary\" ng-click=\"logout.goBack()\">No, send me back</button>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/list-words.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<h1 class=\"mt1 mb2 center\">List of All Words</h1>\\n' +\n    '\\n' +\n    '\t\t<!-- search words form -->\\n' +\n    '\t\t<div class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<form name=\"listWords.listWordsForm\" class=\"center\">\\n' +\n    '\t\t\t\t<span class=\"center bold gray\">Total word count: {{ listWords.wordsCount }}</span>\\n' +\n    '\t\t\t\t<input name=\"searchWords\" id=\"searchWords\" type=\"text\" ng-model=\"listWords.formData.searchWords\" class=\"field col-12 mt1 mb3\" placeholder=\"Search any word or definition\">\\n' +\n    '\t\t\t</form>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: search words form -->\\n' +\n    '\\n' +\n    '\t\t<!-- update all words with pronunciations -->\\n' +\n    '\t\t<div class=\"clearfix\">\\n' +\n    '\t\t\t<div class=\"sm-col-10 mx-auto\">\\n' +\n    '\t\t\t\t<button class=\"btn btn-sm btn-primary mb1 h6 right\" \\n' +\n    '\t\t\t\t\t\t\t\tng-click=\"listWords.addAllPronunciations(listWords.words)\"\\n' +\n    '\t\t\t\t\t\t\t\tng-disabled=\"listWords.pronunciationBtnState.success || listWords.pronunciationBtnState.loading\">\\n' +\n    '\t\t\t\t\t<span ng-if=\"!listWords.pronunciationBtnState.loading && !listWords.pronunciationBtnState.success\">Update All Pronunciations</span>\\n' +\n    '\t\t\t\t\t<span ng-if=\"listWords.pronunciationBtnState.loading\"><spinner width=\"12px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t<span ng-if=\"listWords.pronunciationBtnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t</button>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: update all words with pronunciations -->\\n' +\n    '\\n' +\n    '\t\t<!-- list of words -->\\n' +\n    '\t\t<div class=\"clearfix sm-col-10 mx-auto bg-lighten-2 rounded mb4\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<div ng-repeat=\"word in listWords.words | filter: listWords.formData.searchWords | orderBy: \\'word\\' | limitTo: listWords.displayLimit\" class=\"clearfix col col-12 p2\" ng-class=\"{ \\'border-bottom\\': !$last }\" track by word.id>\\n' +\n    '\t\t\t\t<form name=\"listWords.listWordsForm\" ng-submit=\"listWords.saveChanges(listWords.listWordsForm.$valid, word, listWords.formData)\">\\n' +\n    '\\n' +\n    '\t\t\t\t\t<!-- word -->\\n' +\n    '\t\t\t\t\t<div class=\"sm-col sm-col-3 flex flex-center\">\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<!-- pronunciation -->\\n' +\n    '\t\t\t\t\t\t<a ng-click=\"listWords.playPronunciation(word)\" \\n' +\n    '\t\t\t\t\t\t\t ng-if=\"!listWords.showEdit[word.id] && word.pronunciations !== [] && word.pronunciations !== undefined\"  \\n' +\n    '\t\t\t\t\t\t\t class=\"btn btn-blue-outline mr2 center\" style=\"padding: 0.3em 0.24em; border-radius: 50%; width: 22px;\">\\n' +\n    '\t\t\t\t\t\t\t<span class=\"ti-control-play\" style=\"margin-left:4px\"></span>\\n' +\n    '\t\t\t\t\t\t</a>\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<div ng-if=\"!listWords.showEdit[word.id] && (word.pronunciations === [] || word.pronunciations === undefined)\" \\n' +\n    '\t\t\t\t\t\t\t\t class=\"inline mr2\" style=\"width: 32px\">&nbsp;</div>\\n' +\n    '\t\t\t\t\t\t<!-- end: pronunciation -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<a ng-click=\"listWords.toggleEdit(word)\" class=\"link bold\" ng-if=\"!listWords.showEdit[word.id]\">{{ word.word }}</a>\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<!-- edit form -->\\n' +\n    '\t\t\t\t\t\t<a ng-if=\"listWords.showEdit[word.id]\" class=\"ti-close mr1\" ng-click=\"listWords.toggleEdit(word)\"></a>\\n' +\n    '\t\t\t\t\t\t<input name=\"word\" \\n' +\n    '\t\t\t\t\t\t\t\t\t type=\"text\" \\n' +\n    '\t\t\t\t\t\t\t\t\t ng-model=\"listWords.formData.word\" \\n' +\n    '\t\t\t\t\t\t\t\t\t ng-if=\"listWords.showEdit[word.id]\" \\n' +\n    '\t\t\t\t\t\t\t\t\t class=\"field flex-auto mr1\" \\n' +\n    '\t\t\t\t\t\t\t\t\t placeholder=\"{{ listWords.placeholder.word }}\" \\n' +\n    '\t\t\t\t\t\t\t\t\t autofocus required>\\n' +\n    '\t\t\t\t\t\t<!-- end: edit form -->\\n' +\n    '\t\\n' +\n    '\t\t\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t\t\t<div ng-messages=\"listWords.listWordsForm.word.$error\" \\n' +\n    '\t\t\t\t\t\t\t\t ng-if=\"listWords.listWordsForm.$submitted && listWords.listWordsForm.word.$touched\" \\n' +\n    '\t\t\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t\t<!-- end: error handling -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<!-- word -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t<!-- definition -->\\n' +\n    '\t\t\t\t\t<div class=\"sm-col sm-col-9 dark-gray flex flex-start flex-wrap\">\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<div class=\"flex flex-center flex-justify col-12\">\\n' +\n    '\t\t\t\t\t\t\t<span ng-if=\"!listWords.showEdit[word.id]\" class=\"flex-auto\" style=\"white-space: pre-wrap;\">{{ word.definition }}</span>\\n' +\n    '\t\t\t\t\t\t\t<!-- delete button -->\\n' +\n    '\t\t\t\t\t\t\t<a ng-click=\"listWords.submitDelete(word.id)\"\\n' +\n    '\t\t\t\t\t\t\t\t ng-disabled=\"listWords.btnState.success || listWords.btnState.loading\"\\n' +\n    '\t\t\t\t\t\t\t\t ng-if=\"!listWords.showEdit[word.id]\" \\n' +\n    '\t\t\t\t\t\t\t\t class=\"ti-trash red inline-block ml2\">\\n' +\n    '\t\t\t\t\t\t\t</a>\\n' +\n    '\t\t\t\t\t\t\t<!-- end: delete button -->\\n' +\n    '\t\t\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<!-- edit form -->\\n' +\n    '\t\t\t\t\t\t<textarea name=\"definition\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tng-model=\"listWords.formData.definition\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tng-if=\"listWords.showEdit[word.id]\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tclass=\"field flex-auto\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tstyle=\"height: 96px;\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"{{ listWords.placeholder.definition }}\">\\n' +\n    '\t\t\t\t\t\t</textarea>\\n' +\n    '\t\t\t\t\t\t<div class=\"sm-col-4 flex flex-wrap\">\\n' +\n    '\t\t\t\t\t\t\t<!-- save button -->\\n' +\n    '\t\t\t\t\t\t\t<button type=\"submit\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tng-if=\"listWords.showEdit[word.id]\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tng-disabled=\"listWords.btnState.success || listWords.btnState.loading\"\\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-form btn-primary col-12 ml1\">\\n' +\n    '\t\t\t\t\t\t\t\t<span ng-if=\"!listWords.btnState.loading && !listWords.btnState.success\">Save Changes</span>\\n' +\n    '\t\t\t\t\t\t\t\t<span ng-if=\"listWords.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t\t\t\t<span ng-if=\"listWords.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t\t\t<!-- end: save button -->\\n' +\n    '\t\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t\t<!-- end: edit form -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<!-- end: definition -->\\n' +\n    '\\n' +\n    '\t\t\t\t</form>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t\t\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: list of words -->\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"listWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ listWords.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"listWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ listWords.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '<!-- modal -->\\n' +\n    '<modal show=\"listWords.showModal\" \\n' +\n    '\t      modal-bg=\"bg-white\" \\n' +\n    '\t      yes-cb=\"listWords.modalYes(listWords.selectedWordId)\" \\n' +\n    '\t      no-cb=\"listWords.modalClose()\"\\n' +\n    '\t      yes-message=\"Yes, delete\"\\n' +\n    '\t      no-message=\"No, cancel\">\\n' +\n    '\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\\n' +\n    '</modal>\\n' +\n    '<!-- end: modal -->');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/import.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-10 md-col-6 mx-auto center px2\">\\n' +\n    '\t\\n' +\n    '\t\t\t<h1 class=\"mt1 mb2\">Import from Anki</h1>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"mb3\">If you upload multiple files, it will merge them and input it into a single collection. If you want each text file to have its own collection, upload one file at a time.</div>\\n' +\n    '\\n' +\n    '\t\t\t<form name=\"import.importForm\" \\n' +\n    '\t\t\t\t\t\tng-submit=\"import.importTextfile(import.importForm.$valid, import.formData)\"\\n' +\n    '\t\t\t\t\t\tnovalidate>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mb1 bold\">Title of the collection to be imported</div>\\n' +\n    '\t\t\t\t<input name=\"collectionTitle\" type=\"text\" ng-model=\"import.formData.collectionTitle\" class=\"field col-12\" placeholder=\"{{ import.placeholder.collectionTitle }}\" autofocus required>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t<div ng-messages=\"import.importForm.collectionTitle.$error\" \\n' +\n    '\t\t\t\t\t\t ng-if=\"import.importForm.$submitted && import.importForm.collectionTitle.$touched\" \\n' +\n    '\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: error handling -->\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mt3 mb1 bold\">Anki text file (i.e. anki-collection-2015.txt)</div>\\n' +\n    '\t\t\t\t<div class=\"file-input\">\\n' +\n    '\t\t\t\t\tClick here to upload your files<span class=\"ti-folder ml1\">\\n' +\n    '\t\t\t\t\t<input name=\"files\" type=\"file\" multiple=\"multiple\" accept=\".txt\" fileread=\"import.formData.files\" class=\"field col-12\" style=\"cursor: pointer; margin-bottom: none\" placeholder=\"{{ import.placeholder.files }}\" required>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- file names -->\\n' +\n    '\t\t\t\t<div class=\"mt1\">\\n' +\n    '\t\t\t\t\t<div ng-repeat=\"file in import.formData.files\" track by $index>{{ file.name }}</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: file names -->\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t<div ng-messages=\"import.importForm.files.$error\" \\n' +\n    '\t\t\t\t\t\t ng-if=\"import.importForm.$submitted\" \\n' +\n    '\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: error handling -->\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- submit button -->\\n' +\n    '\t\t\t\t<button type=\"submit\" class=\"btn btn-primary mt3 mb2\" ng-disabled=\"import.btnState.success || import.btnState.loading\">\\n' +\n    '\t\t\t\t\t<span ng-if=\"!import.btnState.loading && !import.btnState.success\">Import Anki Text File<span class=\"ti-import ml1\"></span></span>\\n' +\n    '\t\t\t\t\t<span ng-if=\"import.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t<span ng-if=\"import.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t</button>\\n' +\n    '\t\t\t\t<!-- end: submit button -->\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"import.notification.success\"><span class=\"ti-check mr1\"></span>{{ import.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"import.notification.error\"><span class=\"ti-alert mr1\"></span>{{ import.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/collections.tpl.html',\n    '<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t<h1 class=\"mt1 center\">My Collections&nbsp;&nbsp;<a ng-click=\"collections.toggleEdit()\" ng-if=\"collections.collectionList.length >= 1\" class=\"h5 gray underline\">Edit</a></h1>\\n' +\n    '\\n' +\n    '\t<!-- edit collection options -->\\n' +\n    '\t<div class=\"md-col-10 lg-col-8 mx-auto px2\" ng-if=\"collections.showEdit\">\\n' +\n    '\t\t<button class=\"btn btn-sm btn-yellow-green h6 mb2\" ng-click=\"collections.mergeCollections(collections.collectionList, collections.checks)\">Merge Selected</button>\\n' +\n    '\t\t<button class=\"btn btn-sm btn-red h6 ml1 mb2\" ng-click=\"collections.showConfirmDeleteModal(collections.collectionList, collections.checks)\">Delete Selected</button>\\n' +\n    '\t</div>\\n' +\n    '\t<!-- end: edit collection options -->\\n' +\n    '\\n' +\n    '\t<div class=\"md-col-10 lg-col-8 mx-auto px2\">\\n' +\n    '\\n' +\n    '\t\t<!-- collection list -->\\n' +\n    '\t\t<div class=\"clearfix bg-white rounded p1 mb2 ng-animation-fadeInUp\" ng-repeat=\"collection in collections.collectionList | orderBy: \\'id\\'\">\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"sm-col sm-col-7\">\\n' +\n    '\t\t\t\t\\n' +\n    '\t\t\t\t<!-- select collection -->\\n' +\n    '\t\t\t\t<input type=\"checkbox\" style=\"margin-left: 8px; margin-right: -16px;\" ng-model=\"collections.checks[collection.id]\" ng-if=\"collections.showEdit\">\\n' +\n    '\t\t\t\t<!-- end: select collection -->\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"btn btn-md bold ml1 mt1 mb1\" style=\"cursor: text\">{{ collection.title }} <span class=\"gray\">(due: {{ collection.dueWordCount }}, new: {{ collection.newWordCount }} )</span></div>\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"sm-col sm-col-5 flex flex-wrap\">\\n' +\n    '\t\t\t\t<a ui-sref=\"mainApp.review-words({ collectionId: collection.id })\" class=\"btn btn-md btn-primary flex-auto center m1 h5\">Study<span class=\"ti-arrow-right ml1\"></span></a>\\n' +\n    '\t\t\t\t<a ui-sref=\"mainApp.add-words({ collectionId: collection.id })\" class=\"btn btn-md btn-blue-outline center dark-gray m1 h5\"><span class=\"ti-plus\"></span></a>\\n' +\n    '\t\t\t\t<a ui-sref=\"mainApp.list-words\" class=\"btn btn-md btn-blue-outline center dark-gray m1 h5\"><span class=\"ti-list\"></span></a>\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: collection list -->\\n' +\n    '\\n' +\n    '\t\t<!-- add collection -->\\n' +\n    '\t\t<div class=\"clearfix bg-light-green px2 py2 mt3 rounded\">\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"center\">\\n' +\n    '\t\t\t\t<div class=\"caps bold m1\">Add Collection</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t<form name=\"collections.addCollectionForm\" \\n' +\n    '\t\t\t\t\t\tng-submit=\"collections.createCollection(collections.addCollectionForm.$valid, { \\n' +\n    '\t\t\t\t\t\t\tuserId: collections.user.id,\\n' +\n    '\t\t\t\t\t\t\ttitle: collections.formData.collectionTitle \\n' +\n    '\t\t\t\t\t\t})\"\\n' +\n    '\t\t\t\t\t\tnovalidate>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col sm-col-8 p1\">\\n' +\n    '\t\t\t\t\t<input name=\"collectionTitle\" type=\"text\" ng-model=\"collections.formData.collectionTitle\" class=\"field col-12\" placeholder=\"{{ collections.placeholder.collectionTitle }}\" required>\\n' +\n    '\\n' +\n    '\t\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t\t<div ng-messages=\"collections.addCollectionForm.collectionTitle.$error\" \\n' +\n    '\t\t\t\t\t\t\t ng-if=\"collections.addCollectionForm.$submitted && collections.addCollectionForm.collectionTitle.$touched\" \\n' +\n    '\t\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<!-- end: error handling -->\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- submit button -->\\n' +\n    '\t\t\t\t<div class=\"sm-col sm-col-4 p1\">\\n' +\n    '\t\t\t\t\t<button type=\"submit\" class=\"btn btn-form btn-green col-12\" ng-disabled=\"collections.btnState.success || collections.btnState.loading\">\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"!collections.btnState.loading && !collections.btnState.success\">Add Collection</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"collections.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"collections.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: submit button -->\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: add collection -->\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"collections.notification.success\"><span class=\"ti-check mr1\"></span>{{ collections.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"collections.notification.error\"><span class=\"ti-alert mr1\"></span>{{ collections.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '<!-- modal -->\\n' +\n    '<modal show=\"collections.showModal\" \\n' +\n    '\t      modal-bg=\"bg-white\" \\n' +\n    '\t      yes-cb=\"collections.confirmModal()\" \\n' +\n    '\t      no-cb=\"collections.closeModal()\" \\n' +\n    '\t      yes-message=\"Yes, delete\" \\n' +\n    '\t      no-message=\"No, abort\">\\n' +\n    '\t<div class=\"center h3\">Are you sure you want to delete the selected collection(s)?</div>\\n' +\n    '</modal>\\n' +\n    '<!-- end: modal -->');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/add-words.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<h1 class=\"mt1 mb3 center\">Add New Words</h1>\\n' +\n    '\\n' +\n    '\t\t<!-- add words form -->\\n' +\n    '\t\t<div class=\"md-col md-col-6 px2\">\\n' +\n    '\\n' +\n    '\t\t\t<form name=\"addWords.addWordForm\" \\n' +\n    '\t\t\t\t\t\tng-submit=\"addWords.submit(addWords.addWordForm.$valid, addWords.collectionId, addWords.formData)\"\\n' +\n    '\t\t\t\t\t\tnovalidate>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mb1 bold\">WORD</div>\\n' +\n    '\t\t\t\t<input id=\"addWords\" name=\"word\" type=\"text\" ng-model=\"addWords.formData.word\" ng-blur=\"addWords.getDefinition(addWords.formData.word)\" class=\"field col-12\" placeholder=\"{{ addWords.placeholder.word }}\" autofocus required>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t<div ng-messages=\"addWords.addWordForm.word.$error\" \\n' +\n    '\t\t\t\t\t\t ng-if=\"addWords.addWordForm.$submitted && addWords.addWordForm.word.$touched\" \\n' +\n    '\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: error handling -->\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mb1 mt2 bold\">MEANING</div>\\n' +\n    '\t\t\t\t<textarea name=\"definition\" ng-model=\"addWords.formData.definition\" class=\"field col-12\" style=\"height: 160px;\" placeholder=\"{{ addWords.placeholder.definition }}\"></textarea>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"flex flex-justify\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"addWords.resetForm()\" class=\"btn btn-outline mt2 mb2\">Reset Form</button>\\n' +\n    '\t\t\t\t\t\\n' +\n    '\t\t\t\t\t<!-- submit button -->\\n' +\n    '\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary mt2 mb2\" ng-disabled=\"addWords.btnState.success || addWords.btnState.loading\">\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"!addWords.btnState.loading && !addWords.btnState.success\"><span class=\"ti-plus mr1\"></span>Add Word</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"addWords.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"addWords.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t<!-- end: submit button -->\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: add words form -->\\n' +\n    '\\n' +\n    '\t\t<!-- definitions from dictionary API -->\\n' +\n    '\t\t<div class=\"md-col md-col-6 px2\">\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"bold gray mb2\">Word definitions from <span class=\"italic\">The American Heritage® Dictionary of the English Language, 4th Edition</span></div>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"bg-light-green rounded p2 mb2 near-black ng-animation-fadeInUp\" ng-repeat=\"definition in addWords.definitions\">\\n' +\n    '\t\t\t\t<div class=\"flex flex-center\">\\n' +\n    '\t\t\t\t\t<div class=\"flex-none\" style=\"width: 52px\">\\n' +\n    '\t\t\t\t\t\t<a ng-click=\"addWords.copyDefinition(definition.text)\" class=\"btn btn-sm btn-green-outline\" tabindex=\"-1\"><span class=\"ti-plus\"></span></a>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<div class=\"h5\">{{ definition.text }}</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- definitions from dictionary API -->\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"addWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ addWords.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"addWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ addWords.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '<!-- modal -->\\n' +\n    '<modal show=\"addWords.showModal\" \\n' +\n    '\t      modal-bg=\"bg-white\" \\n' +\n    '\t      yes-cb=\"addWords.modalYes(addWords.collectionId, addWords.formData)\" \\n' +\n    '\t      no-cb=\"addWords.modalNo(addWords.collectionId, addWords.formData)\"\\n' +\n    '\t      yes-message=\"Yes, overwrite\"\\n' +\n    '\t      no-message=\"No, add new\"\\n' +\n    '\t      add-abort-button>\\n' +\n    '\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\\n' +\n    '</modal>\\n' +\n    '<!-- end: modal -->');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('home/root.tpl.html',\n    '<div ui-view=\"nav-home\"></div>\\n' +\n    '<div ui-view></div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('home/nav-home.tpl.html',\n    '<div class=\"fixed white border-bottom border-lighten-2\" style=\"width: 100%\">\\n' +\n    '\t<div class=\"container\">\\n' +\n    '\t\t<div class=\"flex flex-center\">\\n' +\n    '\t\t\t<a class=\"btn btn-sm\" ui-sref=\"root.home\">\\n' +\n    '\t\t\t\t<img src=\"../images/logo/bigvocab-logo-white.svg\" width=\"50px\" />\\n' +\n    '\t\t\t</a>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"flex-auto\"></div>\\n' +\n    '\\n' +\n    '\t\t\t<div>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- nav items -->\\n' +\n    '\t\t\t\t<a ui-sref=\"root.home\" ng-click=\"navHome.setActive(\\'home\\')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{\\'bold muted-0\\': navHome.active === \\'home\\'}\">Home</a>\\n' +\n    '\t\t\t\t<a ui-sref=\"root.features\" ng-click=\"navHome.setActive(\\'features\\')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{\\'bold muted-0\\': navHome.active === \\'features\\'}\">How it works</a>\\n' +\n    '\t\t\t\t<!--<a ui-sref=\"root.about\" ng-click=\"navHome.setActive(\\'about\\')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{\\'bold muted-0\\': navHome.active === \\'about\\'}\">About</a>-->\\n' +\n    '\t\t\t\t<!-- end: nav items -->\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- login button -->\\n' +\n    '\t\t\t\t<a href=\"/auth/google\" ng-if=\"!navHome.user\" class=\"btn btn-outline btn-sm ml2 mr2 py2 h6\">Login&nbsp;&rarr;</a>\\n' +\n    '\t\t\t\t<!-- end: login button -->\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('home/home.tpl.html',\n    '<div class=\"bg-cover bg-gradient-home\">\\n' +\n    '\\n' +\n    '\t<div class=\"flex flex-center\" style=\"min-height: 100vh;\">\\n' +\n    '\t\t<div class=\"container flex-auto\">\\n' +\n    '\t\t\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col-6 p2 mx-auto white center\">\\n' +\n    '\t\t\t\t\t<div class=\"h1 light\">Big Vocab</div>\\n' +\n    '\t\t\t\t\t<p>Big Vocab uses a method called Spaced Repetition to improve word recall. Think of it as a virtual flash card that\\'s optimized to help you remember more words.</p>\\n' +\n    '\t\t\t\t\t<a ui-sref=\"root.auth.register\" class=\"btn btn-red\">Sign Up</a>&nbsp;&nbsp;\\n' +\n    '\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-outline\">Login</a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('common/spinner-directive.tpl.html',\n    '<img src=\"../images/spinner/oval-sm.svg\" class=\"mr1\" width=\"{{ width }}\">');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('common/notification-directive.tpl.html',\n    '<div ng-if=\"show\" class=\"rounded bg-{{color}} px3 py2 fixed white h5 ng-animation-fadeInUp\" style=\"top: 24px; right: 24px; max-width: 240px;\">\\n' +\n    '\t<div ng-transclude></div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('common/modal-directive.tpl.html',\n    '<!-- overlay -->\\n' +\n    '<div ng-if=\"show\" class=\"fixed z2 top-0 right-0 bottom-0 left-0 bg-darken-3\" ng-click=\"closeModal()\">\\n' +\n    '</div>\\n' +\n    '<!-- end: overlay -->\\n' +\n    '\\n' +\n    '<div ng-if=\"show\" class=\"fixed z3 top-0 right-0 bottom-0 left-0 ng-animation-fadeInUp\">\\n' +\n    '\t<div class=\"flex flex-center flex-center-justified px2\" style=\"width: 100%; height: 100vh;\">\\n' +\n    '\t\t<div class=\"sm-col-8 md-col-7 lg-col-5 relative {{ modalBg }}\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<!-- close button -->\\n' +\n    '\t\t\t<div>\\n' +\n    '\t\t\t\t<a class=\"ti-close absolute right-0 h3 p3\" ng-click=\"closeModal()\"></a>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t\t<!-- end: close button -->\\n' +\n    '\\n' +\n    '\t\t\t<!-- content -->\\n' +\n    '\t\t\t<div class=\"px4 py3 mt1\">\\n' +\n    '\t\t\t\t<div ng-transclude></div>\\n' +\n    '\t\t\t\t<!-- end: content -->\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- buttons -->\\n' +\n    '\t\t\t\t<div class=\"center mt1 mb1\">\\n' +\n    '\t\t\t\t\t<button class=\"btn btn-primary mt2\" ng-click=\"yesCb(); closeModal()\" ng-if=\"showYesBtn\">{{ yesMessage }}</button>&nbsp;&nbsp;\\n' +\n    '\t\t\t\t\t<button class=\"btn btn-primary mt2\" ng-click=\"noCb(); closeModal()\" ng-if=\"showNoBtn\">{{ noMessage }}</button>&nbsp;&nbsp;\\n' +\n    '\t\t\t\t\t<button class=\"btn btn-red mt2\" ng-click=\"closeModal()\" ng-if=\"showAbortBtn\">Cancel</button>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: buttons -->\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('auth/register.tpl.html',\n    '<div class=\"bg-cover bg-gradient-navy\">\\n' +\n    '\\n' +\n    '\t<div class=\"flex flex-center\" style=\"min-height: 100vh\">\\n' +\n    '\t\t<div class=\"container-sm flex-auto\">\\n' +\n    '\t\t\t<div class=\"clearfix white\">\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col sm-col-8 px2 mb3\">\\n' +\n    '\t\t\t\t\t<div class=\"h2 light mb2\">Sign Up</div>\\n' +\n    '\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-primary\">Sign up with Your Google Account</a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col sm-col-4 px2\">\\n' +\n    '\t\t\t\t\t<div class=\"border border-lighten-3 p2\">\\n' +\n    '\t\t\t\t\t\t<p>Already have an account?</p>\\n' +\n    '\t\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-outline block\">Login with Google</a>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('auth/login.tpl.html',\n    '<div class=\"bg-cover bg-gradient-navy\">\\n' +\n    '\\n' +\n    '\t<div class=\"flex flex-center\" style=\"min-height: 100vh;\">\\n' +\n    '\t\t<div class=\"container flex-auto\">\\n' +\n    '\t\t\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col-6 p2 mx-auto white center\">\\n' +\n    '\t\t\t\t\t<div class=\"h1 light mb2\">Login to Big Vocab</div>\\n' +\n    '\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-red\">Login with Google</a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('auth/auth.tpl.html',\n    '<div ui-view=\"root.nav-home\"></div>\\n' +\n    '<div ui-view></div>');\n}]);\n\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name mainApp\n   * @description\n   *\n   */\n  angular.module('mainApp', ['ui.router']);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name mainApp.factory:WordsService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').factory('WordsService', WordsService);\n\n  function WordsService($http) {\n\n    var WordsServiceBase = {};\n\n    // every word for this user\n    WordsServiceBase.getUserAll = function (userId) {\n      return $http.get('/api/words/all/' + userId);\n    };\n\n    // all words for this collection\n    WordsServiceBase.getAll = function (collectionId) {\n      return $http.get('/api/' + collectionId + '/words');\n    };\n\n    // get only the words to be reviewed today\n    WordsServiceBase.getDue = function (collectionId) {\n      return $http.get('/api/' + collectionId + '/words/?filter=dueToday');\n    };\n\n    WordsServiceBase.create = function (word) {\n      return $http.post('/api/words', word);\n    };\n\n    WordsServiceBase.get = function (wordId) {\n      return $http.get('/api/words/' + wordId);\n    };\n\n    // find :: String -> String -> Promise({word})\n    WordsServiceBase.find = function (collectionId, wordStr) {\n      return $http.get('/api/' + collectionId + '/words/' + wordStr);\n    };\n\n    // find :: String -> String -> Promise({word})\n    WordsServiceBase.exists = function (collectionId, word) {\n      return $http.get('/api/' + collectionId + '/words/' + word + '/?exists');\n    };\n\n    WordsServiceBase.update = function (wordId, wordUpdate) {\n      return $http.put('/api/words/' + wordId, wordUpdate);\n    };\n\n    WordsServiceBase['delete'] = function (wordId) {\n      return $http['delete']('/api/words/' + wordId);\n    };\n\n    return WordsServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name mainApp.factory:UsersService\n   *\n   * @description\n   *\n   */\n  angular.module('mainApp').factory('UsersService', UsersService);\n\n  function UsersService($http) {\n\n    var UsersServiceBase = {};\n\n    UsersServiceBase.update = function (userId, updateObj) {\n      return $http.put('/api/users/' + userId, updateObj);\n    };\n\n    return UsersServiceBase;\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var TopMenuCtrl = function TopMenuCtrl($state) {\n    _classCallCheck(this, TopMenuCtrl);\n\n    var vm = this;\n\n    vm.formData = {};\n\n    function resetForm() {\n      vm.formData = {};\n    }\n\n    vm.submitSearch = function (isValid, searchString) {\n      if (!isValid) {\n        return;\n      }\n\n      resetForm();\n      $state.go('mainApp.list-words', { searchString: searchString });\n    };\n  };\n\n  /**\n   * @ngdoc object\n   * @name mainApp.controller:TopMenuCtrl\n   *\n   * @description\n   *\n   */\n  angular.module('mainApp').controller('TopMenuCtrl', TopMenuCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var TestWordsCtrl = function TestWordsCtrl() {\n    _classCallCheck(this, TestWordsCtrl);\n\n    var vm = this;\n    vm.ctrlName = 'TestWordsCtrl';\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:TestWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('TestWordsCtrl', TestWordsCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var SidebarCtrl = function SidebarCtrl() {\n    _classCallCheck(this, SidebarCtrl);\n\n    var vm = this;\n\n    vm.toggle = false;\n    vm.toggleSidebar = function () {\n      vm.toggle = !vm.toggle;\n    };\n\n    vm.navItems = [{\n      id: 1,\n      title: 'Collections',\n      icon: 'ti-layers-alt',\n      link: 'mainApp.collections'\n    }, {\n      id: 2,\n      title: 'View All Words',\n      icon: 'ti-list',\n      link: 'mainApp.list-words'\n    },\n    // {\n    //   id: 3,\n    //   title: 'Test',\n    //   icon: 'ti-check-box',\n    //   link: 'mainApp.test-words'\n    // },\n    {\n      id: 4,\n      title: 'Import',\n      icon: 'ti-import',\n      link: 'mainApp.import'\n    }, {\n      id: 5,\n      title: 'Settings',\n      icon: 'ti-settings',\n      link: 'mainApp.settings'\n    }, {\n      id: 6,\n      title: 'Log Out',\n      icon: 'ti-arrow-left',\n      link: 'mainApp.logout'\n    }];\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:SidebarCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('SidebarCtrl', SidebarCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var SettingsCtrl = function SettingsCtrl(UsersService, user, $timeout) {\n    _classCallCheck(this, SettingsCtrl);\n\n    var vm = this;\n\n    // config ////////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.formData.maxDailyWords = user.maxDailyWords;\n\n    vm.placeholder = {\n      maxDailyWords: 'i.e. 100 (default: 150)'\n    };\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Change successfully saved!',\n      error: 'Something went wrong. Please try again.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n\n    // helper functions /////////////////////////////////////////////////////////////////\n\n    function changeSettings(userId, maxDailyWords) {\n      var settingsUpdate = { maxDailyWords: maxDailyWords };\n      console.log(settingsUpdate);\n\n      return UsersService.update(userId, settingsUpdate);\n    }\n\n    // main //////////////////////////////////////////////////////////////////////////////\n\n    vm.saveSettings = function (maxDailyWords) {\n      changeSettings(user.id, maxDailyWords).then(function (dbRes) {\n\n        console.log(dbRes);\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.notification.success = true;\n\n        $timeout(function () {\n          vm.btnState.success = false;\n        }, 1500);\n      })['catch'](function () {\n        vm.btnState.loading = false;\n\n        vm.notification.error = true;\n      });\n    };\n  };\n\n  /**\n   * @ngdoc object\n   * @name mainApp.controller:SettingsCtrl\n   *\n   * @description\n   *\n   */\n  angular.module('mainApp').controller('SettingsCtrl', SettingsCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var ReviewWordsCtrl = function ReviewWordsCtrl(WordsService, UsersService, $stateParams, $moment, $timeout, Sm2Service, ConfigService, DictionaryService, TextConvertService, $sce, ngAudio, user) {\n    _classCallCheck(this, ReviewWordsCtrl);\n\n    var vm = this;\n\n    // config ////////////////////////////////////////////////////////////////////////////\n\n    var collectionId = $stateParams.collectionId;\n    vm.wordCounter = 0; // keeps track of which word user is reviewing\n    vm.showWord = true;\n    vm.showAnswer = false;\n    vm.showModal = false;\n    vm.editToggle = false;\n    vm.formData = {};\n    vm.finished = false;\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Change successfully saved!',\n      error: 'Something went wrong. Please try again.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n\n    // init //////////////////////////////////////////////////////////////////////////////\n\n    vm.studyCountToday = user.studyCountToday || 0;\n\n    WordsService.getDue(collectionId).then(function (res) {\n      vm.words = angular.fromJson(res).data;\n      vm.totalWordsCount = vm.words.length;\n\n      vm.currentWord = getNextWord(vm.wordCounter, vm.words);\n\n      // check to see if there are no more words\n      vm.finished = isFinished(vm.currentWord);\n\n      if (vm.finished) {\n        return;\n      }\n\n      // handle pronunciations\n      if (vm.currentWord.pronunciations !== undefined) {\n        vm.pronunciations = vm.currentWord.pronunciations;\n      } else {\n        pronunciationFallback(vm.currentWord);\n      }\n\n      // initialize the edit form inputs\n      vm.formData = initEditWord(vm.currentWord);\n    })['catch'](submitErrorHandler);\n\n    // helper functions /////////////////////////////////////////////////////////////////\n\n    function submitErrorHandler(err) {\n      vm.notification.error = true;\n      console.log('Something went wrong: ', err);\n    }\n\n    function initEditWord(currentWord) {\n      return {\n        word: currentWord.word,\n        definition: currentWord.definition\n      };\n    }\n\n    function getNextWord(wordCounter, words) {\n      var currentWord = words[wordCounter];\n\n      if (currentWord === undefined) {\n        return undefined;\n      }\n\n      currentWord.definition = TextConvertService.fromHtml(currentWord.definition);\n\n      return currentWord;\n    }\n\n    function isFinished(currentWord) {\n      return currentWord === undefined ? true : false;\n    }\n\n    // IMPURE\n    function pronunciationFallback(wordObj) {\n      // fallback if there are no pronunciations in the word obj\n      DictionaryService.updatePronunciationMw(wordObj).then(function (pronunciationPaths) {\n        vm.pronunciations = angular.fromJson(pronunciationPaths).data;\n        console.log('Successfully added pronunciations');\n      })['catch'](function (err) {\n        console.log('Adding pronunciations failed: ', err);\n      });\n    }\n\n    // main //////////////////////////////////////////////////////////////////////////////\n\n    vm.revealWord = function () {\n      vm.showWord = true;\n    };\n\n    vm.hideWord = function () {\n      vm.showWord = false;\n    };\n\n    vm.revealAnswer = function () {\n      vm.showAnswer = true;\n    };\n\n    vm.hideAnswer = function () {\n      vm.showAnswer = false;\n    };\n\n    vm.toggleEdit = function () {\n      vm.editToggle = !vm.editToggle;\n    };\n\n    vm.deleteWord = function (wordId) {\n      WordsService['delete'](wordId).then(function () {\n        vm.notification.success = true;\n        vm.toggleEdit();\n        getNextWord();\n      })['catch'](submitErrorHandler);\n    };\n\n    vm.closeModal = function () {\n      vm.showModal = false;\n    };\n\n    vm.playPronunciation = function (pronunciation) {\n      var pronunciationAudioObj = ngAudio.load(pronunciation);\n      pronunciationAudioObj.play();\n    };\n\n    vm.submitDelete = function (wordId) {\n      vm.deleteId = wordId;\n      vm.showModal = true;\n    };\n\n    vm.submitEdit = function (wordId, wordStr, definition) {\n      var wordUpdate = {\n        word: wordStr,\n        definition: TextConvertService.toHtml(definition)\n      };\n\n      WordsService.update(wordId, wordUpdate).then(function () {\n        vm.currentWord.word = wordStr;\n        vm.currentWord.definition = TextConvertService.fromHtml(definition);\n\n        vm.notification.success = true;\n        vm.toggleEdit();\n      })['catch'](submitErrorHandler);\n    };\n\n    vm.submitRes = function (wordObj, choice) {\n\n      vm.hideWord();\n      vm.hideAnswer();\n\n      var newEaseFactor = Sm2Service.calcEaseFactor(wordObj.easeFactor, choice);\n      var newPhase = Sm2Service.calcPhase(wordObj.phase, wordObj.interval, choice);\n      var newInterval = Sm2Service.calcInterval(wordObj.phase, wordObj.interval, wordObj.easeFactor, choice);\n      var lastReviewed = $moment();\n      var lastReviewedEpochTime = lastReviewed.unix();\n      var newNextReview = Sm2Service.calcNextReview(newInterval);\n      var newNextReviewEpochTime = newNextReview.unix();\n\n      var newReviewRes = angular.copy(wordObj.reviewRes);\n      newReviewRes[choice]++;\n\n      var wordUpdate = {\n        reviewRes: newReviewRes,\n        lastReviewedEpochTime: lastReviewedEpochTime,\n        easeFactor: newEaseFactor,\n        phase: newPhase,\n        interval: newInterval,\n        nextReviewEpochTime: newNextReviewEpochTime\n      };\n\n      WordsService.update(wordObj.id, wordUpdate).then(function () {\n        vm.wordCounter++;\n        vm.currentWord = getNextWord(vm.wordCounter, vm.words);\n\n        // check to see if there are no more words\n        vm.finished = isFinished(vm.currentWord);\n\n        if (vm.finished) {\n          return;\n        }\n\n        // handle pronunciations\n        if (vm.currentWord.pronunciations !== undefined) {\n          vm.pronunciations = vm.currentWord.pronunciations;\n        } else {\n          pronunciationFallback(vm.currentWord);\n        }\n\n        // initialize the edit form inputs\n        vm.formData = initEditWord(vm.currentWord);\n\n        vm.hideAnswer();\n        vm.revealWord();\n      })['catch'](submitErrorHandler);\n\n      // update study count for today\n      vm.studyCountToday++;\n      console.log('vm.studyCountToday: ', vm.studyCountToday);\n\n      UsersService.update(user.id, { studyCountToday: vm.studyCountToday })['catch'](function (err) {\n        console.log('Something went wrong while updating study count for today: ', err);\n      });\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ReviewWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('ReviewWordsCtrl', ReviewWordsCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('mainApp').config(config);\n\n  function config($stateProvider) {\n    $stateProvider.state('mainApp', {\n      abstract: true,\n      url: '/main-app',\n      views: {\n        '': {\n          templateUrl: 'main-app/main-app.tpl.html'\n        },\n        'sidebar@mainApp': {\n          templateUrl: 'main-app/sidebar.tpl.html',\n          controller: 'SidebarCtrl',\n          controllerAs: 'sidebar'\n        },\n        'top-menu@mainApp': {\n          templateUrl: 'main-app/top-menu.tpl.html',\n          controller: 'TopMenuCtrl',\n          controllerAs: 'topMenu'\n        }\n      }\n    }).state('mainApp.collections', {\n      url: '/collections',\n      templateUrl: 'main-app/collections.tpl.html',\n      controller: 'CollectionsCtrl',\n      controllerAs: 'collections',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.add-words', {\n      url: '/collections/:collectionId/add-words',\n      templateUrl: 'main-app/add-words.tpl.html',\n      controller: 'AddWordsCtrl',\n      controllerAs: 'addWords',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.review-words', {\n      url: '/collections/:collectionId/review-words',\n      templateUrl: 'main-app/review-words.tpl.html',\n      controller: 'ReviewWordsCtrl',\n      controllerAs: 'reviewWords',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.list-words', {\n      url: '/list-words',\n      templateUrl: 'main-app/list-words.tpl.html',\n      controller: 'ListWordsCtrl',\n      controllerAs: 'listWords',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      },\n      params: { searchString: null }\n    }).state('mainApp.test-words', {\n      url: '/test-words',\n      templateUrl: 'main-app/test-words.tpl.html',\n      controller: 'TestWordsCtrl',\n      controllerAs: 'testWords',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.logout', {\n      url: '/logout',\n      templateUrl: 'main-app/logout.tpl.html',\n      controller: 'LogoutCtrl',\n      controllerAs: 'logout',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.import', {\n      url: '/import',\n      templateUrl: 'main-app/import.tpl.html',\n      controller: 'ImportCtrl',\n      controllerAs: 'import',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.settings', {\n      url: '/settings',\n      templateUrl: 'main-app/settings.tpl.html',\n      controller: 'SettingsCtrl',\n      controllerAs: 'settings',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    });\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var LogoutCtrl = function LogoutCtrl(AuthService, $window) {\n    _classCallCheck(this, LogoutCtrl);\n\n    var vm = this;\n\n    vm.logout = function () {\n      AuthService.logout().then(function () {\n        console.log('User logged out successfully');\n        $window.location = '/#/home';\n      })['catch'](function (err) {\n        console.log('Something went wrong: ', err);\n      });\n    };\n\n    vm.goBack = function () {\n      $window.history.go(-1);\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:LogoutCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('LogoutCtrl', LogoutCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var ListWordsCtrl = function ListWordsCtrl($stateParams, CollectionsService, WordsService, TextConvertService, ConfigService, DictionaryService, $timeout, user, ngAudio, $q) {\n    _classCallCheck(this, ListWordsCtrl);\n\n    var vm = this;\n\n    // config ////////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.showEdit = {};\n    vm.displayLimit = 200;\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.pronunciationBtnState = {\n      loading: false,\n      success: false\n    };\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Change successfully saved!',\n      deleteSuccess: 'Word deleted succesfully',\n      error: 'Something went wrong. Please try again.',\n      pronunciationError: 'Sorry - pronunciation for this word cannot be found.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n\n    // init //////////////////////////////////////////////////////////////////////////////\n\n    getAllWords(user.id);\n\n    if ($stateParams.searchString !== null) {\n      vm.formData.searchWords = $stateParams.searchString;\n    }\n\n    document.getElementById('searchWords').focus();\n\n    // helper functions //////////////////////////////////////////////////////////////////\n\n    function submitErrorHandler(err) {\n      vm.btnState.loading = false;\n      vm.notification.error = true;\n      console.log('Something went wrong: ', err);\n    }\n\n    function getAllWords(userId) {\n      WordsService.getUserAll(userId).then(function (res) {\n        var words = angular.fromJson(res).data;\n\n        vm.words = words;\n        vm.wordsCount = words.length;\n\n        vm.words.map(function (word) {\n          word.definition = TextConvertService.fromHtml(word.definition);\n          return word;\n        });\n\n        initShowEdit(words);\n      })['catch'](submitErrorHandler);\n    }\n\n    function initShowEdit(words) {\n      words.map(function (word) {\n        vm.showEdit[word.id] = false;\n        return word;\n      });\n    }\n\n    // main //////////////////////////////////////////////////////////////////////////////\n\n    vm.toggleEdit = function (word) {\n      vm.formData.word = word.word;\n      vm.formData.definition = word.definition;\n\n      vm.showEdit[word.id] = !vm.showEdit[word.id];\n    };\n\n    vm.modalYes = function (wordId) {\n      WordsService['delete'](wordId).then(function () {\n        // update the current view to reflect the removal\n        var currentWord = vm.words.filter(function (currentWord) {\n          return currentWord.id === wordId;\n        })[0];\n        var index = vm.words.indexOf(currentWord);\n        vm.words.splice(index, 1);\n\n        vm.notificationSuccessMsg = vm.msg.deleteSuccess;\n        vm.notification.success = true;\n      })['catch'](submitErrorHandler);\n    };\n\n    vm.modalClose = function () {\n      vm.showModal = false;\n      // delete the item on local\n    };\n\n    vm.playPronunciation = function (word) {\n      if (word.pronunciations !== [] && word.pronunciations !== undefined) {\n        var pronunciation = ngAudio.load(word.pronunciations[0]);\n        pronunciation.play();\n      }\n    };\n\n    vm.saveChanges = function (isValid, word, formData) {\n      if (!isValid) {\n        return;\n      }\n\n      WordsService.update(word.id, formData).then(function () {\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.notificationSuccessMsg = vm.msg.success;\n        vm.notification.success = true;\n\n        $timeout(function () {\n          vm.btnState.success = false;\n\n          vm.showEdit[word.id] = !vm.showEdit[word.id];\n\n          // update the current view to reflect the change\n          vm.words.map(function (currentWord) {\n            if (currentWord.id === word.id) {\n              currentWord.word = vm.formData.word;\n              currentWord.definition = TextConvertService.fromHtml(vm.formData.definition);\n            }\n\n            return currentWord;\n          });\n        }, 1500);\n      })['catch'](submitErrorHandler);\n    };\n\n    vm.submitDelete = function (wordId) {\n      vm.showModal = true;\n      vm.selectedWordId = wordId;\n    };\n\n    vm.addAllPronunciations = function (words) {\n      vm.pronunciationBtnState.loading = true;\n\n      var count = 0;\n\n      var promises = words.reduce(function (prev, curr) {\n        count++;\n        return prev.concat(DictionaryService.updatePronunciationMw(curr));\n      }, []);\n\n      $q.all(promises).then(function () {\n        vm.pronunciationBtnState.loading = false;\n        vm.pronunciationBtnState.success = true;\n\n        vm.notificationSuccessMsg = vm.msg.success;\n        vm.notification.success = true;\n\n        $timeout(function () {\n          vm.pronunciationBtnState.success = false;\n        }, 1500);\n\n        getAllWords(user.id);\n      })['catch'](function (err) {\n        console.log('Adding pronunciations failed: ', err);\n      });\n\n      // words.forEach(function (wordObj) {\n      //   if (wordObj.pronunciations === undefined) {\n      //     DictionaryService.updatePronunciationMw(wordObj)\n      //       .then(() => {\n      //         count++;\n      //         console.log('Successfully added pronunciations');\n      //       })\n      //       .catch(err => {\n      //         console.log('Adding pronunciations failed: ', err);\n      //       });\n      //   }\n      // });\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ListWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('ListWordsCtrl', ListWordsCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var ImportCtrl = function ImportCtrl(ImportService, WordsService, ConfigService, SettingsService, user, $timeout, $window) {\n    _classCallCheck(this, ImportCtrl);\n\n    var vm = this;\n\n    // config ///////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.placeholder = {\n      files: 'Click to upload anki text files',\n      collectionTitle: 'Add collection title here'\n    };\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Words successfully imported!',\n      error: 'Something went wrong. Please try again.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n\n    // helper functions /////////////////////////////////////////////////////////////////\n\n    function importTextfile(userId, data) {\n\n      vm.btnState.loading = true;\n\n      ImportService.anki(userId, data).then(function (dbRes) {\n        var dbResData = angular.fromJson(dbRes).data;\n        var collectionId = dbResData.generated_keys[0];\n\n        return WordsService.getAll(collectionId);\n      }).then(function () {\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.notification.success = true;\n\n        $timeout(function () {\n          vm.btnState.success = false;\n          $window.location.href = '/#/main-app/collections';\n        }, 1500);\n      })['catch'](function (err) {\n        vm.btnState.loading = false;\n\n        vm.notification.error = true;\n\n        console.log('Something went wrong with importing', err);\n      });\n    }\n\n    // main /////////////////////////////////////////////////////////////////////////////\n\n    vm.importTextfile = function (isValid, formData) {\n\n      if (!isValid) {\n        return;\n      }\n\n      importTextfile(user.id, formData);\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ImportCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('ImportCtrl', ImportCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name mainApp.factory:CollectionsService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').factory('CollectionsService', CollectionsService);\n\n  function CollectionsService($http) {\n\n    var CollectionsServiceBase = {};\n\n    CollectionsServiceBase.getAll = function (userId) {\n      return $http.get('/api/' + userId + '/collections');\n    };\n\n    CollectionsServiceBase.create = function (collection) {\n      return $http.post('/api/collections', collection);\n    };\n\n    CollectionsServiceBase.get = function (collectionId) {\n      return $http.get('/api/collections/' + collectionId);\n    };\n\n    CollectionsServiceBase.merge = function (collectionId, newCollectionId) {\n      return $http.put('/api/collections/merge/' + collectionId, newCollectionId);\n    };\n\n    CollectionsServiceBase.update = function (collectionId, newCollection) {\n      return $http.put('/api/collections/' + collectionId, newCollection);\n    };\n\n    CollectionsServiceBase['delete'] = function (collectionId) {\n      return $http['delete']('/api/collections/' + collectionId);\n    };\n\n    return CollectionsServiceBase;\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var CollectionsCtrl = function CollectionsCtrl(CollectionsService, WordsService, UsersService, $timeout, user, $q, $moment) {\n    _classCallCheck(this, CollectionsCtrl);\n\n    var vm = this;\n\n    // config ///////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.placeholder = {\n      collectionTitle: 'Enter Collection name here'\n    };\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.user = user;\n    vm.checks = {};\n    vm.showEdit = false;\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Success!',\n      error: 'Something went wrong - please try again.',\n      mergeError: 'Please select two or more collections.',\n      noneSelectedError: 'Please select one or more collections.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n    vm.showModal = false;\n\n    // init /////////////////////////////////////////////////////////////////////////////\n\n    getAllCollections(user);\n\n    resetStudyCountAt4am();\n\n    // helper functions //////////////////////////////////////////////////////////////////\n\n    function resetStudyCountAt4am() {\n      function timeTo4am() {\n        var now = new Date();\n        var endOfDay = $moment().endOf('day').add(4, 'hours');\n        return endOfDay - now + 1000;\n      }\n\n      var attemptCount = 0;\n\n      function resetAt4am() {\n        UsersService.update(user.id, { studyCountToday: 0 }).then(function () {\n          $timeout(resetAt4am, timeTo4am());\n        })['catch'](function (err) {\n          console.log('Something went wrong (attempt ', attemptCount, '): ', err);\n          if (attemptCount <= 5) {\n            // retry 5 times after waiting 2 seconds before each attempt\n            attemptCount++;\n            $timeout(resetAt4am, 2000);\n          }\n        });\n      }\n\n      $timeout(resetAt4am, timeTo4am());\n    }\n\n    function getAllCollections(user) {\n      CollectionsService.getAll(user.id).then(function (res) {\n        vm.collectionList = angular.fromJson(res).data;\n\n        // intiialize checks to all false\n        vm.checks = initChecks(vm.collectionList);\n      })['catch'](function (err) {\n        console.log('Something went wrong: ', err);\n      });\n    }\n\n    function mergeCollections(collectionIds) {\n      var mainCollectionId = collectionIds[0];\n      var remainingCollectionIds = collectionIds.filter(function (collectionId) {\n        return collectionId !== mainCollectionId;\n      });\n\n      var promises = [];\n\n      remainingCollectionIds.forEach(function (collectionId) {\n        promises.push(CollectionsService.merge(collectionId, { newCollectionId: mainCollectionId }));\n      });\n\n      return $q.all(promises);\n    }\n\n    function deleteCollections(collectionIds) {\n      var promises = [];\n\n      collectionIds.forEach(function (collectionId) {\n        promises.push(CollectionsService['delete'](collectionId));\n      });\n\n      return $q.all(promises);\n    }\n\n    function initChecks(collections) {\n      var checks = {};\n\n      collections.forEach(function (collection) {\n        checks[collection.id] = false;\n      });\n\n      return checks;\n    }\n\n    function resetForm() {\n      vm.addCollectionForm.collectionTitle.$touched = false;\n      vm.addCollectionForm.$submitted = false;\n      vm.formData = {};\n    }\n\n    // main /////////////////////////////////////////////////////////////////////////////\n\n    vm.toggleEdit = function () {\n      vm.showEdit = !vm.showEdit;\n    };\n\n    vm.toggleSuccessNotification = function (successMessage) {\n      vm.notification.success = true;\n      vm.notificationSuccessMsg = successMessage;\n    };\n\n    vm.toggleErrorNotification = function (errorMessage) {\n      vm.notification.error = true;\n      vm.notificationErrorMsg = errorMessage;\n    };\n\n    vm.createCollection = function (isValid, collection) {\n      if (!isValid) {\n        return;\n      }\n\n      vm.btnState.loading = true;\n\n      CollectionsService.create(collection).then(function () {\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.toggleSuccessNotification(vm.msg.success);\n\n        getAllCollections(user);\n        resetForm();\n\n        $timeout(function () {\n          vm.btnState.success = false;\n        }, 1500);\n      })['catch'](function (err) {\n        vm.btnState.loading = false;\n        vm.toggleErrorNotification(vm.msg.mergeError);\n\n        console.log('Something went wrong: ', err);\n      });\n    };\n\n    vm.mergeCollections = function (collections, checks) {\n\n      var mergeList = [];\n\n      collections.forEach(function (collection) {\n        if (checks[collection.id] === true) {\n          mergeList.push(collection.id);\n        }\n      });\n\n      if (mergeList.length >= 2) {\n        mergeCollections(mergeList).then(function () {\n          vm.toggleSuccessNotification(vm.msg.success);\n          getAllCollections(user);\n        })['catch'](function (err) {\n          vm.toggleErrorNotification(vm.msg.error);\n          console.log('Something went wrong: ', err);\n        });\n      } else {\n        vm.toggleErrorNotification(vm.msg.mergeError);\n      }\n    };\n\n    vm.deleteCollections = function (collections, checks) {\n\n      var deleteList = [];\n\n      collections.forEach(function (collection) {\n        if (checks[collection.id] === true) {\n          deleteList.push(collection.id);\n        }\n      });\n\n      if (deleteList.length >= 1) {\n        deleteCollections(deleteList).then(function () {\n          vm.toggleSuccessNotification(vm.msg.success);\n          getAllCollections(user);\n        })['catch'](function (err) {\n          vm.toggleErrorNotification(vm.msg.error);\n          console.log('Something went wrong: ', err);\n        });\n      } else {\n        vm.toggleErrorNotification(vm.msg.noneSelectedError);\n      }\n    };\n\n    vm.showConfirmDeleteModal = function (collections, checks) {\n      var deleteList = [];\n\n      collections.forEach(function (collection) {\n        if (checks[collection.id] === true) {\n          deleteList.push(collection.id);\n        }\n      });\n\n      if (deleteList.length >= 1) {\n        vm.showModal = true;\n      } else {\n        vm.toggleErrorNotification(vm.msg.noneSelectedError);\n      }\n    };\n\n    vm.confirmModal = function () {\n      vm.deleteCollections(vm.collectionList, vm.checks);\n    };\n\n    vm.closeModal = function () {\n      vm.showModal = false;\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:CollectionsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('CollectionsCtrl', CollectionsCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var AddWordsCtrl = function AddWordsCtrl(ConfigService, DictionaryService, WordsService, TextConvertService, $stateParams, $timeout, $moment) {\n    _classCallCheck(this, AddWordsCtrl);\n\n    var vm = this;\n\n    // config //////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.placeholder = {\n      word: 'i.e. audacious',\n      definition: 'i.e. Fearlessly, often recklessly daring; bold. See Synonyms at adventurous, brave.'\n    };\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.collectionId = $stateParams.collectionId;\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Word successfully added!',\n      error: 'Something went wrong. Please try again.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n    vm.showModal = false;\n\n    // helper functions //////////////////////////////////////////////////////////////////\n\n    function submitSuccessHandler() {\n      vm.btnState.loading = false;\n      vm.btnState.success = true;\n\n      resetForm();\n      vm.definitions = []; // reset definition list\n\n      vm.notification.success = true;\n      document.getElementById('addWords').focus();\n\n      $timeout(function () {\n        vm.btnState.success = false;\n      }, 1500);\n    }\n\n    function submitErrorHandler(err) {\n      vm.btnState.loading = false;\n      vm.notification.error = true;\n      console.log('Something went wrong: ', err);\n    }\n\n    function composeWordDetails(collectionId, formData) {\n      var lastReviewed = $moment();\n      var lastReviewedEpochTime = lastReviewed.unix();\n      var nextReview = $moment().add(1, 'minutes');\n      var nextReviewEpochTime = nextReview.unix();\n\n      var convertedDefinition = TextConvertService.toHtml(formData.definition);\n\n      var word = {\n        word: formData.word,\n        definition: convertedDefinition,\n        collectionId: collectionId,\n        lastReviewedEpochTime: lastReviewedEpochTime,\n        interval: 1,\n        nextReviewEpochTime: nextReviewEpochTime,\n        phase: 'learning',\n        reviewRes: {\n          again: 0,\n          hard: 0,\n          good: 0,\n          easy: 0\n        },\n        easeFactor: 2.5\n      };\n\n      return word;\n    }\n\n    function addWord(collectionId, formData) {\n      var word = composeWordDetails(collectionId, formData);\n\n      WordsService.create(word).then(submitSuccessHandler)['catch'](submitErrorHandler);\n    }\n\n    function updateWord(collectionId, formData) {\n      var word = composeWordDetails(collectionId, formData);\n\n      WordsService.find(collectionId, formData.word).then(function (res) {\n        var wordId = angular.fromJson(res).data[0].id;\n        return WordsService.update(wordId, word);\n      }).then(submitSuccessHandler)['catch'](submitErrorHandler);\n    }\n\n    function checkDuplicate(collectionId, formData) {\n      WordsService.exists(collectionId, formData.word).then(function (res) {\n        var isDuplicate = angular.fromJson(res).data;\n\n        if (isDuplicate) {\n          vm.showModal = true;\n          vm.btnState.loading = false;\n        } else {\n          addWord(collectionId, formData);\n        }\n      })['catch'](function (err) {\n        console.log('checkDuplicate err: ', err);\n      });\n    }\n\n    function resetForm() {\n      vm.addWordForm.word.$touched = false;\n      vm.addWordForm.definition.$touched = false;\n      vm.addWordForm.$submitted = false;\n      vm.formData = {};\n    }\n\n    // main /////////////////////////////////////////////////////////////////////////////\n\n    vm.modalClose = function () {\n      vm.showModal = false;\n    };\n\n    vm.modalYes = function (collectionId, formData) {\n      updateWord(collectionId, formData);\n    };\n\n    vm.modalNo = function (collectionId, formData) {\n      addWord(collectionId, formData);\n    };\n\n    vm.getDefinition = function (word) {\n      if (word !== undefined) {\n        DictionaryService.getDefinitionFree(ConfigService.mashapeKey, word).then(function (res) {\n          vm.definitions = res.data.definitions;\n        })['catch'](function (err) {\n          console.log('Something went wrong; ', err);\n        });\n      }\n    };\n\n    vm.submit = function (isValid, collectionId, formData) {\n      if (!isValid) {\n        return;\n      }\n\n      vm.btnState.loading = true;\n\n      checkDuplicate(collectionId, formData);\n    };\n\n    vm.copyDefinition = function (definition) {\n      if (vm.formData.definition !== undefined) {\n        vm.formData.definition = vm.formData.definition + '\\n\\n' + definition;\n      } else {\n        vm.formData.definition = definition;\n      }\n    };\n\n    vm.resetForm = function () {\n      resetForm();\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:AddWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('AddWordsCtrl', AddWordsCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name home\n   * @description\n   *\n   */\n  angular.module('home', ['ui.router']);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var NavHomeCtrl = function NavHomeCtrl(AuthService, $window) {\n    _classCallCheck(this, NavHomeCtrl);\n\n    var vm = this;\n\n    // config //////////////////////////////////////////////////////////////////////////\n\n    vm.user = false;\n\n    vm.setActive = function (page) {\n      vm.active = page;\n    };\n\n    // init ////////////////////////////////////////////////////////////////////////////\n\n    AuthService.isLoggedIn().then(function (user) {\n      if (user.data !== false) {\n        vm.user = true;\n        $window.location = '/#/main-app/collections';\n      }\n\n      console.log('Logged in?', vm.user);\n    })['catch'](function (err) {\n      console.log('Something went wrong: ', err);\n    });\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name home.controller:NavHomeCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('home').controller('NavHomeCtrl', NavHomeCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('home').config(config);\n\n  function config($stateProvider) {\n    $stateProvider.state('root', {\n      abstract: true,\n      views: {\n        '': {\n          templateUrl: 'home/root.tpl.html'\n        },\n        'nav-home@root': {\n          templateUrl: 'home/nav-home.tpl.html',\n          controller: 'NavHomeCtrl',\n          controllerAs: 'navHome'\n        }\n      }\n    }).state('root.home', {\n      url: '/home',\n      templateUrl: 'home/home.tpl.html',\n      controller: 'HomeCtrl',\n      controllerAs: 'home'\n    });\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var HomeCtrl = function HomeCtrl() {\n    _classCallCheck(this, HomeCtrl);\n\n    var vm = this;\n    vm.ctrlName = 'HomeCtrl';\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name home.controller:HomeCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('home').controller('HomeCtrl', HomeCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name common\n   * @description\n   *\n   */\n  angular.module('common', []);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name common.factory:TextConvertService\n   *\n   * @description\n   *\n   */\n  angular.module('common').factory('TextConvertService', TextConvertService);\n\n  function TextConvertService() {\n\n    var TextConvertServiceBase = {};\n\n    TextConvertServiceBase.toHtml = function (text) {\n      if (text === undefined) {\n        return;\n      }\n\n      var convertedText = text.replace(/\\n/g, '<br>');\n      return convertedText;\n    };\n\n    TextConvertServiceBase.fromHtml = function (text) {\n      if (text === undefined) {\n        return;\n      }\n\n      var convertedText = text.replace(/<br>/g, '\\n').replace(/<div>/g, '\\n').replace(/<\\/div>/g, '\\n').replace(/&amp;/g, '&').replace(/&nbsp;/g, ' ').replace(/&gt;/g, '>');\n      return convertedText;\n    };\n\n    return TextConvertServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:spinner\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <example module=\"common\">\r\n       <file name=\"index.html\">\r\n        <spinner></spinner>\r\n       </file>\r\n     </example>\r\n   *\r\n   */\n  angular.module('common').directive('spinner', spinner);\n\n  function spinner() {\n    return {\n      restrict: 'EA',\n      scope: {},\n      templateUrl: 'common/spinner-directive.tpl.html',\n      replace: true,\n      link: function link(scope, element, attrs) {\n        /*jshint unused:false */\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\n        scope.width = attrs.width;\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:Sm2Service\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('common').factory('Sm2Service', Sm2Service);\n\n  function Sm2Service($moment) {\n    var Sm2ServiceBase = {};\n\n    /*    \r\n      SM2 (Super Memo 2) Algorithm\r\n        Learning phase: 1min / 10min\r\n      Review phase default: 4 days\r\n      I(n) = I(n-1) * EF\r\n      Minimum EF: 1.3\r\n        Review response:\r\n      Again: reset phase to learning + -20% to EF\r\n      Hard: -15% to EF\r\n      Good: do nothing\r\n      Easy: +15% to EF\r\n    */\n\n    // main //////////////////////////////////////////////////////////////////////////////\n\n    // calcEaseFactor :: Float -> String -> Float\n    Sm2ServiceBase.calcEaseFactor = function (easeFactor, choice) {\n      var oldEaseFactor = easeFactor;\n      var newEaseFactor = undefined;\n      var minEaseFactor = 1.3;\n\n      switch (choice) {\n        case 'again':\n          newEaseFactor = oldEaseFactor - 0.2;\n          newEaseFactor = newEaseFactor < minEaseFactor ? minEaseFactor : newEaseFactor;\n          break;\n        case 'hard':\n          newEaseFactor = oldEaseFactor - 0.15;\n          newEaseFactor = newEaseFactor < minEaseFactor ? minEaseFactor : newEaseFactor;\n          break;\n        case 'good':\n          newEaseFactor = oldEaseFactor;\n          break;\n        case 'easy':\n          newEaseFactor = oldEaseFactor + 0.15;\n          break;\n      }\n\n      return newEaseFactor;\n    };\n\n    // calcPhase :: String -> Integer -> String -> String\n    Sm2ServiceBase.calcPhase = function (phase, interval, choice) {\n      if (choice === 'again') {\n        return 'learning';\n      } else if (choice === 'easy') {\n        return 'review';\n      }\n\n      if (phase === 'learning') {\n        if (interval === 1) {\n          return 'learning';\n        } else if (interval === 10) {\n          return 'review';\n        }\n      }\n\n      if (phase === 'review') {\n        return 'review';\n      }\n    };\n\n    // calcInterval :: String -> Integer -> Float -> String -> Integer\n    // note: interval is in minutes\n    Sm2ServiceBase.calcInterval = function (phase, interval, easeFactor, choice) {\n      if (choice === 'again') {\n        return 1;\n      } else if (choice === 'easy' && phase === 'learning') {\n        return 4 * 24 * 60;\n      }\n\n      if (phase === 'learning') {\n        switch (interval) {\n          case 1:\n            return 10;\n          case 10:\n            return 4 * 24 * 60;\n        }\n      } else if (phase === 'review') {\n        return interval * easeFactor;\n      }\n    };\n\n    Sm2ServiceBase.calcNextReview = function (newInterval) {\n      return $moment().add(newInterval, 'minutes');\n    };\n\n    return Sm2ServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:notification\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <notification show=\"collections.showNotification\" color=\"green\">Some message</notification>\r\n   *\r\n   */\n  angular.module('common').directive('notification', notification);\n\n  function notification($timeout) {\n    return {\n      restrict: 'EA',\n      scope: {\n        show: '=',\n        color: '@'\n      },\n      templateUrl: 'common/notification-directive.tpl.html',\n      transclude: true,\n      replace: false,\n      link: function link(scope, element, attrs) {\n        /*jshint unused:false */\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\n        scope.$watch('show', function () {\n          $timeout(function () {\n            scope.show = false;\n          }, 2500);\n        });\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:modal\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <modal show=\"collections.showModal\" \r\n            modal-bg=\"bg-red\" \r\n            yes-cb=\"collections.confirm()\" \r\n            no-cb=\"collections.no()\" \r\n            yes-message=\"Yes, delete\" \r\n            no-message=\"No, don't save\"\r\n            add-abort-button>\r\n     </modal>\r\n   *\r\n   */\n  angular.module('common').directive('modal', modal);\n\n  function modal() {\n    return {\n      restrict: 'EA',\n      scope: {\n        show: '=',\n        yesCb: '&?',\n        noCb: '&?'\n      },\n      templateUrl: 'common/modal-directive.tpl.html',\n      replace: false,\n      transclude: true,\n      link: function link(scope, element, attrs) {\n        /*jshint unused:false */\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\n        scope.modalBg = attrs.modalBg || '';\n\n        scope.yesMessage = attrs.yesMessage || 'Yes';\n        scope.noMessage = attrs.noMessage || 'No';\n\n        scope.showYesBtn = scope.yesCb !== undefined ? true : false;\n        scope.showNoBtn = scope.noCb !== undefined ? true : false;\n\n        scope.showAbortBtn = attrs.addAbortButton !== undefined ? true : false;\n\n        scope.closeModal = function () {\n          scope.show = false;\n        };\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name common.factory:ImportService\n   *\n   * @description\n   *\n   */\n  angular.module('common').factory('ImportService', ImportService);\n\n  function ImportService($http) {\n    var ImportServiceBase = {};\n\n    // anki :: String -> { collectionTitle, [files] } -> {dbRes}\n    ImportServiceBase.anki = function (userId, data) {\n      return $http.post('/api/import/anki/' + userId, data);\n    };\n\n    return ImportServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:fileread\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <example module=\"common\">\r\n       <file name=\"index.html\">\r\n        <fileread></fileread>\r\n       </file>\r\n     </example>\r\n   *\r\n   */\n  angular.module('common').directive('fileread', fileread);\n\n  function fileread() {\n    return {\n      restrict: 'A',\n      scope: {\n        fileread: '='\n      },\n      replace: false,\n      link: function link(scope, element, attrs) {\n        /*jshint unused:false */\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\n\n        element.bind('change', function (changeEvent) {\n          scope.fileread = [];\n          var files = changeEvent.target.files;\n\n          for (var i = 0, f = undefined; f = files[i]; i++) {\n            var reader = new FileReader();\n\n            reader.onload = (function (file) {\n              return function (loadEvent) {\n                scope.$apply(function () {\n                  scope.fileread.push({ name: file.name, content: loadEvent.target.result });\n                });\n              };\n            })(f);\n\n            reader.readAsText(f);\n          }\n        });\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:DictionaryService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('common').factory('DictionaryService', DictionaryService);\n\n  function DictionaryService($http, $q) {\n\n    var DictionaryServiceBase = {};\n\n    DictionaryServiceBase.getDefinitionFree = function (mashapeKey, word) {\n      return $http.get('https://montanaflynn-dictionary.p.mashape.com/define?word=' + word, {\n        headers: { 'X-Mashape-Key': mashapeKey }\n      });\n    };\n\n    // getPronunciation :: String -> Promise([a])\n    DictionaryServiceBase.getPronunciationMw = function (word) {\n      return $http.get('/api/pronunciations/' + word);\n    };\n\n    // getPronunciation :: String -> String -> Promise([a])\n    DictionaryServiceBase.updatePronunciationMw = function (wordObj) {\n      return $http.put('/api/pronunciations/' + wordObj.id, wordObj);\n    };\n\n    // getPronunciation :: string -> string -> Promise([a])\n    DictionaryServiceBase.getPronunciationForvo = function (forvoKey, word) {\n\n      var deferred = $q.defer();\n\n      $http.jsonp('http://apifree.forvo.com/action/word-pronunciations/format/json/word/' + word + '/language/en/order/rate-desc/limit/1/key/' + forvoKey + '?callback=JSON_CALLBACK').then(function (res) {\n        var pronunciationData = angular.fromJson(res).data;\n        var pronunciationPaths = undefined;\n\n        if (pronunciationData.attributes.total !== 0) {\n          pronunciationPaths = pronunciationPaths.push(pronunciationData.items[0].pathmp3);\n        } else {\n          pronunciationPaths = null;\n        }\n\n        deferred.resolve(pronunciationPaths);\n      })['catch'](function (err) {\n        deferred.reject(err);\n        console.log('Something went wrong: ', err);\n      });\n\n      return deferred.promise;\n    };\n\n    return DictionaryServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:ConfigService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('common').factory('ConfigService', ConfigService);\n\n  function ConfigService() {\n\n    var ConfigServiceBase = {};\n\n    ConfigServiceBase.mashapeKey = 'S4DvXSr43Cmsh5Kww0kOuX9QxNbXp1hjhkYjsn84TFraf8SlG3';\n    ConfigServiceBase.forvoKey = 'f850390038cd293954cb5bdf7dc36d8a';\n    ConfigServiceBase.mwKey = 'e1f9d411-f40e-40b0-bdae-7c1903daf229';\n\n    return ConfigServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name auth\n   * @description\n   *\n   */\n  angular.module('auth', ['ui.router']);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var RegisterCtrl = function RegisterCtrl() {\n    _classCallCheck(this, RegisterCtrl);\n\n    var vm = this;\n    vm.ctrlName = 'RegisterCtrl';\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name auth.controller:RegisterCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('auth').controller('RegisterCtrl', RegisterCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var LoginCtrl = function LoginCtrl() {\n    _classCallCheck(this, LoginCtrl);\n\n    var vm = this;\n    vm.ctrlName = 'LoginCtrl';\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name auth.controller:LoginCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('auth').controller('LoginCtrl', LoginCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name auth.factory:AuthService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('auth').factory('AuthService', AuthService);\n\n  function AuthService(ConfigService, $http, $q, $window) {\n\n    var AuthServiceBase = {};\n\n    // only check login status\n    // used in nav\n    AuthServiceBase.isLoggedIn = function () {\n      return $http.get('/auth/loggedin');\n    };\n\n    // check login status and redirect if not logged in\n    // used for route resolve for protected paths\n    AuthServiceBase.checkLoggedIn = function () {\n\n      var deferred = $q.defer();\n\n      $http.get('/auth/loggedin').then(function (user) {\n        var user = user.data;\n        if (user !== false) {\n          deferred.resolve(user.new_val);\n        } else {\n          deferred.reject();\n          $window.location = '/#/login';\n        }\n      })['catch'](function (err) {\n        deferred.reject();\n        $window.location = '/#/';\n        console.log('Something went wrong: ', err);\n      });\n\n      return deferred.promise;\n    };\n\n    AuthServiceBase.logout = function () {\n      return $http.get('/auth/logout');\n    };\n\n    return AuthServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('auth').config(config);\n\n  function config($stateProvider) {\n    $stateProvider.state('root.auth', {\n      abstract: true,\n      views: {\n        '': {\n          templateUrl: 'auth/auth.tpl.html'\n        }\n      }\n    }).state('root.auth.login', {\n      url: '/login',\n      templateUrl: 'auth/login.tpl.html',\n      controller: 'LoginCtrl',\n      controllerAs: 'login'\n    }).state('root.auth.register', {\n      url: '/register',\n      templateUrl: 'auth/register.tpl.html',\n      controller: 'RegisterCtrl',\n      controllerAs: 'register'\n    }).state('root.auth.logout', {\n      url: '/logout',\n      templateUrl: 'auth/logout.tpl.html',\n      controller: 'LogoutCtrl',\n      controllerAs: 'logout'\n    });\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('bigvocab').config(config);\n\n  function config($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/home');\n  }\n})();","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name bigvocab\n   * @description\n   *\n   */\n  angular\n    .module('bigvocab', [\n      'ngAria',\n      'ngAnimate',\n      'ngMessages',\n      'ui.router',\n      '720kb.tooltips',\n      'ngAudio',\n      'angular-momentjs',\n      'cb.x2js',\n      'home',\n      'auth',\n      'mainApp',\n      // 'ramda',\n      'common'\n    ]);\n\n  // ramda module\n  // angular.module('ramda', []);\n  // angular.module('ramda').factory('R', function ($window) {\n  //   return $window.R;\n  // });\n\n}());\n","<div class=\"p2\">\n\t<form name=\"topMenu.topMenuForm\" ng-submit=\"topMenu.submitSearch(topMenu.topMenuForm.$valid, topMenu.formData.searchString)\">\n\t\t<input type=\"text\" name=\"search\" ng-model=\"topMenu.formData.searchString\" class=\"field field-search col-8 sm-col-6 md-col-4 lg-col-3 col-right\">\n\t\t\n\t\t<!-- hidden button -->\n\t\t<button type=\"submit\" style=\"visibility: hidden\"></button>\n\t\t<!-- end: hidden button -->\n\t</form>\n</div>","<div class=\"container\">\r\n\t<div class=\"clearfix center\">\r\n\r\n\t\t<h1 class=\"mt1 mb3\">Test Time!</h1>\r\n\r\n\t\t<div class=\"mb2 bold\"><span class=\"gray\">Today's Quota:</span> 78 <span class=\"gray\">/ 123 words left</span></div>\r\n\r\n\t\t<div class=\"md-col-4 sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"h2 px2 py4 bg-white rounded\">Hello</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"md-col-4 sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"clearfix mxn1\">\r\n\t\t\t\t<div class=\"col col-6 px1\">\r\n\t\t\t\t\t<a class=\"btn mt2 bg-red block white\">Not sure<span class=\"ti-close ml1\"></span></a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col col-6 px1\">\r\n\t\t\t\t\t<a class=\"btn mt2 bg-green block white\">Easy<span class=\"ti-check ml1\"></span></a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>","<!--/////////// DESKTOP ONLY ///////////-->\r\n<div class=\"sm-show\" style=\"margin-right: 63px;\">\r\n\r\n\t<div class=\"bg-navy fixed white z1\" style=\"height: 100vh;\">\r\n\t\t<div class=\"flex flex-column flex-center py3\">\r\n\t\t\t\r\n\t\t\t<a ui-sref=\"mainApp.collections\"><img class=\"mb2\" src=\"../images/logo/bigvocab-logo-color.svg\" width=\"56px\"></a>\r\n\t\t\t<a ui-sref=\"{{ navItem.link }}\" tooltips title=\"{{ navItem.title }}\" tooltip-placement=\"right\" class=\"btn btn-icon h2 center p2\" ng-repeat=\"navItem in sidebar.navItems | orderBy:'id'\" tabindex=\"-1\">\r\n\t\t\t\t<span class=\"{{ navItem.icon }}\"></span>\r\n\t\t\t</a>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>\r\n<!--/////////// end: DESKTOP ONLY ///////////-->\r\n\r\n<!--/////////// MOBILE ONLY ///////////-->\r\n<div class=\"sm-hide\">\r\n\r\n\t<!-- toggle button background -->\r\n\t<div class=\"fixed z2\" style=\"background-color: rgba(255,255,255,0.93); width: 58px; height:58px;\"></div>\r\n\t<!-- toggle button background -->\r\n\r\n\t<!-- toggle button -->\r\n\t<div class=\"fixed z3\">\r\n\t\t<a ng-click=\"sidebar.toggleSidebar()\" class=\"btn btn-icon p2 h3\" ng-class=\"{'black': sidebar.toggle === false, 'white': sidebar.toggle === true}\"><span class=\"ti-menu\"></span></a>\r\n\t</div>\r\n\t<!-- end: toggle button -->\r\n\r\n\t<!-- menu items -->\r\n\t<div class=\"bg-navy fixed white z2 translateX-n-100 transition-all-300\" ng-class=\"{'translateX-n-100': sidebar.toggle === false, 'translateX-0': sidebar.toggle === true }\" style=\"height: 100vh;\">\r\n\t\t<div class=\"flex flex-column py2 mt4\">\r\n\t\t\t\r\n\t\t\t<div style=\"margin-left:20px\"><img class=\"mb2\" src=\"../images/logo/bigvocab-logo-color.svg\" width=\"56px\"></div>\r\n\t\t\t<a ui-sref=\"{{ navItem.link }}\" ng-click=\"sidebar.toggleSidebar();\" class=\"btn btn-icon py2 px3 flex flex-center\" ng-repeat=\"navItem in sidebar.navItems | orderBy:'id'\" tabindex=\"-1\">\r\n\t\t\t\t<div class=\"{{ navItem.icon }} h3 mr2\"></div>\r\n\t\t\t\t<div class=\"h5\">{{ navItem.title }}</div>\r\n\t\t\t</a>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\t<!-- end: menu items -->\r\n\r\n</div>\r\n<!--/////////// end: MOBILE ONLY ///////////-->\r\n","<div class=\"container\">\n\t<div class=\"clearfix\">\n\n\t\t<div class=\"sm-col-8 md-col-4 mx-auto center px2\">\n\t\n\t\t\t<h1 class=\"mt1 mb2\">Settings</h1>\n\n\t\t\t<form name=\"settings.settingsForm\" \n\t\t\t\t\t\tng-submit=\"settings.saveSettings(settings.formData.maxDailyWords)\"\n\t\t\t\t\t\tnovalidate>\n\n\t\t\t\t<div class=\"mb1 bold\">Max # of study words per day</div>\n\t\t\t\t<input name=\"maxDailyWords\" type=\"number\" ng-model=\"settings.formData.maxDailyWords\" class=\"field col-12\" placeholder=\"{{ settings.placeholder.maxDailyWords }}\" autofocus>\n\n\t\t\t\t<button type=\"submit\"\n\t\t\t\t\t\t\t\tclass=\"btn btn-primary col-12 mt2\"\n\t\t\t\t\t\t\t\tng-disabled=\"settings.btnState.success || settings.btnState.loading\">\n\t\t\t\t\t\t<span ng-if=\"!settings.btnState.loading && !settings.btnState.success\">Save Changes</span>\n\t\t\t\t\t\t<span ng-if=\"settings.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\n\t\t\t\t\t\t<span ng-if=\"settings.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\n\t\t\t\t</button>\n\n\t\t\t</form>\n\n\t\t</div>\n\n\t</div>\n</div>\n\n<!-- notification -->\n<notification color=\"green\" show=\"settings.notification.success\"><span class=\"ti-check mr1\"></span>{{ settings.notificationSuccessMsg }}</notification>\n<notification color=\"red\" show=\"settings.notification.error\"><span class=\"ti-alert mr1\"></span>{{ settings.notificationErrorMsg }}</notification>\n<!-- end: notification -->\n\n","<div class=\"container\">\r\n\t<div class=\"clearfix center\">\r\n\r\n\t\t<h1 class=\"mt1 mb3\">Study Time!</h1>\r\n\r\n\t\t<div class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"flex flex-justify\">\r\n\t\t\t\t<div class=\"mb2 bold\">\r\n\t\t\t\t\t<span class=\"gray\">Today's Quota:</span> {{ reviewWords.totalWordsCount - reviewWords.wordCounter }} <span class=\"gray\">/ {{ reviewWords.totalWordsCount }} words left</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<a ng-click=\"reviewWords.toggleEdit()\" ng-if=\"!reviewWords.finished\" class=\"h5 gray underline\">Edit</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- edit word -->\r\n\t\t<div class=\"sm-col-6 mx-auto px2 bg-lighten-3 rounded py2 mb2 ng-animation-fadeInDown\" ng-if=\"reviewWords.editToggle && !reviewWords.finished\">\r\n\t\t\t<form>\r\n\r\n\t\t\t\t<div class=\"col-12 flex mb1\">\r\n\t\t\t\t\t<input type=\"text\" name=\"editWord\" ng-model=\"reviewWords.formData.word\" class=\"field flex-auto mr1\" required>\r\n\t\t\t\t\t<button class=\"btn btn-form btn-red-outline\" ng-click=\"reviewWords.submitDelete(reviewWords.currentWord.id)\"><span class=\"ti-trash\"></span></button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<textarea name=\"editDefinition\" ng-model=\"reviewWords.formData.definition\" class=\"field col-12\" style=\"height: 80px;\"></textarea>\r\n\r\n\t\t\t\t<button ng-click=\"reviewWords.submitEdit(reviewWords.currentWord.id, reviewWords.formData.word, reviewWords.formData.definition)\" class=\"btn btn-green btn-form col-12 mt1\">Save Changes</button>\r\n\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t<!-- end: edit word -->\r\n\r\n\t\t<div class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"p3 bg-white rounded flex flex-column flex-center-justified\" style=\"min-height: 184px\">\r\n\r\n\t\t\t\t<!-- word -->\r\n\t\t\t\t<div ng-if=\"reviewWords.showWord\" class=\"h2 mb1\">{{ reviewWords.currentWord.word }}</div>\r\n\t\t\t\t<!-- end: word -->\r\n\r\n\t\t\t\t<div ng-if=\"reviewWords.showAnswer\">\r\n\t\t\t\t\t<!-- definition -->\r\n\t\t\t\t\t<div class=\"h4 dark-gray\" style=\"white-space: pre-wrap;\">{{ reviewWords.currentWord.definition }}</div>\r\n\t\t\t\t\t<!-- end: definition -->\r\n\r\n\t\t\t\t\t<!-- pronunciation -->\r\n\t\t\t\t\t<div ng-if=\"reviewWords.pronunciations !== [] && !reviewWords.finished\" \r\n\t\t\t\t\t\t\t class=\"mt2 mx-auto\">\r\n\t\t\t\t\t\t<button ng-repeat=\"pronunciation in reviewWords.pronunciations\" \r\n\t\t\t\t\t\t\t\t\t\tng-click=\"reviewWords.playPronunciation(pronunciation)\" \r\n\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-blue-outline btn-sm ml1 mr1\" style=\"width: 48px; height: 48px; border-radius: 50%;\">\r\n\t\t\t\t\t\t\t<span class=\"ti-control-play\" style=\"margin-left:4px\"></span>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- end: pronunciation -->\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- finish message -->\r\n\t\t\t\t<div class=\"h2 mb1\" ng-if=\"reviewWords.finished\">All done for the day!</div>\r\n\t\t\t\t<!-- finish message -->\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- show answer button -->\r\n\t\t<div ng-if=\"!reviewWords.showAnswer && !reviewWords.finished\" class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t<button ng-click=\"reviewWords.revealAnswer()\" \r\n\t\t\t\t\t\t\tclass=\"btn btn-primary mt2 col-12\">Show Answer</button>\r\n\t\t</div>\r\n\t\t<!-- end: show answer button -->\r\n\r\n\t\t<!-- review response buttons -->\r\n\t\t<div ng-if=\"reviewWords.showAnswer && !reviewWords.finished\" class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"clearfix mxn1\">\r\n\t\t\t\t<div class=\"col col-3 px1 red\">\r\n\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, 'again')\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-red mt2 col-12\">Again</button>\r\n\t\t\t\t\t<div class=\"h6 gray center mt1\">Can't recall</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col col-3 px1 green\">\r\n\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, 'hard')\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-yellow-green mt2 col-12\">Hard</button>\r\n\t\t\t\t\t<div class=\"h6 gray center mt1\">Challenging</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col col-3 px1 green\">\r\n\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, 'good')\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-green mt2 col-12\">Good</button>\r\n\t\t\t\t\t<div class=\"h6 gray center mt1\">Just right</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col col-3 px1 green\">\r\n\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, 'easy')\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-green mt2 col-12\">Easy</button>\r\n\t\t\t\t\t<div class=\"h6 gray center mt1\">Too easy</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<!-- end: review response buttons -->\r\n\r\n\t</div>\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"reviewWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ reviewWords.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"reviewWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ reviewWords.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n\r\n<!-- modal -->\r\n<modal show=\"reviewWords.showModal\" \r\n\t      modal-bg=\"bg-white\" \r\n\t      yes-cb=\"reviewWords.deleteWord(reviewWords.deleteId)\" \r\n\t      no-cb=\"reviewWords.closeModal()\"\r\n\t      yes-message=\"Yes, delete it\"\r\n\t      no-message=\"No, cancel\">\r\n\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\r\n</modal>\r\n<!-- end: modal -->","<div class=\"flex\">\n\t<div ui-view=\"sidebar\"></div>\n\t<div class=\"flex-auto flex flex-column bg-darken-1\">\n\t\t<div ui-view=\"top-menu\"></div>\n\t\t<div ui-view class=\"py3\" style=\"min-height: 100vh\"></div>\n\t</div>\n</div>\n","<div class=\"container\">\r\n\t<div class=\"clearfix\">\r\n\r\n\t\t<div class=\"sm-col-10 md-col-6 mx-auto center px2\">\r\n\t\r\n\t\t\t<h1 class=\"mt1 mb2\">Log Out</h1>\r\n\r\n\t\t\t<div class=\"mb3 h4\">Are you sure you want to sign out from Big Vocab?</div>\r\n\r\n\t\t\t<button class=\"btn btn-blue-outline\" ng-click=\"logout.logout()\">Yes, log me out</button>&nbsp;&nbsp;\r\n\t\t\t<button class=\"btn btn-primary\" ng-click=\"logout.goBack()\">No, send me back</button>\r\n\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>","<div class=\"container\">\r\n\t<div class=\"clearfix\">\r\n\r\n\t\t<h1 class=\"mt1 mb2 center\">List of All Words</h1>\r\n\r\n\t\t<!-- search words form -->\r\n\t\t<div class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t\r\n\t\t\t<form name=\"listWords.listWordsForm\" class=\"center\">\r\n\t\t\t\t<span class=\"center bold gray\">Total word count: {{ listWords.wordsCount }}</span>\r\n\t\t\t\t<input name=\"searchWords\" id=\"searchWords\" type=\"text\" ng-model=\"listWords.formData.searchWords\" class=\"field col-12 mt1 mb3\" placeholder=\"Search any word or definition\">\r\n\t\t\t</form>\r\n\r\n\t\t</div>\r\n\t\t<!-- end: search words form -->\r\n\r\n\t\t<!-- update all words with pronunciations -->\r\n\t\t<div class=\"clearfix\">\r\n\t\t\t<div class=\"sm-col-10 mx-auto\">\r\n\t\t\t\t<button class=\"btn btn-sm btn-primary mb1 h6 right\" \r\n\t\t\t\t\t\t\t\tng-click=\"listWords.addAllPronunciations(listWords.words)\"\r\n\t\t\t\t\t\t\t\tng-disabled=\"listWords.pronunciationBtnState.success || listWords.pronunciationBtnState.loading\">\r\n\t\t\t\t\t<span ng-if=\"!listWords.pronunciationBtnState.loading && !listWords.pronunciationBtnState.success\">Update All Pronunciations</span>\r\n\t\t\t\t\t<span ng-if=\"listWords.pronunciationBtnState.loading\"><spinner width=\"12px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t<span ng-if=\"listWords.pronunciationBtnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<!-- end: update all words with pronunciations -->\r\n\r\n\t\t<!-- list of words -->\r\n\t\t<div class=\"clearfix sm-col-10 mx-auto bg-lighten-2 rounded mb4\">\r\n\t\t\t\r\n\t\t\t<div ng-repeat=\"word in listWords.words | filter: listWords.formData.searchWords | orderBy: 'word' | limitTo: listWords.displayLimit\" class=\"clearfix col col-12 p2\" ng-class=\"{ 'border-bottom': !$last }\" track by word.id>\r\n\t\t\t\t<form name=\"listWords.listWordsForm\" ng-submit=\"listWords.saveChanges(listWords.listWordsForm.$valid, word, listWords.formData)\">\r\n\r\n\t\t\t\t\t<!-- word -->\r\n\t\t\t\t\t<div class=\"sm-col sm-col-3 flex flex-center\">\r\n\r\n\t\t\t\t\t\t<!-- pronunciation -->\r\n\t\t\t\t\t\t<a ng-click=\"listWords.playPronunciation(word)\" \r\n\t\t\t\t\t\t\t ng-if=\"!listWords.showEdit[word.id] && word.pronunciations !== [] && word.pronunciations !== undefined\"  \r\n\t\t\t\t\t\t\t class=\"btn btn-blue-outline mr2 center\" style=\"padding: 0.3em 0.24em; border-radius: 50%; width: 22px;\">\r\n\t\t\t\t\t\t\t<span class=\"ti-control-play\" style=\"margin-left:4px\"></span>\r\n\t\t\t\t\t\t</a>\r\n\r\n\t\t\t\t\t\t<div ng-if=\"!listWords.showEdit[word.id] && (word.pronunciations === [] || word.pronunciations === undefined)\" \r\n\t\t\t\t\t\t\t\t class=\"inline mr2\" style=\"width: 32px\">&nbsp;</div>\r\n\t\t\t\t\t\t<!-- end: pronunciation -->\r\n\r\n\t\t\t\t\t\t<a ng-click=\"listWords.toggleEdit(word)\" class=\"link bold\" ng-if=\"!listWords.showEdit[word.id]\">{{ word.word }}</a>\r\n\r\n\t\t\t\t\t\t<!-- edit form -->\r\n\t\t\t\t\t\t<a ng-if=\"listWords.showEdit[word.id]\" class=\"ti-close mr1\" ng-click=\"listWords.toggleEdit(word)\"></a>\r\n\t\t\t\t\t\t<input name=\"word\" \r\n\t\t\t\t\t\t\t\t\t type=\"text\" \r\n\t\t\t\t\t\t\t\t\t ng-model=\"listWords.formData.word\" \r\n\t\t\t\t\t\t\t\t\t ng-if=\"listWords.showEdit[word.id]\" \r\n\t\t\t\t\t\t\t\t\t class=\"field flex-auto mr1\" \r\n\t\t\t\t\t\t\t\t\t placeholder=\"{{ listWords.placeholder.word }}\" \r\n\t\t\t\t\t\t\t\t\t autofocus required>\r\n\t\t\t\t\t\t<!-- end: edit form -->\r\n\t\r\n\t\t\t\t\t\t<!-- error handling -->\r\n\t\t\t\t\t\t<div ng-messages=\"listWords.listWordsForm.word.$error\" \r\n\t\t\t\t\t\t\t\t ng-if=\"listWords.listWordsForm.$submitted && listWords.listWordsForm.word.$touched\" \r\n\t\t\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- end: error handling -->\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- word -->\r\n\r\n\t\t\t\t\t<!-- definition -->\r\n\t\t\t\t\t<div class=\"sm-col sm-col-9 dark-gray flex flex-start flex-wrap\">\r\n\r\n\t\t\t\t\t\t<div class=\"flex flex-center flex-justify col-12\">\r\n\t\t\t\t\t\t\t<span ng-if=\"!listWords.showEdit[word.id]\" class=\"flex-auto\" style=\"white-space: pre-wrap;\">{{ word.definition }}</span>\r\n\t\t\t\t\t\t\t<!-- delete button -->\r\n\t\t\t\t\t\t\t<a ng-click=\"listWords.submitDelete(word.id)\"\r\n\t\t\t\t\t\t\t\t ng-disabled=\"listWords.btnState.success || listWords.btnState.loading\"\r\n\t\t\t\t\t\t\t\t ng-if=\"!listWords.showEdit[word.id]\" \r\n\t\t\t\t\t\t\t\t class=\"ti-trash red inline-block ml2\">\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t<!-- end: delete button -->\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<!-- edit form -->\r\n\t\t\t\t\t\t<textarea name=\"definition\" \r\n\t\t\t\t\t\t\t\t\t\t\tng-model=\"listWords.formData.definition\" \r\n\t\t\t\t\t\t\t\t\t\t\tng-if=\"listWords.showEdit[word.id]\" \r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"field flex-auto\" \r\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"height: 96px;\" \r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"{{ listWords.placeholder.definition }}\">\r\n\t\t\t\t\t\t</textarea>\r\n\t\t\t\t\t\t<div class=\"sm-col-4 flex flex-wrap\">\r\n\t\t\t\t\t\t\t<!-- save button -->\r\n\t\t\t\t\t\t\t<button type=\"submit\" \r\n\t\t\t\t\t\t\t\t\t\t\tng-if=\"listWords.showEdit[word.id]\" \r\n\t\t\t\t\t\t\t\t\t\t\tng-disabled=\"listWords.btnState.success || listWords.btnState.loading\"\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-form btn-primary col-12 ml1\">\r\n\t\t\t\t\t\t\t\t<span ng-if=\"!listWords.btnState.loading && !listWords.btnState.success\">Save Changes</span>\r\n\t\t\t\t\t\t\t\t<span ng-if=\"listWords.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t\t\t\t<span ng-if=\"listWords.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<!-- end: save button -->\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- end: edit form -->\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- end: definition -->\r\n\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t<!-- end: list of words -->\r\n\r\n\t</div>\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"listWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ listWords.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"listWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ listWords.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n\r\n<!-- modal -->\r\n<modal show=\"listWords.showModal\" \r\n\t      modal-bg=\"bg-white\" \r\n\t      yes-cb=\"listWords.modalYes(listWords.selectedWordId)\" \r\n\t      no-cb=\"listWords.modalClose()\"\r\n\t      yes-message=\"Yes, delete\"\r\n\t      no-message=\"No, cancel\">\r\n\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\r\n</modal>\r\n<!-- end: modal -->","<div class=\"container\">\r\n\t<div class=\"clearfix\">\r\n\r\n\t\t<div class=\"sm-col-10 md-col-6 mx-auto center px2\">\r\n\t\r\n\t\t\t<h1 class=\"mt1 mb2\">Import from Anki</h1>\r\n\r\n\t\t\t<div class=\"mb3\">If you upload multiple files, it will merge them and input it into a single collection. If you want each text file to have its own collection, upload one file at a time.</div>\r\n\r\n\t\t\t<form name=\"import.importForm\" \r\n\t\t\t\t\t\tng-submit=\"import.importTextfile(import.importForm.$valid, import.formData)\"\r\n\t\t\t\t\t\tnovalidate>\r\n\r\n\t\t\t\t<div class=\"mb1 bold\">Title of the collection to be imported</div>\r\n\t\t\t\t<input name=\"collectionTitle\" type=\"text\" ng-model=\"import.formData.collectionTitle\" class=\"field col-12\" placeholder=\"{{ import.placeholder.collectionTitle }}\" autofocus required>\r\n\r\n\t\t\t\t<!-- error handling -->\r\n\t\t\t\t<div ng-messages=\"import.importForm.collectionTitle.$error\" \r\n\t\t\t\t\t\t ng-if=\"import.importForm.$submitted && import.importForm.collectionTitle.$touched\" \r\n\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: error handling -->\r\n\r\n\t\t\t\t<div class=\"mt3 mb1 bold\">Anki text file (i.e. anki-collection-2015.txt)</div>\r\n\t\t\t\t<div class=\"file-input\">\r\n\t\t\t\t\tClick here to upload your files<span class=\"ti-folder ml1\">\r\n\t\t\t\t\t<input name=\"files\" type=\"file\" multiple=\"multiple\" accept=\".txt\" fileread=\"import.formData.files\" class=\"field col-12\" style=\"cursor: pointer; margin-bottom: none\" placeholder=\"{{ import.placeholder.files }}\" required>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- file names -->\r\n\t\t\t\t<div class=\"mt1\">\r\n\t\t\t\t\t<div ng-repeat=\"file in import.formData.files\" track by $index>{{ file.name }}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: file names -->\r\n\r\n\t\t\t\t<!-- error handling -->\r\n\t\t\t\t<div ng-messages=\"import.importForm.files.$error\" \r\n\t\t\t\t\t\t ng-if=\"import.importForm.$submitted\" \r\n\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: error handling -->\r\n\r\n\t\t\t\t<!-- submit button -->\r\n\t\t\t\t<button type=\"submit\" class=\"btn btn-primary mt3 mb2\" ng-disabled=\"import.btnState.success || import.btnState.loading\">\r\n\t\t\t\t\t<span ng-if=\"!import.btnState.loading && !import.btnState.success\">Import Anki Text File<span class=\"ti-import ml1\"></span></span>\r\n\t\t\t\t\t<span ng-if=\"import.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t<span ng-if=\"import.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t</button>\r\n\t\t\t\t<!-- end: submit button -->\r\n\r\n\t\t\t</form>\r\n\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"import.notification.success\"><span class=\"ti-check mr1\"></span>{{ import.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"import.notification.error\"><span class=\"ti-alert mr1\"></span>{{ import.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n","<div class=\"clearfix\">\r\n\r\n\t<h1 class=\"mt1 center\">My Collections&nbsp;&nbsp;<a ng-click=\"collections.toggleEdit()\" ng-if=\"collections.collectionList.length >= 1\" class=\"h5 gray underline\">Edit</a></h1>\r\n\r\n\t<!-- edit collection options -->\r\n\t<div class=\"md-col-10 lg-col-8 mx-auto px2\" ng-if=\"collections.showEdit\">\r\n\t\t<button class=\"btn btn-sm btn-yellow-green h6 mb2\" ng-click=\"collections.mergeCollections(collections.collectionList, collections.checks)\">Merge Selected</button>\r\n\t\t<button class=\"btn btn-sm btn-red h6 ml1 mb2\" ng-click=\"collections.showConfirmDeleteModal(collections.collectionList, collections.checks)\">Delete Selected</button>\r\n\t</div>\r\n\t<!-- end: edit collection options -->\r\n\r\n\t<div class=\"md-col-10 lg-col-8 mx-auto px2\">\r\n\r\n\t\t<!-- collection list -->\r\n\t\t<div class=\"clearfix bg-white rounded p1 mb2 ng-animation-fadeInUp\" ng-repeat=\"collection in collections.collectionList | orderBy: 'id'\">\r\n\r\n\t\t\t<div class=\"sm-col sm-col-7\">\r\n\t\t\t\t\r\n\t\t\t\t<!-- select collection -->\r\n\t\t\t\t<input type=\"checkbox\" style=\"margin-left: 8px; margin-right: -16px;\" ng-model=\"collections.checks[collection.id]\" ng-if=\"collections.showEdit\">\r\n\t\t\t\t<!-- end: select collection -->\r\n\r\n\t\t\t\t<div class=\"btn btn-md bold ml1 mt1 mb1\" style=\"cursor: text\">{{ collection.title }} <span class=\"gray\">(due: {{ collection.dueWordCount }}, new: {{ collection.newWordCount }} )</span></div>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class=\"sm-col sm-col-5 flex flex-wrap\">\r\n\t\t\t\t<a ui-sref=\"mainApp.review-words({ collectionId: collection.id })\" class=\"btn btn-md btn-primary flex-auto center m1 h5\">Study<span class=\"ti-arrow-right ml1\"></span></a>\r\n\t\t\t\t<a ui-sref=\"mainApp.add-words({ collectionId: collection.id })\" class=\"btn btn-md btn-blue-outline center dark-gray m1 h5\"><span class=\"ti-plus\"></span></a>\r\n\t\t\t\t<a ui-sref=\"mainApp.list-words\" class=\"btn btn-md btn-blue-outline center dark-gray m1 h5\"><span class=\"ti-list\"></span></a>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t<!-- end: collection list -->\r\n\r\n\t\t<!-- add collection -->\r\n\t\t<div class=\"clearfix bg-light-green px2 py2 mt3 rounded\">\r\n\r\n\t\t\t<div class=\"center\">\r\n\t\t\t\t<div class=\"caps bold m1\">Add Collection</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<form name=\"collections.addCollectionForm\" \r\n\t\t\t\t\t\tng-submit=\"collections.createCollection(collections.addCollectionForm.$valid, { \r\n\t\t\t\t\t\t\tuserId: collections.user.id,\r\n\t\t\t\t\t\t\ttitle: collections.formData.collectionTitle \r\n\t\t\t\t\t\t})\"\r\n\t\t\t\t\t\tnovalidate>\r\n\r\n\t\t\t\t<div class=\"sm-col sm-col-8 p1\">\r\n\t\t\t\t\t<input name=\"collectionTitle\" type=\"text\" ng-model=\"collections.formData.collectionTitle\" class=\"field col-12\" placeholder=\"{{ collections.placeholder.collectionTitle }}\" required>\r\n\r\n\t\t\t\t\t<!-- error handling -->\r\n\t\t\t\t\t<div ng-messages=\"collections.addCollectionForm.collectionTitle.$error\" \r\n\t\t\t\t\t\t\t ng-if=\"collections.addCollectionForm.$submitted && collections.addCollectionForm.collectionTitle.$touched\" \r\n\t\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- end: error handling -->\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- submit button -->\r\n\t\t\t\t<div class=\"sm-col sm-col-4 p1\">\r\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-form btn-green col-12\" ng-disabled=\"collections.btnState.success || collections.btnState.loading\">\r\n\t\t\t\t\t\t<span ng-if=\"!collections.btnState.loading && !collections.btnState.success\">Add Collection</span>\r\n\t\t\t\t\t\t<span ng-if=\"collections.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t\t<span ng-if=\"collections.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: submit button -->\r\n\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t<!-- end: add collection -->\r\n\r\n\t</div>\r\n\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"collections.notification.success\"><span class=\"ti-check mr1\"></span>{{ collections.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"collections.notification.error\"><span class=\"ti-alert mr1\"></span>{{ collections.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n\r\n<!-- modal -->\r\n<modal show=\"collections.showModal\" \r\n\t      modal-bg=\"bg-white\" \r\n\t      yes-cb=\"collections.confirmModal()\" \r\n\t      no-cb=\"collections.closeModal()\" \r\n\t      yes-message=\"Yes, delete\" \r\n\t      no-message=\"No, abort\">\r\n\t<div class=\"center h3\">Are you sure you want to delete the selected collection(s)?</div>\r\n</modal>\r\n<!-- end: modal -->","<div class=\"container\">\r\n\t<div class=\"clearfix\">\r\n\r\n\t\t<h1 class=\"mt1 mb3 center\">Add New Words</h1>\r\n\r\n\t\t<!-- add words form -->\r\n\t\t<div class=\"md-col md-col-6 px2\">\r\n\r\n\t\t\t<form name=\"addWords.addWordForm\" \r\n\t\t\t\t\t\tng-submit=\"addWords.submit(addWords.addWordForm.$valid, addWords.collectionId, addWords.formData)\"\r\n\t\t\t\t\t\tnovalidate>\r\n\r\n\t\t\t\t<div class=\"mb1 bold\">WORD</div>\r\n\t\t\t\t<input id=\"addWords\" name=\"word\" type=\"text\" ng-model=\"addWords.formData.word\" ng-blur=\"addWords.getDefinition(addWords.formData.word)\" class=\"field col-12\" placeholder=\"{{ addWords.placeholder.word }}\" autofocus required>\r\n\r\n\t\t\t\t<!-- error handling -->\r\n\t\t\t\t<div ng-messages=\"addWords.addWordForm.word.$error\" \r\n\t\t\t\t\t\t ng-if=\"addWords.addWordForm.$submitted && addWords.addWordForm.word.$touched\" \r\n\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: error handling -->\r\n\r\n\t\t\t\t<div class=\"mb1 mt2 bold\">MEANING</div>\r\n\t\t\t\t<textarea name=\"definition\" ng-model=\"addWords.formData.definition\" class=\"field col-12\" style=\"height: 160px;\" placeholder=\"{{ addWords.placeholder.definition }}\"></textarea>\r\n\r\n\t\t\t\t<div class=\"flex flex-justify\">\r\n\t\t\t\t\t<button ng-click=\"addWords.resetForm()\" class=\"btn btn-outline mt2 mb2\">Reset Form</button>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<!-- submit button -->\r\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary mt2 mb2\" ng-disabled=\"addWords.btnState.success || addWords.btnState.loading\">\r\n\t\t\t\t\t\t<span ng-if=\"!addWords.btnState.loading && !addWords.btnState.success\"><span class=\"ti-plus mr1\"></span>Add Word</span>\r\n\t\t\t\t\t\t<span ng-if=\"addWords.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t\t<span ng-if=\"addWords.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<!-- end: submit button -->\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</form>\r\n\r\n\t\t</div>\r\n\t\t<!-- end: add words form -->\r\n\r\n\t\t<!-- definitions from dictionary API -->\r\n\t\t<div class=\"md-col md-col-6 px2\">\r\n\r\n\t\t\t<div class=\"bold gray mb2\">Word definitions from <span class=\"italic\">The American Heritage® Dictionary of the English Language, 4th Edition</span></div>\r\n\r\n\t\t\t<div class=\"bg-light-green rounded p2 mb2 near-black ng-animation-fadeInUp\" ng-repeat=\"definition in addWords.definitions\">\r\n\t\t\t\t<div class=\"flex flex-center\">\r\n\t\t\t\t\t<div class=\"flex-none\" style=\"width: 52px\">\r\n\t\t\t\t\t\t<a ng-click=\"addWords.copyDefinition(definition.text)\" class=\"btn btn-sm btn-green-outline\" tabindex=\"-1\"><span class=\"ti-plus\"></span></a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"h5\">{{ definition.text }}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t<!-- definitions from dictionary API -->\r\n\r\n\t</div>\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"addWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ addWords.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"addWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ addWords.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n\r\n<!-- modal -->\r\n<modal show=\"addWords.showModal\" \r\n\t      modal-bg=\"bg-white\" \r\n\t      yes-cb=\"addWords.modalYes(addWords.collectionId, addWords.formData)\" \r\n\t      no-cb=\"addWords.modalNo(addWords.collectionId, addWords.formData)\"\r\n\t      yes-message=\"Yes, overwrite\"\r\n\t      no-message=\"No, add new\"\r\n\t      add-abort-button>\r\n\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\r\n</modal>\r\n<!-- end: modal -->","<div ui-view=\"nav-home\"></div>\r\n<div ui-view></div>","<div class=\"fixed white border-bottom border-lighten-2\" style=\"width: 100%\">\r\n\t<div class=\"container\">\r\n\t\t<div class=\"flex flex-center\">\r\n\t\t\t<a class=\"btn btn-sm\" ui-sref=\"root.home\">\r\n\t\t\t\t<img src=\"../images/logo/bigvocab-logo-white.svg\" width=\"50px\" />\r\n\t\t\t</a>\r\n\r\n\t\t\t<div class=\"flex-auto\"></div>\r\n\r\n\t\t\t<div>\r\n\r\n\t\t\t\t<!-- nav items -->\r\n\t\t\t\t<a ui-sref=\"root.home\" ng-click=\"navHome.setActive('home')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{'bold muted-0': navHome.active === 'home'}\">Home</a>\r\n\t\t\t\t<a ui-sref=\"root.features\" ng-click=\"navHome.setActive('features')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{'bold muted-0': navHome.active === 'features'}\">How it works</a>\r\n\t\t\t\t<!--<a ui-sref=\"root.about\" ng-click=\"navHome.setActive('about')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{'bold muted-0': navHome.active === 'about'}\">About</a>-->\r\n\t\t\t\t<!-- end: nav items -->\r\n\r\n\t\t\t\t<!-- login button -->\r\n\t\t\t\t<a href=\"/auth/google\" ng-if=\"!navHome.user\" class=\"btn btn-outline btn-sm ml2 mr2 py2 h6\">Login&nbsp;&rarr;</a>\r\n\t\t\t\t<!-- end: login button -->\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>","<div class=\"bg-cover bg-gradient-home\">\r\n\r\n\t<div class=\"flex flex-center\" style=\"min-height: 100vh;\">\r\n\t\t<div class=\"container flex-auto\">\r\n\t\t\t<div class=\"clearfix\">\r\n\r\n\t\t\t\t<div class=\"sm-col-6 p2 mx-auto white center\">\r\n\t\t\t\t\t<div class=\"h1 light\">Big Vocab</div>\r\n\t\t\t\t\t<p>Big Vocab uses a method called Spaced Repetition to improve word recall. Think of it as a virtual flash card that's optimized to help you remember more words.</p>\r\n\t\t\t\t\t<a ui-sref=\"root.auth.register\" class=\"btn btn-red\">Sign Up</a>&nbsp;&nbsp;\r\n\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-outline\">Login</a>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>","<img src=\"../images/spinner/oval-sm.svg\" class=\"mr1\" width=\"{{ width }}\">","<div ng-if=\"show\" class=\"rounded bg-{{color}} px3 py2 fixed white h5 ng-animation-fadeInUp\" style=\"top: 24px; right: 24px; max-width: 240px;\">\n\t<div ng-transclude></div>\n</div>","<!-- overlay -->\n<div ng-if=\"show\" class=\"fixed z2 top-0 right-0 bottom-0 left-0 bg-darken-3\" ng-click=\"closeModal()\">\n</div>\n<!-- end: overlay -->\n\n<div ng-if=\"show\" class=\"fixed z3 top-0 right-0 bottom-0 left-0 ng-animation-fadeInUp\">\n\t<div class=\"flex flex-center flex-center-justified px2\" style=\"width: 100%; height: 100vh;\">\n\t\t<div class=\"sm-col-8 md-col-7 lg-col-5 relative {{ modalBg }}\">\n\t\t\t\n\t\t\t<!-- close button -->\n\t\t\t<div>\n\t\t\t\t<a class=\"ti-close absolute right-0 h3 p3\" ng-click=\"closeModal()\"></a>\n\t\t\t</div>\n\t\t\t<!-- end: close button -->\n\n\t\t\t<!-- content -->\n\t\t\t<div class=\"px4 py3 mt1\">\n\t\t\t\t<div ng-transclude></div>\n\t\t\t\t<!-- end: content -->\n\n\t\t\t\t<!-- buttons -->\n\t\t\t\t<div class=\"center mt1 mb1\">\n\t\t\t\t\t<button class=\"btn btn-primary mt2\" ng-click=\"yesCb(); closeModal()\" ng-if=\"showYesBtn\">{{ yesMessage }}</button>&nbsp;&nbsp;\n\t\t\t\t\t<button class=\"btn btn-primary mt2\" ng-click=\"noCb(); closeModal()\" ng-if=\"showNoBtn\">{{ noMessage }}</button>&nbsp;&nbsp;\n\t\t\t\t\t<button class=\"btn btn-red mt2\" ng-click=\"closeModal()\" ng-if=\"showAbortBtn\">Cancel</button>\n\t\t\t\t</div>\n\t\t\t\t<!-- end: buttons -->\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n</div>","<div class=\"bg-cover bg-gradient-navy\">\r\n\r\n\t<div class=\"flex flex-center\" style=\"min-height: 100vh\">\r\n\t\t<div class=\"container-sm flex-auto\">\r\n\t\t\t<div class=\"clearfix white\">\r\n\r\n\t\t\t\t<div class=\"sm-col sm-col-8 px2 mb3\">\r\n\t\t\t\t\t<div class=\"h2 light mb2\">Sign Up</div>\r\n\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-primary\">Sign up with Your Google Account</a>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"sm-col sm-col-4 px2\">\r\n\t\t\t\t\t<div class=\"border border-lighten-3 p2\">\r\n\t\t\t\t\t\t<p>Already have an account?</p>\r\n\t\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-outline block\">Login with Google</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>","<div class=\"bg-cover bg-gradient-navy\">\r\n\r\n\t<div class=\"flex flex-center\" style=\"min-height: 100vh;\">\r\n\t\t<div class=\"container flex-auto\">\r\n\t\t\t<div class=\"clearfix\">\r\n\r\n\t\t\t\t<div class=\"sm-col-6 p2 mx-auto white center\">\r\n\t\t\t\t\t<div class=\"h1 light mb2\">Login to Big Vocab</div>\r\n\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-red\">Login with Google</a>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>","<div ui-view=\"root.nav-home\"></div>\r\n<div ui-view></div>","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name mainApp\n   * @description\n   *\n   */\n  angular\n    .module('mainApp', [\n      'ui.router'\n    ]);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name mainApp.factory:WordsService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .factory('WordsService', WordsService);\r\n\r\n  function WordsService($http) {\r\n\r\n    let WordsServiceBase = {};\r\n\r\n    // every word for this user\r\n    WordsServiceBase.getUserAll = userId => {\r\n      return $http.get('/api/words/all/' + userId);\r\n    };\r\n\r\n    // all words for this collection\r\n    WordsServiceBase.getAll = collectionId => {\r\n      return $http.get('/api/' + collectionId + '/words');\r\n    };\r\n\r\n    // get only the words to be reviewed today\r\n    WordsServiceBase.getDue = collectionId => {\r\n      return $http.get('/api/'+ collectionId + '/words/?filter=dueToday');\r\n    };\r\n\r\n    WordsServiceBase.create = word => {\r\n      return $http.post('/api/words', word);\r\n    };\r\n\r\n    WordsServiceBase.get = wordId => {\r\n      return $http.get('/api/words/' + wordId);\r\n    };\r\n\r\n    // find :: String -> String -> Promise({word})\r\n    WordsServiceBase.find = (collectionId, wordStr) => {\r\n      return $http.get('/api/' + collectionId + '/words/' + wordStr);\r\n    };\r\n\r\n    // find :: String -> String -> Promise({word})\r\n    WordsServiceBase.exists = (collectionId, word) => {\r\n      return $http.get('/api/' + collectionId + '/words/' + word + '/?exists');\r\n    };\r\n\r\n    WordsServiceBase.update = (wordId, wordUpdate) => {\r\n      return $http.put('/api/words/' + wordId, wordUpdate);\r\n    };\r\n\r\n    WordsServiceBase.delete = wordId => {\r\n      return $http.delete('/api/words/' + wordId);\r\n    };\r\n\r\n    return WordsServiceBase;\r\n  }\r\n}());\r\n","(() => {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name mainApp.factory:UsersService\n   *\n   * @description\n   *\n   */\n  angular\n    .module('mainApp')\n    .factory('UsersService', UsersService);\n\n  function UsersService($http) {\n\n    let UsersServiceBase = {};\n\n    UsersServiceBase.update = (userId, updateObj) => {\n    \treturn $http.put('/api/users/' + userId, updateObj);\n    };\n\n    return UsersServiceBase;\n  }\n}());\n","(() => {\n  'use strict';\n\n  class TopMenuCtrl {\n    constructor($state) {\n\n      let vm = this;\n      \n      vm.formData = {};\n\n      function resetForm () {\n        vm.formData = {};\n      }\n\n      vm.submitSearch = (isValid, searchString) => {\n        if (!isValid) { return; }\n\n        resetForm();\n        $state.go('mainApp.list-words', { searchString: searchString });\n      };\n\n    }\n  }\n\n  /**\n   * @ngdoc object\n   * @name mainApp.controller:TopMenuCtrl\n   *\n   * @description\n   *\n   */\n  angular\n    .module('mainApp')\n    .controller('TopMenuCtrl', TopMenuCtrl);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class TestWordsCtrl {\r\n    constructor() {\r\n      let vm = this;\r\n      vm.ctrlName = 'TestWordsCtrl';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:TestWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('TestWordsCtrl', TestWordsCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class SidebarCtrl {\r\n    constructor() {\r\n\r\n      let vm = this;\r\n\r\n      vm.toggle = false;\r\n      vm.toggleSidebar = () => {\r\n        vm.toggle = !vm.toggle;\r\n      };\r\n\r\n      vm.navItems = [\r\n        {\r\n          id: 1,\r\n          title: 'Collections',\r\n          icon: 'ti-layers-alt',\r\n          link: 'mainApp.collections'\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'View All Words',\r\n          icon: 'ti-list',\r\n          link: 'mainApp.list-words'\r\n        },\r\n        // {\r\n        //   id: 3,\r\n        //   title: 'Test',\r\n        //   icon: 'ti-check-box',\r\n        //   link: 'mainApp.test-words'\r\n        // },\r\n        {\r\n          id: 4,\r\n          title: 'Import',\r\n          icon: 'ti-import',\r\n          link: 'mainApp.import'\r\n        },\r\n        {\r\n          id: 5,\r\n          title: 'Settings',\r\n          icon: 'ti-settings',\r\n          link: 'mainApp.settings'\r\n        },        \r\n        {\r\n          id: 6,\r\n          title: 'Log Out',\r\n          icon: 'ti-arrow-left',\r\n          link: 'mainApp.logout'\r\n        }\r\n      ];\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:SidebarCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('SidebarCtrl', SidebarCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  class SettingsCtrl {\n    constructor(UsersService, user, $timeout) {\n\n      let vm = this;\n\n      // config ////////////////////////////////////////////////////////////////////////////\n\n      vm.formData = {};\n      vm.formData.maxDailyWords = user.maxDailyWords;\n\n      vm.placeholder = {\n        maxDailyWords: 'i.e. 100 (default: 150)'\n      };\n      vm.btnState = {\n        loading: false,\n        success: false\n      };\n      vm.notification = {\n        success: false,\n        error: false\n      };\n      vm.msg = {\n        success: 'Change successfully saved!',\n        error: 'Something went wrong. Please try again.'\n      };\n      vm.notificationSuccessMsg = vm.msg.success;\n      vm.notificationErrorMsg = vm.msg.error;\n\n      // helper functions /////////////////////////////////////////////////////////////////\n\n      function changeSettings (userId, maxDailyWords) {\n      \tlet settingsUpdate = { maxDailyWords: maxDailyWords };\n      \tconsole.log(settingsUpdate);\n\n      \treturn UsersService.update(userId, settingsUpdate);\n      }\n\n      // main //////////////////////////////////////////////////////////////////////////////\n\n      vm.saveSettings = maxDailyWords => {\n      \tchangeSettings(user.id, maxDailyWords)\n      \t\t.then(dbRes => {\n\n      \t\t\tconsole.log(dbRes);\n            vm.btnState.loading = false;\n            vm.btnState.success = true;\n\n            vm.notification.success = true;\n\n            $timeout(() => {\n              vm.btnState.success = false;\n            }, 1500);\n          })\n          .catch(() => {\n            vm.btnState.loading = false;\n\n            vm.notification.error = true;\n          });\n      };\n\n    }\n  }\n\n  /**\n   * @ngdoc object\n   * @name mainApp.controller:SettingsCtrl\n   *\n   * @description\n   *\n   */\n  angular\n    .module('mainApp')\n    .controller('SettingsCtrl', SettingsCtrl);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class ReviewWordsCtrl {\r\n    constructor(WordsService, UsersService, $stateParams, $moment, $timeout, Sm2Service, ConfigService, DictionaryService, TextConvertService, $sce, ngAudio, user) {\r\n\r\n      let vm = this;\r\n\r\n      // config ////////////////////////////////////////////////////////////////////////////\r\n\r\n      let collectionId = $stateParams.collectionId;\r\n      vm.wordCounter = 0; // keeps track of which word user is reviewing\r\n      vm.showWord = true;\r\n      vm.showAnswer = false;\r\n      vm.showModal = false;\r\n      vm.editToggle = false;\r\n      vm.formData = {};\r\n      vm.finished = false;\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Change successfully saved!',\r\n        error: 'Something went wrong. Please try again.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n\r\n      // init //////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.studyCountToday = user.studyCountToday || 0;\r\n\r\n      WordsService.getDue(collectionId)\r\n        .then(res => {\r\n          vm.words = angular.fromJson(res).data;\r\n          vm.totalWordsCount = vm.words.length;\r\n\r\n          vm.currentWord = getNextWord(vm.wordCounter, vm.words);\r\n\r\n          // check to see if there are no more words\r\n          vm.finished = isFinished(vm.currentWord);\r\n          \r\n          if (vm.finished) { return; }\r\n          \r\n          // handle pronunciations\r\n          if (vm.currentWord.pronunciations !== undefined) {\r\n            vm.pronunciations = vm.currentWord.pronunciations;\r\n          } else {\r\n            pronunciationFallback(vm.currentWord);\r\n          }\r\n\r\n          // initialize the edit form inputs\r\n          vm.formData = initEditWord(vm.currentWord);\r\n        })\r\n        .catch(submitErrorHandler);\r\n\r\n      // helper functions /////////////////////////////////////////////////////////////////\r\n      \r\n      function submitErrorHandler (err) {\r\n        vm.notification.error = true;\r\n        console.log('Something went wrong: ', err);\r\n      }\r\n\r\n      function initEditWord (currentWord) {\r\n        return {\r\n          word: currentWord.word,\r\n          definition: currentWord.definition\r\n        };\r\n      }\r\n\r\n      function getNextWord (wordCounter, words) {\r\n        let currentWord = words[wordCounter];\r\n\r\n        if (currentWord === undefined) { return undefined; }\r\n\r\n        currentWord.definition = TextConvertService.fromHtml(currentWord.definition);\r\n\r\n        return currentWord;\r\n      }\r\n\r\n      function isFinished (currentWord) {\r\n        return currentWord === undefined ? true : false;\r\n      }\r\n\r\n      // IMPURE\r\n      function pronunciationFallback (wordObj) {\r\n        // fallback if there are no pronunciations in the word obj\r\n        DictionaryService.updatePronunciationMw(wordObj)\r\n          .then(pronunciationPaths => {\r\n            vm.pronunciations = angular.fromJson(pronunciationPaths).data;\r\n            console.log('Successfully added pronunciations');\r\n          })\r\n          .catch(err => {\r\n            console.log('Adding pronunciations failed: ', err);\r\n          });\r\n      }\r\n\r\n      // main //////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.revealWord = () => {\r\n        vm.showWord = true;\r\n      };\r\n\r\n      vm.hideWord = () => {\r\n        vm.showWord = false;\r\n      };\r\n\r\n      vm.revealAnswer = () => {\r\n        vm.showAnswer = true;\r\n      };\r\n\r\n      vm.hideAnswer = () => {\r\n        vm.showAnswer = false;\r\n      };\r\n\r\n      vm.toggleEdit = () => {\r\n        vm.editToggle = !vm.editToggle;\r\n      };\r\n\r\n      vm.deleteWord = wordId => {\r\n        WordsService.delete(wordId)\r\n          .then(() => {\r\n            vm.notification.success = true;\r\n            vm.toggleEdit();\r\n            getNextWord();\r\n          })\r\n          .catch(submitErrorHandler);\r\n      };\r\n\r\n      vm.closeModal = () => {\r\n        vm.showModal = false;\r\n      };\r\n\r\n      vm.playPronunciation = pronunciation => {\r\n        let pronunciationAudioObj = ngAudio.load(pronunciation);\r\n        pronunciationAudioObj.play();\r\n      };\r\n\r\n      vm.submitDelete = wordId => {\r\n        vm.deleteId = wordId;\r\n        vm.showModal = true;\r\n      };\r\n\r\n      vm.submitEdit = (wordId, wordStr, definition) => {\r\n        let wordUpdate = {\r\n          word: wordStr,\r\n          definition: TextConvertService.toHtml(definition)\r\n        };\r\n\r\n        WordsService.update(wordId, wordUpdate)\r\n          .then(() => {\r\n            vm.currentWord.word = wordStr;\r\n            vm.currentWord.definition = TextConvertService.fromHtml(definition);\r\n            \r\n            vm.notification.success = true;\r\n            vm.toggleEdit();\r\n          })\r\n          .catch(submitErrorHandler);\r\n      };\r\n\r\n      vm.submitRes = (wordObj, choice) => {\r\n\r\n        vm.hideWord();\r\n        vm.hideAnswer();\r\n\r\n        let newEaseFactor = Sm2Service.calcEaseFactor(wordObj.easeFactor, choice);\r\n        let newPhase = Sm2Service.calcPhase(wordObj.phase, wordObj.interval, choice);\r\n        let newInterval = Sm2Service.calcInterval(wordObj.phase, wordObj.interval, wordObj.easeFactor, choice);\r\n        let lastReviewed = $moment();\r\n        let lastReviewedEpochTime = lastReviewed.unix();\r\n        let newNextReview = Sm2Service.calcNextReview(newInterval);\r\n        let newNextReviewEpochTime = newNextReview.unix();\r\n\r\n        let newReviewRes = angular.copy(wordObj.reviewRes);\r\n        newReviewRes[choice]++;\r\n\r\n        let wordUpdate = {\r\n          reviewRes: newReviewRes,\r\n          lastReviewedEpochTime: lastReviewedEpochTime,\r\n          easeFactor: newEaseFactor,\r\n          phase: newPhase,\r\n          interval: newInterval,\r\n          nextReviewEpochTime: newNextReviewEpochTime\r\n        };\r\n\r\n        WordsService.update(wordObj.id, wordUpdate)\r\n          .then(() => {\r\n            vm.wordCounter++;\r\n            vm.currentWord = getNextWord(vm.wordCounter, vm.words);\r\n\r\n            // check to see if there are no more words\r\n            vm.finished = isFinished(vm.currentWord);\r\n            \r\n            if (vm.finished) { return; }\r\n\r\n            // handle pronunciations\r\n            if (vm.currentWord.pronunciations !== undefined) {\r\n              vm.pronunciations = vm.currentWord.pronunciations;\r\n            } else {\r\n              pronunciationFallback(vm.currentWord);\r\n            }\r\n\r\n            // initialize the edit form inputs\r\n            vm.formData = initEditWord(vm.currentWord);\r\n\r\n            vm.hideAnswer();\r\n            vm.revealWord();\r\n          })\r\n          .catch(submitErrorHandler);\r\n\r\n        // update study count for today\r\n        vm.studyCountToday++;\r\n        console.log('vm.studyCountToday: ', vm.studyCountToday);\r\n\r\n        UsersService.update(user.id, { studyCountToday: vm.studyCountToday })\r\n          .catch(err => {\r\n            console.log('Something went wrong while updating study count for today: ', err);\r\n          });\r\n      \r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ReviewWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('ReviewWordsCtrl', ReviewWordsCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  angular\n    .module('mainApp')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('mainApp', {\n        abstract: true,\n        url: '/main-app',\n        views: {\n          '': {\n            templateUrl: 'main-app/main-app.tpl.html',\n          },\n          'sidebar@mainApp': {\n            templateUrl: 'main-app/sidebar.tpl.html',\n            controller: 'SidebarCtrl',\n            controllerAs: 'sidebar'\n          },\n          'top-menu@mainApp': {\n            templateUrl: 'main-app/top-menu.tpl.html',\n            controller: 'TopMenuCtrl',\n            controllerAs: 'topMenu'\n          }\n        }\n      })\n      .state('mainApp.collections', {\n        url: '/collections',\n        templateUrl: 'main-app/collections.tpl.html',\n        controller: 'CollectionsCtrl',\n        controllerAs: 'collections',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.add-words', {\n        url: '/collections/:collectionId/add-words',\n        templateUrl: 'main-app/add-words.tpl.html',\n        controller: 'AddWordsCtrl',\n        controllerAs: 'addWords',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.review-words', {\n        url: '/collections/:collectionId/review-words',\n        templateUrl: 'main-app/review-words.tpl.html',\n        controller: 'ReviewWordsCtrl',\n        controllerAs: 'reviewWords',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.list-words', {\n        url: '/list-words',\n        templateUrl: 'main-app/list-words.tpl.html',\n        controller: 'ListWordsCtrl',\n        controllerAs: 'listWords',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        },\n        params: { searchString: null }\n      })\n      .state('mainApp.test-words', {\n        url: '/test-words',\n        templateUrl: 'main-app/test-words.tpl.html',\n        controller: 'TestWordsCtrl',\n        controllerAs: 'testWords',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.logout', {\n        url: '/logout',\n        templateUrl: 'main-app/logout.tpl.html',\n        controller: 'LogoutCtrl',\n        controllerAs: 'logout',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.import', {\n        url: '/import',\n        templateUrl: 'main-app/import.tpl.html',\n        controller: 'ImportCtrl',\n        controllerAs: 'import',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.settings', {\n        url: '/settings',\n        templateUrl: 'main-app/settings.tpl.html',\n        controller: 'SettingsCtrl',\n        controllerAs: 'settings',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      });\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class LogoutCtrl {\r\n    constructor(AuthService, $window) {\r\n\r\n      let vm = this;\r\n      \r\n      vm.logout = () => {\r\n        AuthService.logout()\r\n          .then(() => {\r\n            console.log('User logged out successfully');\r\n            $window.location = '/#/home';\r\n          })\r\n          .catch(err => {\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n      };\r\n\r\n      vm.goBack = () => {\r\n        $window.history.go(-1);\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:LogoutCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('LogoutCtrl', LogoutCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class ListWordsCtrl {\r\n    constructor($stateParams, CollectionsService, WordsService, TextConvertService, ConfigService, DictionaryService, $timeout, user, ngAudio, $q) {\r\n\r\n      let vm = this;\r\n\r\n\t\t\t// config ////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.formData = {};\r\n      vm.showEdit = {};\r\n      vm.displayLimit = 200;\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.pronunciationBtnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Change successfully saved!',\r\n        deleteSuccess: 'Word deleted succesfully',\r\n        error: 'Something went wrong. Please try again.',\r\n        pronunciationError: 'Sorry - pronunciation for this word cannot be found.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n\r\n\t\t\t// init //////////////////////////////////////////////////////////////////////////////\r\n\r\n\t\t\tgetAllWords(user.id);\r\n\r\n      if ($stateParams.searchString !== null) { \r\n        vm.formData.searchWords = $stateParams.searchString; \r\n      }\r\n\r\n      document.getElementById('searchWords').focus();\r\n\r\n      // helper functions //////////////////////////////////////////////////////////////////\r\n\r\n      function submitErrorHandler (err) {\r\n        vm.btnState.loading = false;\r\n        vm.notification.error = true;\r\n        console.log('Something went wrong: ', err);\r\n      }\r\n\r\n      function getAllWords (userId) {\r\n\t      WordsService.getUserAll(userId)\r\n\t      \t.then(res => {\r\n\t      \t\tvar words = angular.fromJson(res).data;\r\n\r\n\t      \t\tvm.words = words;\r\n\t      \t\tvm.wordsCount = words.length;\r\n\r\n            vm.words.map(word => {\r\n              word.definition = TextConvertService.fromHtml(word.definition);\r\n              return word;\r\n            });\r\n\r\n\t      \t\tinitShowEdit(words);\r\n\t      \t})\r\n\t      \t.catch(submitErrorHandler);\r\n      }\r\n\r\n      function initShowEdit (words) {\r\n      \twords.map(word => {\r\n      \t\tvm.showEdit[word.id] = false;\r\n      \t\treturn word;\r\n      \t});\r\n      }\r\n\r\n      // main //////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.toggleEdit = word => {\r\n    \t\tvm.formData.word = word.word;\r\n\t  \t\tvm.formData.definition = word.definition;\r\n\r\n      \tvm.showEdit[word.id] = !vm.showEdit[word.id];\r\n      };\r\n\r\n      vm.modalYes = wordId => {\r\n        WordsService.delete(wordId)\r\n          .then(() => {\r\n            // update the current view to reflect the removal\r\n            var currentWord = vm.words.filter(currentWord => {\r\n              return currentWord.id === wordId;\r\n            })[0];\r\n            var index = vm.words.indexOf(currentWord);\r\n            vm.words.splice(index, 1);\r\n\r\n            vm.notificationSuccessMsg = vm.msg.deleteSuccess;\r\n            vm.notification.success = true;\r\n          })\r\n          .catch(submitErrorHandler);\r\n      };\r\n\r\n      vm.modalClose = () => {\r\n        vm.showModal = false;\r\n        // delete the item on local\r\n      };\r\n\r\n      vm.playPronunciation = word => {\r\n        if (word.pronunciations !== [] && word.pronunciations !== undefined) {\r\n          let pronunciation = ngAudio.load(word.pronunciations[0]);\r\n          pronunciation.play();\r\n        }\r\n      };\r\n\r\n      vm.saveChanges = (isValid, word, formData) => {\r\n      \tif (!isValid) { return; }\r\n\r\n      \tWordsService.update(word.id, formData)\r\n      \t\t.then(() => {\r\n            vm.btnState.loading = false;\r\n            vm.btnState.success = true;\r\n\r\n            vm.notificationSuccessMsg = vm.msg.success;\r\n            vm.notification.success = true;\r\n\r\n            $timeout(() => {\r\n              vm.btnState.success = false;\r\n\t\r\n\t            vm.showEdit[word.id] = !vm.showEdit[word.id];\r\n\r\n\t            // update the current view to reflect the change\r\n\t            vm.words.map(currentWord => {\r\n\t            \tif (currentWord.id === word.id) {\r\n\t            \t\tcurrentWord.word = vm.formData.word;\r\n\t            \t\tcurrentWord.definition = TextConvertService.fromHtml(vm.formData.definition);\r\n\t            \t}\r\n\r\n\t            \treturn currentWord;\r\n\t            }); \r\n            }, 1500);\r\n      \t\t})\r\n      \t\t.catch(submitErrorHandler);\r\n      };\r\n\r\n      vm.submitDelete = wordId => {\r\n        vm.showModal = true;\r\n        vm.selectedWordId = wordId;\r\n      };\r\n\r\n      vm.addAllPronunciations = words => {\r\n        vm.pronunciationBtnState.loading = true;\r\n\r\n        let count = 0;\r\n\r\n        let promises = words.reduce((prev, curr) => {\r\n          count++;\r\n          return prev.concat(DictionaryService.updatePronunciationMw(curr));\r\n        }, []);\r\n\r\n        $q.all(promises)\r\n          .then(() => {\r\n            vm.pronunciationBtnState.loading = false;\r\n            vm.pronunciationBtnState.success = true;\r\n\r\n            vm.notificationSuccessMsg = vm.msg.success;\r\n            vm.notification.success = true;\r\n\r\n            $timeout(() => {\r\n              vm.pronunciationBtnState.success = false;\r\n            }, 1500);\r\n            \r\n            getAllWords(user.id);\r\n          })\r\n          .catch(err => {\r\n            console.log('Adding pronunciations failed: ', err);\r\n          });\r\n\r\n        // words.forEach(function (wordObj) {\r\n        //   if (wordObj.pronunciations === undefined) {\r\n        //     DictionaryService.updatePronunciationMw(wordObj)\r\n        //       .then(() => {\r\n        //         count++;\r\n        //         console.log('Successfully added pronunciations');\r\n        //       })\r\n        //       .catch(err => {\r\n        //         console.log('Adding pronunciations failed: ', err);\r\n        //       });\r\n        //   }\r\n        // });\r\n\r\n        \r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ListWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('ListWordsCtrl', ListWordsCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class ImportCtrl {\r\n    constructor(ImportService, WordsService, ConfigService, SettingsService, user, $timeout, $window) {\r\n\r\n      let vm = this;\r\n      \r\n      // config ///////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.formData = {};\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.placeholder = {\r\n        files: 'Click to upload anki text files',\r\n        collectionTitle: 'Add collection title here'\r\n      };\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Words successfully imported!',\r\n        error: 'Something went wrong. Please try again.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n\r\n      // helper functions /////////////////////////////////////////////////////////////////\r\n\r\n      function importTextfile (userId, data) {\r\n        \r\n        vm.btnState.loading = true;\r\n\r\n        ImportService.anki(userId, data)\r\n          .then(dbRes => {\r\n            let dbResData = angular.fromJson(dbRes).data;\r\n            let collectionId = dbResData.generated_keys[0];\r\n\r\n            return WordsService.getAll(collectionId);\r\n          })\r\n          .then(() => {\r\n            vm.btnState.loading = false;\r\n            vm.btnState.success = true;\r\n\r\n            vm.notification.success = true;\r\n            \r\n            $timeout(() => {\r\n              vm.btnState.success = false;\r\n              $window.location.href = '/#/main-app/collections';\r\n            }, 1500);\r\n          })\r\n          .catch(err => {\r\n            vm.btnState.loading = false;\r\n\r\n            vm.notification.error = true;\r\n\r\n            console.log('Something went wrong with importing', err);\r\n          });\r\n\r\n      }\r\n\r\n      // main /////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.importTextfile = (isValid, formData) => {\r\n\r\n        if (!isValid) { return; }\r\n\r\n        importTextfile(user.id, formData);\r\n\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ImportCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('ImportCtrl', ImportCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name mainApp.factory:CollectionsService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .factory('CollectionsService', CollectionsService);\r\n\r\n  function CollectionsService($http) {\r\n\r\n    let CollectionsServiceBase = {};\r\n\r\n    CollectionsServiceBase.getAll = userId => {\r\n      return $http.get('/api/' + userId + '/collections');\r\n    };\r\n\r\n    CollectionsServiceBase.create = collection => {\r\n      return $http.post('/api/collections', collection);\r\n    };\r\n\r\n    CollectionsServiceBase.get = collectionId => {\r\n      return $http.get('/api/collections/' + collectionId);\r\n    };\r\n\r\n    CollectionsServiceBase.merge = (collectionId, newCollectionId) => {\r\n      return $http.put('/api/collections/merge/' + collectionId, newCollectionId);\r\n    };\r\n\r\n    CollectionsServiceBase.update = (collectionId, newCollection) => {\r\n      return $http.put('/api/collections/' + collectionId, newCollection);\r\n    };\r\n\r\n    CollectionsServiceBase.delete = collectionId => {\r\n      return $http.delete('/api/collections/' + collectionId);\r\n    };\r\n\r\n    return CollectionsServiceBase;\r\n\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class CollectionsCtrl {\r\n    constructor(CollectionsService, WordsService, UsersService, $timeout, user, $q, $moment) {\r\n\r\n      let vm = this;\r\n\r\n      // config ///////////////////////////////////////////////////////////////////////////\r\n      \r\n      vm.formData = {};\r\n      vm.placeholder = {\r\n        collectionTitle: 'Enter Collection name here'\r\n      };\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.user = user;\r\n      vm.checks = {};\r\n      vm.showEdit = false;\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Success!',\r\n        error: 'Something went wrong - please try again.',\r\n        mergeError: 'Please select two or more collections.',\r\n        noneSelectedError: 'Please select one or more collections.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n      vm.showModal = false;\r\n\r\n      // init /////////////////////////////////////////////////////////////////////////////\r\n      \r\n      getAllCollections(user);\r\n\r\n      resetStudyCountAt4am();\r\n\r\n      // helper functions //////////////////////////////////////////////////////////////////\r\n\r\n      function resetStudyCountAt4am () {\r\n        function timeTo4am () {\r\n          var now = new Date();\r\n          var endOfDay = $moment().endOf('day').add(4, 'hours');\r\n          return endOfDay - now + 1000;          \r\n        }\r\n\r\n        var attemptCount = 0;\r\n\r\n        function resetAt4am () {\r\n          UsersService.update(user.id, { studyCountToday: 0 })\r\n            .then(() => {\r\n              $timeout(resetAt4am, timeTo4am());\r\n            })\r\n            .catch(err => {\r\n              console.log('Something went wrong (attempt ', attemptCount , '): ', err);\r\n              if (attemptCount <= 5) { // retry 5 times after waiting 2 seconds before each attempt\r\n                attemptCount++;\r\n                $timeout(resetAt4am, 2000);\r\n              }\r\n            });\r\n        }\r\n\r\n        $timeout(resetAt4am, timeTo4am());\r\n      }\r\n\r\n      function getAllCollections (user) {\r\n        CollectionsService.getAll(user.id)\r\n          .then(res => {\r\n            vm.collectionList = angular.fromJson(res).data;\r\n\r\n            // intiialize checks to all false\r\n            vm.checks = initChecks(vm.collectionList);\r\n          })\r\n          .catch(err => {\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n      }\r\n\r\n      function mergeCollections (collectionIds) {\r\n        let mainCollectionId = collectionIds[0];\r\n        let remainingCollectionIds = collectionIds.filter(collectionId => {\r\n          return collectionId !== mainCollectionId;\r\n        });\r\n\r\n        let promises = [];\r\n\r\n        remainingCollectionIds.forEach(collectionId => {\r\n          promises.push(CollectionsService.merge(collectionId, { newCollectionId: mainCollectionId }));\r\n        });\r\n\r\n        return $q.all(promises);\r\n      }\r\n\r\n      function deleteCollections (collectionIds) {\r\n        let promises = [];\r\n\r\n        collectionIds.forEach(collectionId => {\r\n          promises.push(CollectionsService.delete(collectionId));\r\n        });\r\n\r\n        return $q.all(promises);\r\n      }\r\n\r\n      function initChecks(collections) {\r\n        let checks = {};\r\n\r\n        collections.forEach(collection => {\r\n          checks[collection.id] = false;\r\n        });\r\n\r\n        return checks;\r\n      }\r\n\r\n      function resetForm () {\r\n        vm.addCollectionForm.collectionTitle.$touched = false;\r\n        vm.addCollectionForm.$submitted = false;\r\n        vm.formData = {};\r\n      }\r\n\r\n      // main /////////////////////////////////////////////////////////////////////////////\r\n      \r\n      vm.toggleEdit = () => {\r\n        vm.showEdit = !vm.showEdit;\r\n      };\r\n\r\n      vm.toggleSuccessNotification = (successMessage) => {\r\n        vm.notification.success = true;\r\n        vm.notificationSuccessMsg = successMessage;\r\n      };\r\n\r\n      vm.toggleErrorNotification = (errorMessage) => {\r\n        vm.notification.error = true;\r\n        vm.notificationErrorMsg = errorMessage;\r\n      };\r\n\r\n      vm.createCollection = (isValid, collection) => {\r\n        if (!isValid) { return; }\r\n\r\n        vm.btnState.loading = true;\r\n\r\n        CollectionsService.create(collection)\r\n          .then(() => {\r\n            vm.btnState.loading = false;\r\n            vm.btnState.success = true;\r\n\r\n            vm.toggleSuccessNotification(vm.msg.success);\r\n\r\n            getAllCollections(user);\r\n            resetForm();\r\n\r\n            $timeout(() => {\r\n              vm.btnState.success = false;\r\n            }, 1500);\r\n          })\r\n          .catch(err => {\r\n            vm.btnState.loading = false;\r\n            vm.toggleErrorNotification(vm.msg.mergeError);\r\n            \r\n            console.log('Something went wrong: ', err);\r\n          });\r\n      };\r\n\r\n      vm.mergeCollections = (collections, checks) => {\r\n\r\n        let mergeList = [];\r\n\r\n        collections.forEach((collection) => {\r\n          if (checks[collection.id] === true) {\r\n            mergeList.push(collection.id);\r\n          }\r\n        });\r\n\r\n        if (mergeList.length >= 2) {\r\n          mergeCollections(mergeList)\r\n            .then(() => {\r\n              vm.toggleSuccessNotification(vm.msg.success);\r\n              getAllCollections(user);\r\n            })\r\n            .catch(err => {\r\n              vm.toggleErrorNotification(vm.msg.error);\r\n              console.log('Something went wrong: ', err);\r\n            });\r\n        } else {\r\n          vm.toggleErrorNotification(vm.msg.mergeError);\r\n        }\r\n\r\n      };\r\n\r\n      vm.deleteCollections = (collections, checks) => {\r\n\r\n        let deleteList = [];\r\n\r\n        collections.forEach((collection) => {\r\n          if (checks[collection.id] === true) {\r\n            deleteList.push(collection.id);\r\n          }\r\n        });\r\n\r\n        if (deleteList.length >= 1) {\r\n          deleteCollections(deleteList)\r\n            .then(() => {\r\n              vm.toggleSuccessNotification(vm.msg.success);\r\n              getAllCollections(user);\r\n            })\r\n            .catch(err => {\r\n              vm.toggleErrorNotification(vm.msg.error);\r\n              console.log('Something went wrong: ', err);\r\n            });\r\n        } else {\r\n          vm.toggleErrorNotification(vm.msg.noneSelectedError);\r\n        }\r\n\r\n      };\r\n\r\n      vm.showConfirmDeleteModal = (collections, checks) => {\r\n        let deleteList = [];\r\n\r\n        collections.forEach((collection) => {\r\n          if (checks[collection.id] === true) {\r\n            deleteList.push(collection.id);\r\n          }\r\n        });\r\n\r\n        if (deleteList.length >= 1) {\r\n          vm.showModal = true;\r\n        } else {\r\n          vm.toggleErrorNotification(vm.msg.noneSelectedError);\r\n        }\r\n      };\r\n\r\n      vm.confirmModal = () => {\r\n        vm.deleteCollections(vm.collectionList, vm.checks);\r\n      };\r\n\r\n      vm.closeModal = () => {\r\n        vm.showModal = false;\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:CollectionsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('CollectionsCtrl', CollectionsCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class AddWordsCtrl {\r\n    constructor(ConfigService, DictionaryService, WordsService, TextConvertService, $stateParams, $timeout, $moment) {\r\n\r\n      let vm = this;\r\n\r\n      // config //////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.formData = {};\r\n      vm.placeholder = {\r\n        word: 'i.e. audacious',\r\n        definition: 'i.e. Fearlessly, often recklessly daring; bold. See Synonyms at adventurous, brave.'\r\n      };\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.collectionId = $stateParams.collectionId;\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Word successfully added!',\r\n        error: 'Something went wrong. Please try again.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n      vm.showModal = false;\r\n\r\n      // helper functions //////////////////////////////////////////////////////////////////\r\n      \r\n      function submitSuccessHandler () {\r\n        vm.btnState.loading = false;\r\n        vm.btnState.success = true;\r\n\r\n        resetForm();\r\n        vm.definitions = []; // reset definition list\r\n\r\n        vm.notification.success = true;\r\n        document.getElementById('addWords').focus();\r\n\r\n        $timeout(() => {\r\n          vm.btnState.success = false;\r\n        }, 1500);\r\n      }\r\n\r\n      function submitErrorHandler (err) {\r\n        vm.btnState.loading = false;\r\n        vm.notification.error = true;\r\n        console.log('Something went wrong: ', err);\r\n      }\r\n\r\n      function composeWordDetails (collectionId, formData) {\r\n        let lastReviewed = $moment();\r\n        let lastReviewedEpochTime = lastReviewed.unix();\r\n        let nextReview = $moment().add(1, 'minutes');\r\n        let nextReviewEpochTime = nextReview.unix();\r\n\r\n        let convertedDefinition = TextConvertService.toHtml(formData.definition);\r\n\r\n        let word = {\r\n          word: formData.word,\r\n          definition: convertedDefinition,\r\n          collectionId: collectionId,\r\n          lastReviewedEpochTime: lastReviewedEpochTime,\r\n          interval: 1,\r\n          nextReviewEpochTime: nextReviewEpochTime,\r\n          phase: 'learning',\r\n          reviewRes: {\r\n            again: 0,\r\n            hard: 0,\r\n            good: 0,\r\n            easy: 0\r\n          },\r\n          easeFactor: 2.5\r\n        };\r\n\r\n        return word;\r\n      }\r\n\r\n      function addWord (collectionId, formData) {\r\n        var word = composeWordDetails(collectionId, formData);\r\n\r\n        WordsService.create(word)\r\n          .then(submitSuccessHandler)\r\n          .catch(submitErrorHandler);\r\n      }\r\n\r\n      function updateWord (collectionId, formData) {\r\n        var word = composeWordDetails(collectionId, formData);\r\n\r\n        WordsService.find(collectionId, formData.word)\r\n          .then(res => {\r\n            var wordId = angular.fromJson(res).data[0].id;\r\n            return WordsService.update(wordId, word);\r\n          })\r\n          .then(submitSuccessHandler)\r\n          .catch(submitErrorHandler);\r\n      }\r\n\r\n      function checkDuplicate (collectionId, formData) {\r\n        WordsService.exists(collectionId, formData.word)\r\n          .then(res => {\r\n            var isDuplicate = angular.fromJson(res).data;\r\n\r\n            if (isDuplicate) { \r\n              vm.showModal = true;\r\n              vm.btnState.loading = false;\r\n            } else {\r\n              addWord(collectionId, formData);\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.log('checkDuplicate err: ', err);\r\n          });\r\n      }\r\n\r\n      function resetForm () {\r\n        vm.addWordForm.word.$touched = false;\r\n        vm.addWordForm.definition.$touched = false;\r\n        vm.addWordForm.$submitted = false;\r\n        vm.formData = {};\r\n      }\r\n\r\n      // main /////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.modalClose = () => {\r\n        vm.showModal = false;\r\n      };\r\n\r\n      vm.modalYes = (collectionId, formData) => {\r\n        updateWord(collectionId, formData);\r\n      };\r\n\r\n      vm.modalNo = (collectionId, formData) => {\r\n        addWord(collectionId, formData);\r\n      };\r\n\r\n      vm.getDefinition = word => {\r\n        if (word !== undefined) {\r\n          DictionaryService.getDefinitionFree(ConfigService.mashapeKey, word)\r\n            .then(res => {\r\n              vm.definitions = res.data.definitions;\r\n            })\r\n            .catch(err => {\r\n              console.log('Something went wrong; ', err);\r\n            });\r\n        }\r\n      };\r\n\r\n      vm.submit = (isValid, collectionId, formData) => {\r\n        if (!isValid) { return; }\r\n\r\n        vm.btnState.loading = true;\r\n\r\n        checkDuplicate(collectionId, formData);\r\n      };\r\n\r\n      vm.copyDefinition = definition => {\r\n        if (vm.formData.definition !== undefined) {\r\n          vm.formData.definition = vm.formData.definition + '\\n\\n' + definition;\r\n        } else {\r\n          vm.formData.definition = definition;\r\n        }\r\n      };\r\n\r\n      vm.resetForm = () => {\r\n        resetForm();\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:AddWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('AddWordsCtrl', AddWordsCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name home\n   * @description\n   *\n   */\n  angular\n    .module('home', [\n      'ui.router'\n    ]);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class NavHomeCtrl {\r\n    constructor(AuthService, $window) {\r\n\r\n      let vm = this;\r\n\r\n      // config //////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.user = false;\r\n\r\n      vm.setActive = page => {\r\n        vm.active = page;\r\n      };\r\n\r\n      // init ////////////////////////////////////////////////////////////////////////////\r\n      \r\n      AuthService.isLoggedIn()\r\n        .then(user => {\r\n          if (user.data !== false) {\r\n            vm.user = true;\r\n            $window.location = '/#/main-app/collections';\r\n          } \r\n\r\n          console.log('Logged in?', vm.user);\r\n        })\r\n        .catch(err => {\r\n          console.log('Something went wrong: ', err);\r\n        });\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name home.controller:NavHomeCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('home')\r\n    .controller('NavHomeCtrl', NavHomeCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  angular\n    .module('home')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('root', {\n        abstract: true,\n        views: {\n          '': {\n            templateUrl: 'home/root.tpl.html',\n          },\n          'nav-home@root': {\n            templateUrl: 'home/nav-home.tpl.html',\n            controller: 'NavHomeCtrl',\n            controllerAs: 'navHome'\n          }\n        }\n      })\n      .state('root.home', {\n        url: '/home',\n        templateUrl: 'home/home.tpl.html',\n        controller: 'HomeCtrl',\n        controllerAs: 'home'\n      });\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class HomeCtrl {\r\n    constructor() {\r\n      let vm = this;\r\n      vm.ctrlName = 'HomeCtrl';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name home.controller:HomeCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('home')\r\n    .controller('HomeCtrl', HomeCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name common\n   * @description\n   *\n   */\n  angular\n    .module('common', []);\n}());\n","(() => {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name common.factory:TextConvertService\n   *\n   * @description\n   *\n   */\n  angular\n    .module('common')\n    .factory('TextConvertService', TextConvertService);\n\n  function TextConvertService() {\n\n    let TextConvertServiceBase = {};\n\n    TextConvertServiceBase.toHtml = text => {\n      if (text === undefined) { return; }\n      \n      let convertedText = text.replace(/\\n/g, '<br>');\n      return convertedText;\n    };\n\n    TextConvertServiceBase.fromHtml = text => {\n      if (text === undefined) { return; }\n\n      let convertedText = text.replace(/<br>/g, '\\n')\n                              .replace(/<div>/g, '\\n')\n                              .replace(/<\\/div>/g, '\\n')\n                              .replace(/&amp;/g, '&')\n                              .replace(/&nbsp;/g, ' ')\n                              .replace(/&gt;/g, '>');\n      return convertedText;\n    };\n\n    return TextConvertServiceBase;\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:spinner\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <example module=\"common\">\r\n       <file name=\"index.html\">\r\n        <spinner></spinner>\r\n       </file>\r\n     </example>\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .directive('spinner', spinner);\r\n\r\n  function spinner() {\r\n    return {\r\n      restrict: 'EA',\r\n      scope: {},\r\n      templateUrl: 'common/spinner-directive.tpl.html',\r\n      replace: true,\r\n      link(scope, element, attrs) {\r\n        /*jshint unused:false */\r\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\r\n        scope.width = attrs.width;\r\n      }\r\n    };\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:Sm2Service\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .factory('Sm2Service', Sm2Service);\r\n\r\n  function Sm2Service($moment) {\r\n    let Sm2ServiceBase = {};\r\n\r\n    /*    \r\n      SM2 (Super Memo 2) Algorithm\r\n\r\n      Learning phase: 1min / 10min\r\n      Review phase default: 4 days\r\n      I(n) = I(n-1) * EF\r\n      Minimum EF: 1.3\r\n\r\n      Review response:\r\n      Again: reset phase to learning + -20% to EF\r\n      Hard: -15% to EF\r\n      Good: do nothing\r\n      Easy: +15% to EF\r\n    */\r\n   \r\n    // main //////////////////////////////////////////////////////////////////////////////\r\n\r\n    // calcEaseFactor :: Float -> String -> Float\r\n    Sm2ServiceBase.calcEaseFactor = (easeFactor, choice) => {\r\n      let oldEaseFactor = easeFactor;\r\n      let newEaseFactor;\r\n      let minEaseFactor = 1.3;\r\n\r\n      switch (choice) {\r\n        case 'again':\r\n          newEaseFactor = oldEaseFactor - 0.2;\r\n          newEaseFactor = newEaseFactor < minEaseFactor ? minEaseFactor : newEaseFactor;\r\n          break;\r\n        case 'hard':\r\n          newEaseFactor = oldEaseFactor - 0.15;\r\n          newEaseFactor = newEaseFactor < minEaseFactor ? minEaseFactor : newEaseFactor;\r\n          break;\r\n        case 'good':\r\n          newEaseFactor = oldEaseFactor;\r\n          break;\r\n        case 'easy':\r\n          newEaseFactor = oldEaseFactor + 0.15;\r\n          break;\r\n      }\r\n\r\n      return newEaseFactor;\r\n    };\r\n\r\n    // calcPhase :: String -> Integer -> String -> String\r\n    Sm2ServiceBase.calcPhase = (phase, interval, choice) => {\r\n      if (choice === 'again') {\r\n        return 'learning';\r\n      } else if (choice === 'easy') {\r\n        return 'review';\r\n      }\r\n\r\n      if (phase === 'learning') {\r\n        if  (interval === 1) {\r\n          return 'learning';\r\n        } else if (interval === 10) {\r\n          return 'review';\r\n        }\r\n      }\r\n\r\n      if (phase === 'review') {\r\n        return 'review';\r\n      }\r\n    };\r\n\r\n    // calcInterval :: String -> Integer -> Float -> String -> Integer\r\n    // note: interval is in minutes\r\n    Sm2ServiceBase.calcInterval = (phase, interval, easeFactor, choice) => {\r\n      if (choice === 'again') {\r\n        return 1;\r\n      } else if (choice === 'easy' && phase === 'learning') {\r\n        return 4 * 24 * 60;\r\n      }\r\n\r\n      if (phase === 'learning') {\r\n        switch (interval) {\r\n          case 1:\r\n            return 10;\r\n          case 10:\r\n            return 4 * 24 * 60;\r\n        }\r\n      } else if (phase === 'review') {\r\n        return interval * easeFactor;\r\n      }\r\n    };\r\n\r\n    Sm2ServiceBase.calcNextReview = (newInterval) => {\r\n      return $moment().add(newInterval, 'minutes');\r\n    };\r\n\r\n    return Sm2ServiceBase;\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:notification\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <notification show=\"collections.showNotification\" color=\"green\">Some message</notification>\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .directive('notification', notification);\r\n\r\n  function notification($timeout) {\r\n    return {\r\n      restrict: 'EA',\r\n      scope: {\r\n        show: '=',\r\n        color: '@'\r\n      },\r\n      templateUrl: 'common/notification-directive.tpl.html',\r\n      transclude: true,\r\n      replace: false,\r\n      link(scope, element, attrs) {\r\n        /*jshint unused:false */\r\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\r\n        scope.$watch('show', function () {\r\n          $timeout(() => {\r\n            scope.show = false;\r\n          }, 2500);\r\n        });\r\n      }\r\n    };\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:modal\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <modal show=\"collections.showModal\" \r\n            modal-bg=\"bg-red\" \r\n            yes-cb=\"collections.confirm()\" \r\n            no-cb=\"collections.no()\" \r\n            yes-message=\"Yes, delete\" \r\n            no-message=\"No, don't save\"\r\n            add-abort-button>\r\n     </modal>\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .directive('modal', modal);\r\n\r\n  function modal() {\r\n    return {\r\n      restrict: 'EA',\r\n      scope: {\r\n        show: '=',\r\n        yesCb: '&?',\r\n        noCb: '&?',\r\n      },\r\n      templateUrl: 'common/modal-directive.tpl.html',\r\n      replace: false,\r\n      transclude: true,\r\n      link(scope, element, attrs) {\r\n        /*jshint unused:false */\r\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\r\n        scope.modalBg = attrs.modalBg || '';\r\n\r\n        scope.yesMessage = attrs.yesMessage || 'Yes';\r\n        scope.noMessage = attrs.noMessage || 'No';\r\n\r\n        scope.showYesBtn = scope.yesCb !== undefined ? true : false;\r\n        scope.showNoBtn = scope.noCb !== undefined ? true : false;\r\n\r\n        scope.showAbortBtn = attrs.addAbortButton !== undefined ? true : false;\r\n\r\n        scope.closeModal = () => {\r\n          scope.show = false;\r\n        };\r\n      }\r\n    };\r\n  }\r\n}());\r\n","(() => {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name common.factory:ImportService\n   *\n   * @description\n   *\n   */\n  angular\n    .module('common')\n    .factory('ImportService', ImportService);\n\n  function ImportService($http) {\n    let ImportServiceBase = {};\n\n    // anki :: String -> { collectionTitle, [files] } -> {dbRes}\n    ImportServiceBase.anki = (userId, data) => {\n      return $http.post('/api/import/anki/' + userId, data);\n    };\n\n    return ImportServiceBase;\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:fileread\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <example module=\"common\">\r\n       <file name=\"index.html\">\r\n        <fileread></fileread>\r\n       </file>\r\n     </example>\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .directive('fileread', fileread);\r\n\r\n  function fileread() {\r\n    return {\r\n      restrict: 'A',\r\n      scope: {\r\n        fileread: '='\r\n      },\r\n      replace: false,\r\n      link(scope, element, attrs) {\r\n        /*jshint unused:false */\r\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\r\n\r\n        element.bind(\"change\", function (changeEvent) {\r\n          scope.fileread = [];\r\n          var files = changeEvent.target.files;\r\n\r\n          for (let i = 0, f; f = files[i]; i++) {\r\n            var reader = new FileReader();\r\n\r\n            reader.onload = (function (file) {\r\n              return function (loadEvent) {\r\n                scope.$apply(function () {\r\n                  scope.fileread.push({ name: file.name, content: loadEvent.target.result });\r\n                });\r\n              };\r\n            })(f);\r\n\r\n            reader.readAsText(f);\r\n          }\r\n        });      \r\n      }\r\n    };\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:DictionaryService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .factory('DictionaryService', DictionaryService);\r\n\r\n  function DictionaryService($http, $q) {\r\n\r\n    let DictionaryServiceBase = {};\r\n    \r\n    DictionaryServiceBase.getDefinitionFree = (mashapeKey, word) => {\r\n      return $http.get('https://montanaflynn-dictionary.p.mashape.com/define?word=' + word, {\r\n        headers: { 'X-Mashape-Key': mashapeKey }\r\n      });\r\n    };\r\n\r\n    // getPronunciation :: String -> Promise([a])\r\n    DictionaryServiceBase.getPronunciationMw = word => {\r\n      return $http.get('/api/pronunciations/' + word);\r\n    };\r\n\r\n    // getPronunciation :: String -> String -> Promise([a])\r\n    DictionaryServiceBase.updatePronunciationMw = wordObj => {\r\n      return $http.put('/api/pronunciations/' + wordObj.id, wordObj);\r\n    };\r\n\r\n    // getPronunciation :: string -> string -> Promise([a])\r\n    DictionaryServiceBase.getPronunciationForvo = (forvoKey, word) => {\r\n\r\n      let deferred = $q.defer();\r\n\r\n      $http.jsonp('http://apifree.forvo.com/action/word-pronunciations/format/json/word/' + word + '/language/en/order/rate-desc/limit/1/key/' + forvoKey + '?callback=JSON_CALLBACK')\r\n        .then(res => {\r\n          let pronunciationData = angular.fromJson(res).data;\r\n          let pronunciationPaths;\r\n\r\n          if (pronunciationData.attributes.total !== 0) {\r\n            pronunciationPaths = pronunciationPaths.push(pronunciationData.items[0].pathmp3);\r\n          } else {\r\n            pronunciationPaths = null;\r\n          }\r\n\r\n          deferred.resolve(pronunciationPaths);\r\n        })\r\n        .catch(err => {\r\n          deferred.reject(err);\r\n          console.log('Something went wrong: ', err);\r\n        });\r\n\r\n      return deferred.promise;\r\n\r\n    };\r\n    \r\n    return DictionaryServiceBase;\r\n\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:ConfigService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .factory('ConfigService', ConfigService);\r\n\r\n  function ConfigService() {\r\n\r\n    let ConfigServiceBase = {};\r\n    \r\n    ConfigServiceBase.mashapeKey = 'S4DvXSr43Cmsh5Kww0kOuX9QxNbXp1hjhkYjsn84TFraf8SlG3';\r\n    ConfigServiceBase.forvoKey = 'f850390038cd293954cb5bdf7dc36d8a';\r\n    ConfigServiceBase.mwKey = 'e1f9d411-f40e-40b0-bdae-7c1903daf229';\r\n\r\n    return ConfigServiceBase;\r\n\r\n  }\r\n}());\r\n","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name auth\n   * @description\n   *\n   */\n  angular\n    .module('auth', [\n      'ui.router'\n    ]);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class RegisterCtrl {\r\n    constructor() {\r\n      let vm = this;\r\n      vm.ctrlName = 'RegisterCtrl';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name auth.controller:RegisterCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('auth')\r\n    .controller('RegisterCtrl', RegisterCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class LoginCtrl {\r\n    constructor() {\r\n      let vm = this;\r\n      vm.ctrlName = 'LoginCtrl';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name auth.controller:LoginCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('auth')\r\n    .controller('LoginCtrl', LoginCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name auth.factory:AuthService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('auth')\r\n    .factory('AuthService', AuthService);\r\n\r\n  function AuthService(ConfigService, $http, $q, $window) {\r\n\r\n    let AuthServiceBase = {};\r\n\r\n    // only check login status\r\n    // used in nav\r\n    AuthServiceBase.isLoggedIn = () => {\r\n      return $http.get('/auth/loggedin');\r\n    };\r\n\r\n    // check login status and redirect if not logged in\r\n    // used for route resolve for protected paths\r\n    AuthServiceBase.checkLoggedIn = () => {\r\n\r\n      var deferred = $q.defer();\r\n\r\n      $http.get('/auth/loggedin')\r\n        .then(user => {\r\n          var user = user.data;\r\n          if (user !== false) {\r\n            deferred.resolve(user.new_val);\r\n          } else {\r\n            deferred.reject();\r\n            $window.location = '/#/login';\r\n          }\r\n        })\r\n        .catch(err => {\r\n          deferred.reject();\r\n          $window.location = '/#/';\r\n          console.log('Something went wrong: ', err);\r\n        });\r\n\r\n      return deferred.promise;\r\n      \r\n    };\r\n\r\n    AuthServiceBase.logout = () => {\r\n      return $http.get('/auth/logout');\r\n    };\r\n    \r\n    return AuthServiceBase;\r\n\r\n  }\r\n}());\r\n","(() => {\n  'use strict';\n\n  angular\n    .module('auth')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('root.auth', {\n        abstract: true,\n        views: {\n          '': {\n            templateUrl: 'auth/auth.tpl.html'\n          }\n        }\n      })\n      .state('root.auth.login', {\n        url: '/login',\n        templateUrl: 'auth/login.tpl.html',\n        controller: 'LoginCtrl',\n        controllerAs: 'login'\n      })\n      .state('root.auth.register', {\n        url: '/register',\n        templateUrl: 'auth/register.tpl.html',\n        controller: 'RegisterCtrl',\n        controllerAs: 'register'\n      })\n      .state('root.auth.logout', {\n        url: '/logout',\n        templateUrl: 'auth/logout.tpl.html',\n        controller: 'LogoutCtrl',\n        controllerAs: 'logout'\n      });\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('bigvocab')\r\n    .config(config);\r\n\r\n  function config($urlRouterProvider) {\r\n    $urlRouterProvider.otherwise('/home');\r\n  }\r\n}());\r\n"],"sourceRoot":"/source/"}