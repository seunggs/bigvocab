{"version":3,"sources":["common/dictionary-service-factory.es6"],"names":[],"mappings":";;AAAA,AAAC,CAAA,YAAM;AACL,cAAY,CAAC;;;;;;;;;AASb,SAAO,CACJ,MAAM,CAAC,QAAQ,CAAC,CAChB,OAAO,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;;AAEnD,WAAS,iBAAiB,CAAC,KAAK,EAAE,EAAE,EAAE;;AAEpC,QAAI,qBAAqB,GAAG,EAAE,CAAC;;AAE/B,yBAAqB,CAAC,iBAAiB,GAAG,UAAC,UAAU,EAAE,OAAO,EAAK;AACjE,aAAO,KAAK,CAAC,GAAG,CAAC,4DAA4D,GAAG,OAAO,EAAE;AACvF,eAAO,EAAE,EAAE,eAAe,EAAE,UAAU,EAAE;OACzC,CAAC,CAAC;KACJ,CAAC;;;AAGF,yBAAqB,CAAC,kBAAkB,GAAG,UAAA,IAAI,EAAI;AACjD,aAAO,KAAK,CAAC,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC,CAAC;KACjD,CAAC;;;AAGF,yBAAqB,CAAC,qBAAqB,GAAG,UAAA,OAAO,EAAI;AACvD,aAAO,KAAK,CAAC,GAAG,CAAC,sBAAsB,GAAG,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;KAChE,CAAC;;;AAGF,yBAAqB,CAAC,qBAAqB,GAAG,UAAC,QAAQ,EAAE,IAAI,EAAK;;AAEhE,UAAI,QAAQ,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;;AAE1B,WAAK,CAAC,KAAK,CAAC,uEAAuE,GAAG,IAAI,GAAG,2CAA2C,GAAG,QAAQ,GAAG,yBAAyB,CAAC,CAC7K,IAAI,CAAC,UAAA,GAAG,EAAI;AACX,YAAI,iBAAiB,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;AACnD,YAAI,kBAAkB,YAAA,CAAC;;AAEvB,YAAI,iBAAiB,CAAC,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;AAC5C,4BAAkB,GAAG,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;SAClF,MAAM;AACL,4BAAkB,GAAG,IAAI,CAAC;SAC3B;;AAED,gBAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;OACtC,CAAC,SACI,CAAC,UAAA,GAAG,EAAI;AACZ,gBAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACrB,eAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;OAC5C,CAAC,CAAC;;AAEL,aAAO,QAAQ,CAAC,OAAO,CAAC;KAEzB,CAAC;;AAEF,WAAO,qBAAqB,CAAC;GAE9B;CACF,CAAA,EAAE,CAAE","file":"common/dictionary-service-factory.js","sourcesContent":["(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:DictionaryService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .factory('DictionaryService', DictionaryService);\r\n\r\n  function DictionaryService($http, $q) {\r\n\r\n    let DictionaryServiceBase = {};\r\n    \r\n    DictionaryServiceBase.getDefinitionFree = (mashapeKey, wordStr) => {\r\n      return $http.get('https://montanaflynn-dictionary.p.mashape.com/define?word=' + wordStr, {\r\n        headers: { 'X-Mashape-Key': mashapeKey }\r\n      });\r\n    };\r\n\r\n    // getPronunciation :: String -> Promise([a])\r\n    DictionaryServiceBase.getPronunciationMw = word => {\r\n      return $http.get('/api/pronunciations/' + word);\r\n    };\r\n\r\n    // getPronunciation :: String -> String -> Promise([a])\r\n    DictionaryServiceBase.updatePronunciationMw = wordObj => {\r\n      return $http.put('/api/pronunciations/' + wordObj.id, wordObj);\r\n    };\r\n\r\n    // getPronunciation :: string -> string -> Promise([a])\r\n    DictionaryServiceBase.getPronunciationForvo = (forvoKey, word) => {\r\n\r\n      let deferred = $q.defer();\r\n\r\n      $http.jsonp('http://apifree.forvo.com/action/word-pronunciations/format/json/word/' + word + '/language/en/order/rate-desc/limit/1/key/' + forvoKey + '?callback=JSON_CALLBACK')\r\n        .then(res => {\r\n          let pronunciationData = angular.fromJson(res).data;\r\n          let pronunciationPaths;\r\n\r\n          if (pronunciationData.attributes.total !== 0) {\r\n            pronunciationPaths = pronunciationPaths.push(pronunciationData.items[0].pathmp3);\r\n          } else {\r\n            pronunciationPaths = null;\r\n          }\r\n\r\n          deferred.resolve(pronunciationPaths);\r\n        })\r\n        .catch(err => {\r\n          deferred.reject(err);\r\n          console.log('Something went wrong: ', err);\r\n        });\r\n\r\n      return deferred.promise;\r\n\r\n    };\r\n    \r\n    return DictionaryServiceBase;\r\n\r\n  }\r\n}());\r\n"],"sourceRoot":"/source/"}