{"version":3,"sources":["app.js","app-module.es6","main-app/test-words.tpl.html","main-app/sidebar.tpl.html","main-app/settings.tpl.html","main-app/review-words.tpl.html","main-app/main-app.tpl.html","main-app/logout.tpl.html","main-app/list-words.tpl.html","main-app/import.tpl.html","main-app/collections.tpl.html","main-app/add-words.tpl.html","home/root.tpl.html","home/nav-home.tpl.html","home/home.tpl.html","common/spinner-directive.tpl.html","common/notification-directive.tpl.html","common/modal-directive.tpl.html","auth/register.tpl.html","auth/login.tpl.html","auth/auth.tpl.html","main-app/main-app-module.es6","main-app/words-service-factory.es6","main-app/test-words-controller.es6","main-app/sidebar-controller.es6","main-app/settings-service-factory.es6","main-app/settings-controller.es6","main-app/review-words-controller.es6","main-app/main-app-routes.es6","main-app/logout-controller.es6","main-app/list-words-controller.es6","main-app/import-controller.es6","main-app/collections-service-factory.es6","main-app/collections-controller.es6","main-app/add-words-controller.es6","home/home-module.es6","home/nav-home-controller.es6","home/home-routes.es6","home/home-controller.es6","common/common-module.es6","common/text-convert-service-factory.es6","common/spinner-directive.es6","common/sm2-service-factory.es6","common/notification-directive.es6","common/modal-directive.es6","common/import-service-factory.es6","common/fileread-directive.es6","common/dictionary-service-factory.es6","common/config-service-factory.es6","auth/auth-module.es6","auth/register-controller.es6","auth/login-controller.es6","auth/auth-service-factory.es6","auth/auth-routes.es6","app-routes.es6"],"names":["_classCallCheck","instance","Constructor","TypeError","angular","module","run","$templateCache","put","WordsService","$http","WordsServiceBase","getUserAll","userId","get","getAll","collectionId","create","word","post","wordId","find","exists","getDue","update","wordUpdate","factory","$inject","TestWordsCtrl","this","vm","ctrlName","controller","SidebarCtrl","toggle","toggleSidebar","navItems","id","title","icon","link","SettingsService","SettingsServiceBase","settingsUpdate","SettingsCtrl","user","$timeout","changeSettings","maxDailyWords","console","log","formData","placeholder","btnState","loading","success","notification","error","msg","notificationSuccessMsg","notificationErrorMsg","saveSettings","then","dbRes","err","ReviewWordsCtrl","$stateParams","$moment","Sm2Service","ConfigService","DictionaryService","TextConvertService","$sce","ngAudio","errorHandler","getCurrentWord","wordCounter","words","currentWord","definition","fromHtml","initEditWord","showAnswer","editToggle","finished","res","fromJson","data","totalWordsCount","length","getPronunciation","forvoKey","pronunciationPath","pronunciation","load","toggleAnswer","toggleEdit","playPronunciation","play","submitEdit","toHtml","submitRes","choice","newEaseFactor","calcEaseFactor","easeFactor","newPhase","calcPhase","phase","interval","newInterval","calcInterval","lastReviewed","lastReviewedEpochTime","unix","newNextReview","calcNextReview","newNextReviewEpochTime","newReviewRes","copy","reviewRes","nextReviewEpochTime","undefined","config","$stateProvider","state","abstract","url","views","templateUrl","sidebar@mainApp","controllerAs","resolve","AuthService","checkLoggedIn","LogoutCtrl","$window","logout","location","goBack","history","go","ListWordsCtrl","CollectionsService","submitErrorHandler","getAllWords","wordsCount","map","initShowEdit","showEdit","displayLimit","deleteSuccess","pronunciationError","modalYes","filter","index","indexOf","splice","modalClose","showModal","saveChanges","isValid","submitDelete","selectedWordId","ImportCtrl","ImportService","$q","importTextfile","promises","anki","maxWords","all","dbResData","generated_keys","reject","forEach","push","addPronunciation","href","deferred","defer","pronunciationData","attributes","total","items","pathmp3","promise","files","collectionTitle","CollectionsServiceBase","collection","merge","newCollectionId","newCollection","CollectionsCtrl","getAllCollections","collectionList","checks","initChecks","mergeCollections","collectionIds","mainCollectionId","remainingCollectionIds","deleteCollections","collections","resetForm","addCollectionForm","$touched","$submitted","mergeError","noneSelectedError","toggleSuccessNotification","successMessage","toggleErrorNotification","errorMessage","createCollection","mergeList","deleteList","showConfirmDeleteModal","confirmModal","closeModal","AddWordsCtrl","submitSuccessHandler","definitions","composeWordDetails","nextReview","add","convertedDefinition","again","hard","good","easy","addWord","updateWord","checkDuplicate","isDuplicate","addWordForm","modalNo","getDefinition","mashapeKey","submit","copyDefinition","NavHomeCtrl","setActive","page","active","isLoggedIn","nav-home@root","HomeCtrl","TextConvertServiceBase","text","convertedText","replace","spinner","restrict","scope","element","attrs","width","directive","Sm2ServiceBase","oldEaseFactor","minEaseFactor","show","color","transclude","$watch","modal","yesCb","noCb","modalBg","yesMessage","noMessage","showYesBtn","showNoBtn","showAbortBtn","addAbortButton","ImportServiceBase","fileread","bind","changeEvent","target","i","f","reader","FileReader","onload","file","loadEvent","$apply","name","content","result","readAsText","DictionaryServiceBase","headers","X-Mashape-Key","jsonp","ConfigServiceBase","RegisterCtrl","LoginCtrl","AuthServiceBase","new_val","$urlRouterProvider","otherwise"],"mappings":"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","file":"app-3740c85a.js","sourcesContent":["'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name bigvocab\n   * @description\n   *\n   */\n  angular.module('bigvocab', ['ngAria', 'ngAnimate', 'ngMessages', 'ui.router', '720kb.tooltips', 'ngAudio', 'angular-momentjs', 'home', 'auth', 'mainApp',\n  // 'ramda',\n  'common']);\n\n  // ramda module\n  // angular.module('ramda', []);\n  // angular.module('ramda').factory('R', function ($window) {\n  //   return $window.R;\n  // });\n})();\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/test-words.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix center\">\\n' +\n    '\\n' +\n    '\t\t<h1 class=\"mt1 mb3\">Test Time!</h1>\\n' +\n    '\\n' +\n    '\t\t<div class=\"mb2 bold\"><span class=\"gray\">Today\\'s Quota:</span> 78 <span class=\"gray\">/ 123 words left</span></div>\\n' +\n    '\\n' +\n    '\t\t<div class=\"md-col-4 sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"h2 px2 py4 bg-white rounded\">Hello</div>\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t\t<div class=\"md-col-4 sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"clearfix mxn1\">\\n' +\n    '\t\t\t\t<div class=\"col col-6 px1\">\\n' +\n    '\t\t\t\t\t<a class=\"btn mt2 bg-red block white\">Not sure<span class=\"ti-close ml1\"></span></a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div class=\"col col-6 px1\">\\n' +\n    '\t\t\t\t\t<a class=\"btn mt2 bg-green block white\">Easy<span class=\"ti-check ml1\"></span></a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/sidebar.tpl.html',\n    '<!--/////////// DESKTOP ONLY ///////////-->\\n' +\n    '<div class=\"sm-show\" style=\"margin-right: 63px;\">\\n' +\n    '\\n' +\n    '\t<div class=\"bg-navy fixed white z1\" style=\"height: 100vh;\">\\n' +\n    '\t\t<div class=\"flex flex-column flex-center py3\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<a ui-sref=\"mainApp.collections\"><img class=\"mb2\" src=\"../images/logo/bigvocab-logo-color.svg\" width=\"56px\"></a>\\n' +\n    '\t\t\t<a ui-sref=\"{{ navItem.link }}\" tooltips title=\"{{ navItem.title }}\" tooltip-placement=\"right\" class=\"btn btn-icon h2 center p2\" ng-repeat=\"navItem in sidebar.navItems | orderBy:\\'id\\'\" tabindex=\"-1\">\\n' +\n    '\t\t\t\t<span class=\"{{ navItem.icon }}\"></span>\\n' +\n    '\t\t\t</a>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '<!--/////////// end: DESKTOP ONLY ///////////-->\\n' +\n    '\\n' +\n    '<!--/////////// MOBILE ONLY ///////////-->\\n' +\n    '<div class=\"sm-hide\">\\n' +\n    '\\n' +\n    '\t<!-- toggle button background -->\\n' +\n    '\t<div class=\"fixed z2\" style=\"background-color: rgba(255,255,255,0.93); width: 58px; height:58px;\"></div>\\n' +\n    '\t<!-- toggle button background -->\\n' +\n    '\\n' +\n    '\t<!-- toggle button -->\\n' +\n    '\t<div class=\"fixed z3\">\\n' +\n    '\t\t<a ng-click=\"sidebar.toggleSidebar()\" class=\"btn btn-icon p2 h3\" ng-class=\"{\\'black\\': sidebar.toggle === false, \\'white\\': sidebar.toggle === true}\"><span class=\"ti-menu\"></span></a>\\n' +\n    '\t</div>\\n' +\n    '\t<!-- end: toggle button -->\\n' +\n    '\\n' +\n    '\t<!-- menu items -->\\n' +\n    '\t<div class=\"bg-navy fixed white z2 translateX-n-100 transition-all-300\" ng-class=\"{\\'translateX-n-100\\': sidebar.toggle === false, \\'translateX-0\\': sidebar.toggle === true }\" style=\"height: 100vh;\">\\n' +\n    '\t\t<div class=\"flex flex-column py2 mt4\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<div style=\"margin-left:20px\"><img class=\"mb2\" src=\"../images/logo/bigvocab-logo-color.svg\" width=\"56px\"></div>\\n' +\n    '\t\t\t<a ui-sref=\"{{ navItem.link }}\" ng-click=\"sidebar.toggleSidebar();\" class=\"btn btn-icon py2 px3 flex flex-center\" ng-repeat=\"navItem in sidebar.navItems | orderBy:\\'id\\'\" tabindex=\"-1\">\\n' +\n    '\t\t\t\t<div class=\"{{ navItem.icon }} h3 mr2\"></div>\\n' +\n    '\t\t\t\t<div class=\"h5\">{{ navItem.title }}</div>\\n' +\n    '\t\t\t</a>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\t<!-- end: menu items -->\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '<!--/////////// end: MOBILE ONLY ///////////-->\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/settings.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-8 md-col-4 mx-auto center px2\">\\n' +\n    '\t\\n' +\n    '\t\t\t<h1 class=\"mt1 mb2\">Settings</h1>\\n' +\n    '\\n' +\n    '\t\t\t<form name=\"settings.settingsForm\" \\n' +\n    '\t\t\t\t\t\tng-submit=\"settings.saveSettings(settings.formData.maxDailyWords)\"\\n' +\n    '\t\t\t\t\t\tnovalidate>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mb1 bold\">Max # of study words per day</div>\\n' +\n    '\t\t\t\t<input name=\"maxDailyWords\" type=\"number\" ng-model=\"settings.formData.maxDailyWords\" class=\"field col-12\" placeholder=\"{{ settings.placeholder.maxDailyWords }}\" autofocus>\\n' +\n    '\\n' +\n    '\t\t\t\t<button class=\"btn btn-primary col-12 mt2\" type=\"submit\">\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"!settings.btnState.loading && !settings.btnState.success\">Save Changes</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"settings.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"settings.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t</button>\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"settings.notification.success\"><span class=\"ti-check mr1\"></span>{{ settings.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"settings.notification.error\"><span class=\"ti-alert mr1\"></span>{{ settings.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/review-words.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix center\">\\n' +\n    '\\n' +\n    '\t\t<h1 class=\"mt1 mb3\">Study Time!</h1>\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"flex flex-justify\">\\n' +\n    '\t\t\t\t<div class=\"mb2 bold\">\\n' +\n    '\t\t\t\t\t<span class=\"gray\">Today\\'s Quota:</span> {{ reviewWords.totalWordsCount - reviewWords.wordCounter }} <span class=\"gray\">/ {{ reviewWords.totalWordsCount }} words left</span>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div>\\n' +\n    '\t\t\t\t\t<a ng-click=\"reviewWords.toggleEdit()\" ng-if=\"!reviewWords.finished\" class=\"h5 gray underline\">Edit</a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t\t<!-- edit word -->\\n' +\n    '\t\t<div class=\"sm-col-6 mx-auto px2 bg-lighten-3 rounded py2 mb2\" ng-if=\"reviewWords.editToggle && !reviewWords.finished\">\\n' +\n    '\t\t\t<form>\\n' +\n    '\t\t\t\t<input type=\"text\" name=\"editWord\" ng-model=\"reviewWords.formData.word\" class=\"field col-12 mb1\" required>\\n' +\n    '\t\t\t\t<textarea name=\"editDefinition\" ng-model=\"reviewWords.formData.definition\" class=\"field col-12\" style=\"height: 80px;\"></textarea>\\n' +\n    '\t\t\t\t<button ng-click=\"reviewWords.submitEdit(reviewWords.currentWord.id, reviewWords.formData.word, reviewWords.formData.definition)\" class=\"btn btn-green btn-form col-12 mt1\">Save Changes</button>\\n' +\n    '\t\t\t</form>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: edit word -->\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"p3 bg-white rounded flex flex-column flex-center-justified\" style=\"min-height: 184px\">\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- word -->\\n' +\n    '\t\t\t\t<div class=\"h2 mb1\">{{ reviewWords.currentWord.word }}</div>\\n' +\n    '\t\t\t\t<!-- end: word -->\\n' +\n    '\\n' +\n    '\t\t\t\t\\n' +\n    '\t\t\t\t<div ng-if=\"reviewWords.showAnswer\">\\n' +\n    '\t\t\t\t\t<!-- definition -->\\n' +\n    '\t\t\t\t\t<div class=\"h4 dark-gray\" style=\"white-space: pre-wrap;\">{{ reviewWords.currentWord.definition }}</div>\\n' +\n    '\t\t\t\t\t<!-- end: definition -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t<!-- pronunciation -->\\n' +\n    '\t\t\t\t\t<button ng-if=\"reviewWords.pronunciation !== null && !reviewWords.finished\" \\n' +\n    '\t\t\t\t\t\t\t\t\tng-click=\"reviewWords.playPronunciation()\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-blue-outline btn-sm mt2 mx-auto center\" style=\"width: 48px; height: 48px; border-radius: 50%;\">\\n' +\n    '\t\t\t\t\t\t<span class=\"ti-control-play\" style=\"margin-left:4px\"></span>\\n' +\n    '\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t<!-- end: pronunciation -->\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- finish message -->\\n' +\n    '\t\t\t\t<div class=\"h2 mb1\" ng-if=\"reviewWords.finished\">All done for the day!</div>\\n' +\n    '\t\t\t\t<!-- finish message -->\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t\t<!-- show answer button -->\\n' +\n    '\t\t<div ng-if=\"!reviewWords.showAnswer\" class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<button ng-click=\"reviewWords.toggleAnswer()\" \\n' +\n    '\t\t\t\t\t\t\tng-disabled=\"reviewWords.finished\"\\n' +\n    '\t\t\t\t\t\t\tclass=\"btn btn-primary mt2 col-12\">Show Answer</button>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: show answer button -->\\n' +\n    '\\n' +\n    '\t\t<!-- review response buttons -->\\n' +\n    '\t\t<div ng-if=\"reviewWords.showAnswer && !reviewWords.finished\" class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t<div class=\"clearfix mxn1\">\\n' +\n    '\t\t\t\t<div class=\"col col-3 px1 red\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, \\'again\\')\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-red mt2 col-12\">Again</button>\\n' +\n    '\t\t\t\t\t<div class=\"h6 gray center mt1\">Can\\'t recall</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div class=\"col col-3 px1 green\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, \\'hard\\')\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-yellow-green mt2 col-12\">Hard</button>\\n' +\n    '\t\t\t\t\t<div class=\"h6 gray center mt1\">Challenging</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div class=\"col col-3 px1 green\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, \\'good\\')\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-green mt2 col-12\">Good</button>\\n' +\n    '\t\t\t\t\t<div class=\"h6 gray center mt1\">Just right</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<div class=\"col col-3 px1 green\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, \\'easy\\')\" \\n' +\n    '\t\t\t\t\t\t\t\t\tclass=\"btn btn-green mt2 col-12\">Easy</button>\\n' +\n    '\t\t\t\t\t<div class=\"h6 gray center mt1\">Too easy</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: review response buttons -->\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"addWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ addWords.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"addWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ addWords.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/main-app.tpl.html',\n    '<div class=\"flex\">\\n' +\n    '\t<div ui-view=\"sidebar\"></div>\\n' +\n    '\t<div ui-view class=\"flex-auto bg-darken-1 py4\" style=\"min-height: 100vh\"></div>\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/logout.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-10 md-col-6 mx-auto center px2\">\\n' +\n    '\t\\n' +\n    '\t\t\t<h1 class=\"mt1 mb2\">Log Out</h1>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"mb3 h4\">Are you sure you want to sign out from Big Vocab?</div>\\n' +\n    '\\n' +\n    '\t\t\t<button class=\"btn btn-blue-outline\" ng-click=\"logout.logout()\">Yes, log me out</button>&nbsp;&nbsp;\\n' +\n    '\t\t\t<button class=\"btn btn-primary\" ng-click=\"logout.goBack()\">No, send me back</button>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/list-words.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<h1 class=\"mt1 mb2 center\">List of All Words<span ng-if=\"listWords.collectionTitle\"> in <span class=\"italic\">{{ listWords.collectionTitle }}</span></span></h1>\\n' +\n    '\\n' +\n    '\t\t<!-- search words form -->\\n' +\n    '\t\t<div class=\"sm-col-6 mx-auto px2\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<form name=\"listWords.listWordsForm\" class=\"center\">\\n' +\n    '\t\t\t\t<span class=\"center bold gray\">Total word count: {{ listWords.wordsCount }}</span>\\n' +\n    '\t\t\t\t<input name=\"searchWords\" type=\"text\" ng-model=\"listWords.formData.searchWords\" class=\"field col-12 mt1 mb3\" placeholder=\"Search any word or definition\">\\n' +\n    '\t\t\t</form>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: search words form -->\\n' +\n    '\\n' +\n    '\t\t<!-- list of words -->\\n' +\n    '\t\t<div class=\"sm-col-10 mx-auto px2\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<div ng-repeat=\"word in listWords.words | filter: listWords.formData.searchWords | orderBy: \\'word\\' | limitTo: listWords.displayLimit\" class=\"clearfix col-12 mb2\" ng-class=\"{ \\'rounded bg-lighten-3 p2 mb3\\': listWords.showEdit[word.id] }\" track by word.id>\\n' +\n    '\t\t\t\t<form name=\"listWordsForm\" ng-submit=\"listWords.saveChanges(listWords.listWordsForm.$valid, word, listWords.formData)\">\\n' +\n    '\\n' +\n    '\t\t\t\t\t<!-- word -->\\n' +\n    '\t\t\t\t\t<div class=\"sm-col sm-col-3 flex flex-center\">\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<!-- pronunciation -->\\n' +\n    '\t\t\t\t\t\t<a ng-click=\"listWords.playPronunciation(word)\" \\n' +\n    '\t\t\t\t\t\t\t class=\"btn btn-blue-outline mr2 center\" style=\"padding: 0.3em 0.24em; border-radius: 50%;\">\\n' +\n    '\t\t\t\t\t\t\t<span class=\"ti-control-play\" style=\"margin-left:4px\"></span>\\n' +\n    '\t\t\t\t\t\t</a>\\n' +\n    '\t\t\t\t\t\t<!-- end: pronunciation -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<a ng-click=\"listWords.toggleEdit(word)\" class=\"link bold\" ng-if=\"!listWords.showEdit[word.id]\">{{ word.word }}</a>\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<!-- edit form -->\\n' +\n    '\t\t\t\t\t\t<a ng-if=\"listWords.showEdit[word.id]\" class=\"ti-close mr1\" ng-click=\"listWords.toggleEdit(word)\"></a>\\n' +\n    '\t\t\t\t\t\t<input name=\"word\" \\n' +\n    '\t\t\t\t\t\t\t\t\t type=\"text\" \\n' +\n    '\t\t\t\t\t\t\t\t\t ng-model=\"listWords.formData.word\" \\n' +\n    '\t\t\t\t\t\t\t\t\t ng-if=\"listWords.showEdit[word.id]\" \\n' +\n    '\t\t\t\t\t\t\t\t\t class=\"field flex-auto mr1\" \\n' +\n    '\t\t\t\t\t\t\t\t\t placeholder=\"{{ listWords.placeholder.word }}\" \\n' +\n    '\t\t\t\t\t\t\t\t\t autofocus required>\\n' +\n    '\t\t\t\t\t\t<!-- end: edit form -->\\n' +\n    '\t\\n' +\n    '\t\t\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t\t\t<div ng-messages=\"listWords.listWordsForm.word.$error\" \\n' +\n    '\t\t\t\t\t\t\t\t ng-if=\"listWords.listWordsForm.$submitted && listWords.listWordsForm.word.$touched\" \\n' +\n    '\t\t\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t\t<!-- end: error handling -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<!-- word -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t<!-- definition -->\\n' +\n    '\t\t\t\t\t<div class=\"sm-col sm-col-9 dark-gray flex flex-start flex-wrap\">\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<div class=\"flex flex-center flex-justify col-12\">\\n' +\n    '\t\t\t\t\t\t\t<span ng-if=\"!listWords.showEdit[word.id]\" class=\"flex-auto\" style=\"white-space: pre-wrap;\">{{ word.definition }}</span>\\n' +\n    '\t\t\t\t\t\t\t<!-- delete button -->\\n' +\n    '\t\t\t\t\t\t\t<a ng-click=\"listWords.submitDelete(word.id)\"\\n' +\n    '\t\t\t\t\t\t\t\t ng-disabled=\"listWords.btnState.success || listWords.btnState.loading\"\\n' +\n    '\t\t\t\t\t\t\t\t ng-if=\"!listWords.showEdit[word.id]\" \\n' +\n    '\t\t\t\t\t\t\t\t class=\"ti-trash red inline-block ml2\">\\n' +\n    '\t\t\t\t\t\t\t</a>\\n' +\n    '\t\t\t\t\t\t\t<!-- end: delete button -->\\n' +\n    '\t\t\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<!-- edit form -->\\n' +\n    '\t\t\t\t\t\t<textarea name=\"definition\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tng-model=\"listWords.formData.definition\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tng-if=\"listWords.showEdit[word.id]\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tclass=\"field flex-auto\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tstyle=\"height: 96px;\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"{{ listWords.placeholder.definition }}\">\\n' +\n    '\t\t\t\t\t\t</textarea>\\n' +\n    '\t\t\t\t\t\t<div class=\"sm-col-4 flex flex-wrap\">\\n' +\n    '\t\t\t\t\t\t\t<!-- save button -->\\n' +\n    '\t\t\t\t\t\t\t<button type=\"submit\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tng-if=\"listWords.showEdit[word.id]\" \\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tng-disabled=\"listWords.btnState.success || listWords.btnState.loading\"\\n' +\n    '\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-form btn-primary col-12 ml1\">\\n' +\n    '\t\t\t\t\t\t\t\t<span ng-if=\"!listWords.btnState.loading && !listWords.btnState.success\">Save Changes</span>\\n' +\n    '\t\t\t\t\t\t\t\t<span ng-if=\"listWords.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t\t\t\t<span ng-if=\"listWords.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t\t\t<!-- end: save button -->\\n' +\n    '\t\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t\t<!-- end: edit form -->\\n' +\n    '\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<!-- end: definition -->\\n' +\n    '\\n' +\n    '\t\t\t\t</form>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t\t\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: list of words -->\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"listWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ listWords.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"listWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ listWords.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '<!-- modal -->\\n' +\n    '<modal show=\"listWords.showModal\" \\n' +\n    '\t      modal-bg=\"bg-white\" \\n' +\n    '\t      yes-cb=\"listWords.modalYes(listWords.selectedWordId)\" \\n' +\n    '\t      no-cb=\"listWords.modalClose()\"\\n' +\n    '\t      yes-message=\"Yes, delete\"\\n' +\n    '\t      no-message=\"No, cancel\">\\n' +\n    '\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\\n' +\n    '</modal>\\n' +\n    '<!-- end: modal -->');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/import.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<div class=\"sm-col-10 md-col-6 mx-auto center px2\">\\n' +\n    '\t\\n' +\n    '\t\t\t<h1 class=\"mt1 mb2\">Import from Anki</h1>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"mb3\">If you upload multiple files, it will merge them and input it into a single collection. If you want each text file to have its own collection, upload one file at a time.</div>\\n' +\n    '\\n' +\n    '\t\t\t<form name=\"import.importForm\" \\n' +\n    '\t\t\t\t\t\tng-submit=\"import.importTextfile(import.importForm.$valid, import.formData)\"\\n' +\n    '\t\t\t\t\t\tnovalidate>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mb1 bold\">Title of the collection to be imported</div>\\n' +\n    '\t\t\t\t<input name=\"collectionTitle\" type=\"text\" ng-model=\"import.formData.collectionTitle\" class=\"field col-12\" placeholder=\"{{ import.placeholder.collectionTitle }}\" autofocus required>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t<div ng-messages=\"import.importForm.collectionTitle.$error\" \\n' +\n    '\t\t\t\t\t\t ng-if=\"import.importForm.$submitted && import.importForm.collectionTitle.$touched\" \\n' +\n    '\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: error handling -->\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mt3 mb1 bold\">Anki text file (i.e. anki-collection-2015.txt)</div>\\n' +\n    '\t\t\t\t<div class=\"file-input\">\\n' +\n    '\t\t\t\t\tClick here to upload your files<span class=\"ti-folder ml1\">\\n' +\n    '\t\t\t\t\t<input name=\"files\" type=\"file\" multiple=\"multiple\" accept=\".txt\" fileread=\"import.formData.files\" class=\"field col-12\" style=\"cursor: pointer; margin-bottom: none\" placeholder=\"{{ import.placeholder.files }}\" required>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- file names -->\\n' +\n    '\t\t\t\t<div class=\"mt1\">\\n' +\n    '\t\t\t\t\t<div ng-repeat=\"file in import.formData.files\" track by $index>{{ file.name }}</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: file names -->\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t<div ng-messages=\"import.importForm.files.$error\" \\n' +\n    '\t\t\t\t\t\t ng-if=\"import.importForm.$submitted\" \\n' +\n    '\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: error handling -->\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- submit button -->\\n' +\n    '\t\t\t\t<button type=\"submit\" class=\"btn btn-primary mt3 mb2\" ng-disabled=\"import.btnState.success || import.btnState.loading\">\\n' +\n    '\t\t\t\t\t<span ng-if=\"!import.btnState.loading && !import.btnState.success\">Import Anki Text File<span class=\"ti-import ml1\"></span></span>\\n' +\n    '\t\t\t\t\t<span ng-if=\"import.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t<span ng-if=\"import.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t</button>\\n' +\n    '\t\t\t\t<!-- end: submit button -->\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"import.notification.success\"><span class=\"ti-check mr1\"></span>{{ import.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"import.notification.error\"><span class=\"ti-alert mr1\"></span>{{ import.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/collections.tpl.html',\n    '<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t<h1 class=\"mt1 center\">My Collections&nbsp;&nbsp;<a ng-click=\"collections.toggleEdit()\" ng-if=\"collections.collectionList.length >= 1\" class=\"h5 gray underline\">Edit</a></h1>\\n' +\n    '\\n' +\n    '\t<!-- edit collection options -->\\n' +\n    '\t<div class=\"md-col-10 lg-col-8 mx-auto px2\" ng-if=\"collections.showEdit\">\\n' +\n    '\t\t<button class=\"btn btn-sm btn-yellow-green h6 mb2\" ng-click=\"collections.mergeCollections(collections.collectionList, collections.checks)\">Merge Selected</button>\\n' +\n    '\t\t<button class=\"btn btn-sm btn-red h6 ml1 mb2\" ng-click=\"collections.showConfirmDeleteModal(collections.collectionList, collections.checks)\">Delete Selected</button>\\n' +\n    '\t</div>\\n' +\n    '\t<!-- end: edit collection options -->\\n' +\n    '\\n' +\n    '\t<div class=\"md-col-10 lg-col-8 mx-auto px2\">\\n' +\n    '\\n' +\n    '\t\t<!-- collection list -->\\n' +\n    '\t\t<div class=\"clearfix bg-white rounded p1 mb2 ng-animation-fadeInUp\" ng-repeat=\"collection in collections.collectionList | orderBy: \\'id\\'\">\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"sm-col sm-col-7\">\\n' +\n    '\t\t\t\t\\n' +\n    '\t\t\t\t<!-- select collection -->\\n' +\n    '\t\t\t\t<input type=\"checkbox\" style=\"margin-left: 8px; margin-right: -16px;\" ng-model=\"collections.checks[collection.id]\" ng-if=\"collections.showEdit\">\\n' +\n    '\t\t\t\t<!-- end: select collection -->\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"btn btn-md bold ml1 mt1 mb1\" style=\"cursor: text\">{{ collection.title }} <span class=\"gray\">(due: {{ collection.dueWordCount }}, new: {{ collection.newWordCount }} )</span></div>\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"sm-col sm-col-5 flex flex-wrap\">\\n' +\n    '\t\t\t\t<a ui-sref=\"mainApp.review-words({ collectionId: collection.id })\" class=\"btn btn-md btn-primary flex-auto center m1 h5\">Study<span class=\"ti-arrow-right ml1\"></span></a>\\n' +\n    '\t\t\t\t<a ui-sref=\"mainApp.add-words({ collectionId: collection.id })\" class=\"btn btn-md btn-blue-outline center dark-gray m1 h5\"><span class=\"ti-plus\"></span></a>\\n' +\n    '\t\t\t\t<a ui-sref=\"mainApp.list-words\" class=\"btn btn-md btn-blue-outline center dark-gray m1 h5\"><span class=\"ti-list\"></span></a>\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: collection list -->\\n' +\n    '\\n' +\n    '\t\t<!-- add collection -->\\n' +\n    '\t\t<div class=\"clearfix bg-light-green px2 py2 mt3 rounded\">\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"center\">\\n' +\n    '\t\t\t\t<div class=\"caps bold m1\">Add Collection</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t<form name=\"collections.addCollectionForm\" \\n' +\n    '\t\t\t\t\t\tng-submit=\"collections.createCollection(collections.addCollectionForm.$valid, { \\n' +\n    '\t\t\t\t\t\t\tuserId: collections.user.id,\\n' +\n    '\t\t\t\t\t\t\ttitle: collections.formData.collectionTitle \\n' +\n    '\t\t\t\t\t\t})\"\\n' +\n    '\t\t\t\t\t\tnovalidate>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col sm-col-8 p1\">\\n' +\n    '\t\t\t\t\t<input name=\"collectionTitle\" type=\"text\" ng-model=\"collections.formData.collectionTitle\" class=\"field col-12\" placeholder=\"{{ collections.placeholder.collectionTitle }}\" required>\\n' +\n    '\\n' +\n    '\t\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t\t<div ng-messages=\"collections.addCollectionForm.collectionTitle.$error\" \\n' +\n    '\t\t\t\t\t\t\t ng-if=\"collections.addCollectionForm.$submitted && collections.addCollectionForm.collectionTitle.$touched\" \\n' +\n    '\t\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<!-- end: error handling -->\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- submit button -->\\n' +\n    '\t\t\t\t<div class=\"sm-col sm-col-4 p1\">\\n' +\n    '\t\t\t\t\t<button type=\"submit\" class=\"btn btn-form btn-green col-12\" ng-disabled=\"collections.btnState.success || collections.btnState.loading\">\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"!collections.btnState.loading && !collections.btnState.success\">Add Collection</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"collections.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"collections.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: submit button -->\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: add collection -->\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"collections.notification.success\"><span class=\"ti-check mr1\"></span>{{ collections.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"collections.notification.error\"><span class=\"ti-alert mr1\"></span>{{ collections.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '<!-- modal -->\\n' +\n    '<modal show=\"collections.showModal\" \\n' +\n    '\t      modal-bg=\"bg-white\" \\n' +\n    '\t      yes-cb=\"collections.confirmModal()\" \\n' +\n    '\t      no-cb=\"collections.closeModal()\" \\n' +\n    '\t      yes-message=\"Yes, delete\" \\n' +\n    '\t      no-message=\"No, abort\">\\n' +\n    '\t<div class=\"center h3\">Are you sure you want to delete the selected collection(s)?</div>\\n' +\n    '</modal>\\n' +\n    '<!-- end: modal -->');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('main-app/add-words.tpl.html',\n    '<div class=\"container\">\\n' +\n    '\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t<h1 class=\"mt1 mb3 center\">Add New Words</h1>\\n' +\n    '\\n' +\n    '\t\t<!-- add words form -->\\n' +\n    '\t\t<div class=\"md-col md-col-6 px2\">\\n' +\n    '\\n' +\n    '\t\t\t<form name=\"addWords.addWordForm\" \\n' +\n    '\t\t\t\t\t\tng-submit=\"addWords.submit(addWords.addWordForm.$valid, addWords.collectionId, addWords.formData)\"\\n' +\n    '\t\t\t\t\t\tnovalidate>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mb1 bold\">WORD</div>\\n' +\n    '\t\t\t\t<input name=\"word\" type=\"text\" ng-model=\"addWords.formData.word\" ng-blur=\"addWords.getDefinition(addWords.formData.word)\" class=\"field col-12\" placeholder=\"{{ addWords.placeholder.word }}\" autofocus required>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- error handling -->\\n' +\n    '\t\t\t\t<div ng-messages=\"addWords.addWordForm.word.$error\" \\n' +\n    '\t\t\t\t\t\t ng-if=\"addWords.addWordForm.$submitted && addWords.addWordForm.word.$touched\" \\n' +\n    '\t\t\t\t\t\t class=\"red bold h6 mt1\">\\n' +\n    '\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: error handling -->\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"mb1 mt2 bold\">MEANING</div>\\n' +\n    '\t\t\t\t<textarea name=\"definition\" ng-model=\"addWords.formData.definition\" class=\"field col-12\" style=\"height: 160px;\" placeholder=\"{{ addWords.placeholder.definition }}\"></textarea>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"flex flex-justify\">\\n' +\n    '\t\t\t\t\t<button ng-click=\"addWords.resetForm()\" class=\"btn btn-outline mt2 mb2\">Reset Form</button>\\n' +\n    '\t\t\t\t\t\\n' +\n    '\t\t\t\t\t<!-- submit button -->\\n' +\n    '\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary mt2 mb2\" ng-disabled=\"addWords.btnState.success || addWords.btnState.loading\">\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"!addWords.btnState.loading && !addWords.btnState.success\"><span class=\"ti-plus mr1\"></span>Add Word</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"addWords.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\\n' +\n    '\t\t\t\t\t\t<span ng-if=\"addWords.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\\n' +\n    '\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t<!-- end: submit button -->\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t</form>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- end: add words form -->\\n' +\n    '\\n' +\n    '\t\t<!-- definitions from dictionary API -->\\n' +\n    '\t\t<div class=\"md-col md-col-6 px2\">\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"bold gray mb2\">Word definitions from <span class=\"italic\">The American Heritage® Dictionary of the English Language, 4th Edition</span></div>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"bg-light-green rounded p2 mb2 near-black ng-animation-fadeInUp\" ng-repeat=\"definition in addWords.definitions\">\\n' +\n    '\t\t\t\t<div class=\"flex flex-center\">\\n' +\n    '\t\t\t\t\t<div class=\"flex-none\" style=\"width: 52px\">\\n' +\n    '\t\t\t\t\t\t<a ng-click=\"addWords.copyDefinition(definition.text)\" class=\"btn btn-sm btn-green-outline\" tabindex=\"-1\"><span class=\"ti-plus\"></span></a>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<div class=\"h5\">{{ definition.text }}</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t\t<!-- definitions from dictionary API -->\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- notification -->\\n' +\n    '<notification color=\"green\" show=\"addWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ addWords.notificationSuccessMsg }}</notification>\\n' +\n    '<notification color=\"red\" show=\"addWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ addWords.notificationErrorMsg }}</notification>\\n' +\n    '<!-- end: notification -->\\n' +\n    '\\n' +\n    '<!-- modal -->\\n' +\n    '<modal show=\"addWords.showModal\" \\n' +\n    '\t      modal-bg=\"bg-white\" \\n' +\n    '\t      yes-cb=\"addWords.modalYes(addWords.collectionId, addWords.formData)\" \\n' +\n    '\t      no-cb=\"addWords.modalNo(addWords.collectionId, addWords.formData)\"\\n' +\n    '\t      yes-message=\"Yes, overwrite\"\\n' +\n    '\t      no-message=\"No, add new\"\\n' +\n    '\t      add-abort-button>\\n' +\n    '\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\\n' +\n    '</modal>\\n' +\n    '<!-- end: modal -->');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('home/root.tpl.html',\n    '<div ui-view=\"nav-home\"></div>\\n' +\n    '<div ui-view></div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('home/nav-home.tpl.html',\n    '<div class=\"fixed white border-bottom border-lighten-2\" style=\"width: 100%\">\\n' +\n    '\t<div class=\"container\">\\n' +\n    '\t\t<div class=\"flex flex-center\">\\n' +\n    '\t\t\t<a class=\"btn btn-sm\" ui-sref=\"root.home\">\\n' +\n    '\t\t\t\t<img src=\"../images/logo/bigvocab-logo-white.svg\" width=\"50px\" />\\n' +\n    '\t\t\t</a>\\n' +\n    '\\n' +\n    '\t\t\t<div class=\"flex-auto\"></div>\\n' +\n    '\\n' +\n    '\t\t\t<div>\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- nav items -->\\n' +\n    '\t\t\t\t<a ui-sref=\"root.home\" ng-click=\"navHome.setActive(\\'home\\')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{\\'bold muted-0\\': navHome.active === \\'home\\'}\">Home</a>\\n' +\n    '\t\t\t\t<a ui-sref=\"root.features\" ng-click=\"navHome.setActive(\\'features\\')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{\\'bold muted-0\\': navHome.active === \\'features\\'}\">How it works</a>\\n' +\n    '\t\t\t\t<!--<a ui-sref=\"root.about\" ng-click=\"navHome.setActive(\\'about\\')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{\\'bold muted-0\\': navHome.active === \\'about\\'}\">About</a>-->\\n' +\n    '\t\t\t\t<!-- end: nav items -->\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- login button -->\\n' +\n    '\t\t\t\t<a href=\"/auth/google\" ng-if=\"!navHome.user\" class=\"btn btn-outline btn-sm ml2 mr2 py2 h6\">Login&nbsp;&rarr;</a>\\n' +\n    '\t\t\t\t<!-- end: login button -->\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('home/home.tpl.html',\n    '<div class=\"bg-cover bg-gradient-home\">\\n' +\n    '\\n' +\n    '\t<div class=\"flex flex-center\" style=\"min-height: 100vh;\">\\n' +\n    '\t\t<div class=\"container flex-auto\">\\n' +\n    '\t\t\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col-6 p2 mx-auto white center\">\\n' +\n    '\t\t\t\t\t<div class=\"h1 light\">Big Vocab</div>\\n' +\n    '\t\t\t\t\t<p>Big Vocab uses a method called Spaced Repetition to improve word recall. Think of it as a virtual flash card that\\'s optimized to help you remember more words.</p>\\n' +\n    '\t\t\t\t\t<a ui-sref=\"root.auth.register\" class=\"btn btn-red\">Sign Up</a>&nbsp;&nbsp;\\n' +\n    '\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-outline\">Login</a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('common/spinner-directive.tpl.html',\n    '<img src=\"../images/spinner/oval-sm.svg\" class=\"mr1\" width=\"{{ width }}\">');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('common/notification-directive.tpl.html',\n    '<div ng-if=\"show\" class=\"rounded bg-{{color}} px3 py2 fixed white h5 ng-animation-fadeInUp\" style=\"top: 24px; right: 24px; max-width: 240px;\">\\n' +\n    '\t<div ng-transclude></div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('common/modal-directive.tpl.html',\n    '<!-- overlay -->\\n' +\n    '<div ng-if=\"show\" class=\"fixed z2 top-0 right-0 bottom-0 left-0 bg-darken-3\" ng-click=\"closeModal()\">\\n' +\n    '</div>\\n' +\n    '<!-- end: overlay -->\\n' +\n    '\\n' +\n    '<div ng-if=\"show\" class=\"fixed z3 top-0 right-0 bottom-0 left-0 ng-animation-fadeInUp\">\\n' +\n    '\t<div class=\"flex flex-center flex-center-justified px2\" style=\"width: 100%; height: 100vh;\">\\n' +\n    '\t\t<div class=\"sm-col-8 md-col-7 lg-col-5 relative {{ modalBg }}\">\\n' +\n    '\t\t\t\\n' +\n    '\t\t\t<!-- close button -->\\n' +\n    '\t\t\t<div>\\n' +\n    '\t\t\t\t<a class=\"ti-close absolute right-0 h3 p3\" ng-click=\"closeModal()\"></a>\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t\t<!-- end: close button -->\\n' +\n    '\\n' +\n    '\t\t\t<!-- content -->\\n' +\n    '\t\t\t<div class=\"px4 py3 mt1\">\\n' +\n    '\t\t\t\t<div ng-transclude></div>\\n' +\n    '\t\t\t\t<!-- end: content -->\\n' +\n    '\\n' +\n    '\t\t\t\t<!-- buttons -->\\n' +\n    '\t\t\t\t<div class=\"center mt1 mb1\">\\n' +\n    '\t\t\t\t\t<button class=\"btn btn-primary mt2\" ng-click=\"yesCb(); closeModal()\" ng-if=\"showYesBtn\">{{ yesMessage }}</button>&nbsp;&nbsp;\\n' +\n    '\t\t\t\t\t<button class=\"btn btn-primary mt2\" ng-click=\"noCb(); closeModal()\" ng-if=\"showNoBtn\">{{ noMessage }}</button>&nbsp;&nbsp;\\n' +\n    '\t\t\t\t\t<button class=\"btn btn-red mt2\" ng-click=\"closeModal()\" ng-if=\"showAbortBtn\">Cancel</button>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\t\t\t\t<!-- end: buttons -->\\n' +\n    '\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('auth/register.tpl.html',\n    '<div class=\"bg-cover bg-gradient-navy\">\\n' +\n    '\\n' +\n    '\t<div class=\"flex flex-center\" style=\"min-height: 100vh\">\\n' +\n    '\t\t<div class=\"container-sm flex-auto\">\\n' +\n    '\t\t\t<div class=\"clearfix white\">\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col sm-col-8 px2 mb3\">\\n' +\n    '\t\t\t\t\t<div class=\"h2 light mb2\">Sign Up</div>\\n' +\n    '\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-primary\">Sign up with Your Google Account</a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col sm-col-4 px2\">\\n' +\n    '\t\t\t\t\t<div class=\"border border-lighten-3 p2\">\\n' +\n    '\t\t\t\t\t\t<p>Already have an account?</p>\\n' +\n    '\t\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-outline block\">Login with Google</a>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('auth/login.tpl.html',\n    '<div class=\"bg-cover bg-gradient-navy\">\\n' +\n    '\\n' +\n    '\t<div class=\"flex flex-center\" style=\"min-height: 100vh;\">\\n' +\n    '\t\t<div class=\"container flex-auto\">\\n' +\n    '\t\t\t<div class=\"clearfix\">\\n' +\n    '\\n' +\n    '\t\t\t\t<div class=\"sm-col-6 p2 mx-auto white center\">\\n' +\n    '\t\t\t\t\t<div class=\"h1 light mb2\">Login to Big Vocab</div>\\n' +\n    '\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-red\">Login with Google</a>\\n' +\n    '\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\t\t\t</div>\\n' +\n    '\t\t</div>\\n' +\n    '\t</div>\\n' +\n    '\\n' +\n    '</div>');\n}]);\n\nangular.module('bigvocab').run(['$templateCache', function($templateCache) {\n  $templateCache.put('auth/auth.tpl.html',\n    '<div ui-view=\"root.nav-home\"></div>\\n' +\n    '<div ui-view></div>');\n}]);\n\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name mainApp\n   * @description\n   *\n   */\n  angular.module('mainApp', ['ui.router']);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name mainApp.factory:WordsService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').factory('WordsService', WordsService);\n\n  function WordsService($http) {\n\n    var WordsServiceBase = {};\n\n    // every word for this user\n    WordsServiceBase.getUserAll = function (userId) {\n      return $http.get('/api/words/all/' + userId);\n    };\n\n    // all words for this collection\n    WordsServiceBase.getAll = function (collectionId) {\n      return $http.get('/api/' + collectionId + '/words');\n    };\n\n    WordsServiceBase.create = function (word) {\n      return $http.post('/api/words', word);\n    };\n\n    WordsServiceBase.get = function (wordId) {\n      return $http.get('/api/words/' + wordId);\n    };\n\n    // find :: String -> String -> Promise({word})\n    WordsServiceBase.find = function (collectionId, word) {\n      return $http.get('/api/' + collectionId + '/words/' + word);\n    };\n\n    // find :: String -> String -> Promise({word})\n    WordsServiceBase.exists = function (collectionId, word) {\n      return $http.get('/api/' + collectionId + '/words/' + word + '/?exists');\n    };\n\n    // get only the words to be reviewed today\n    WordsServiceBase.getDue = function (collectionId) {\n      return $http.get('/api/' + collectionId + '/words/?filter=dueToday');\n    };\n\n    WordsServiceBase.update = function (wordId, wordUpdate) {\n      return $http.put('/api/words/' + wordId, wordUpdate);\n    };\n\n    WordsServiceBase['delete'] = function (wordId) {\n      return $http['delete']('/api/words/' + wordId);\n    };\n\n    return WordsServiceBase;\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var TestWordsCtrl = function TestWordsCtrl() {\n    _classCallCheck(this, TestWordsCtrl);\n\n    var vm = this;\n    vm.ctrlName = 'TestWordsCtrl';\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:TestWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('TestWordsCtrl', TestWordsCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var SidebarCtrl = function SidebarCtrl() {\n    _classCallCheck(this, SidebarCtrl);\n\n    var vm = this;\n\n    vm.toggle = false;\n    vm.toggleSidebar = function () {\n      vm.toggle = !vm.toggle;\n    };\n\n    vm.navItems = [{\n      id: 1,\n      title: 'Collections',\n      icon: 'ti-layers-alt',\n      link: 'mainApp.collections'\n    }, {\n      id: 2,\n      title: 'View All Words',\n      icon: 'ti-list',\n      link: 'mainApp.list-words'\n    },\n    // {\n    //   id: 3,\n    //   title: 'Test',\n    //   icon: 'ti-check-box',\n    //   link: 'mainApp.test-words'\n    // },\n    {\n      id: 4,\n      title: 'Import',\n      icon: 'ti-import',\n      link: 'mainApp.import'\n    }, {\n      id: 5,\n      title: 'Settings',\n      icon: 'ti-settings',\n      link: 'mainApp.settings'\n    }, {\n      id: 6,\n      title: 'Log Out',\n      icon: 'ti-arrow-left',\n      link: 'mainApp.logout'\n    }];\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:SidebarCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('SidebarCtrl', SidebarCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name mainApp.factory:SettingsService\n   *\n   * @description\n   *\n   */\n  angular.module('mainApp').factory('SettingsService', SettingsService);\n\n  function SettingsService($http) {\n\n    var SettingsServiceBase = {};\n\n    SettingsServiceBase.update = function (userId, settingsUpdate) {\n      return $http.put('/api/users/' + userId, settingsUpdate);\n    };\n\n    return SettingsServiceBase;\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var SettingsCtrl = function SettingsCtrl(SettingsService, user, $timeout) {\n    _classCallCheck(this, SettingsCtrl);\n\n    var vm = this;\n\n    // config ////////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.formData.maxDailyWords = user.maxDailyWords;\n\n    vm.placeholder = {\n      maxDailyWords: 'i.e. 100 (default: 150)'\n    };\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Change successfully saved!',\n      error: 'Something went wrong. Please try again.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n\n    // helper functions /////////////////////////////////////////////////////////////////\n\n    function changeSettings(userId, maxDailyWords) {\n      var settingsUpdate = { maxDailyWords: maxDailyWords };\n      console.log(settingsUpdate);\n\n      return SettingsService.update(userId, settingsUpdate);\n    }\n\n    // main //////////////////////////////////////////////////////////////////////////////\n\n    vm.saveSettings = function (maxDailyWords) {\n      changeSettings(user.id, maxDailyWords).then(function (dbRes) {\n\n        console.log(dbRes);\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.notification.success = true;\n\n        $timeout(function () {\n          vm.btnState.success = false;\n        }, 1500);\n      })['catch'](function (err) {\n        vm.btnState.loading = false;\n\n        vm.notification.error = true;\n      });\n    };\n  };\n\n  /**\n   * @ngdoc object\n   * @name mainApp.controller:SettingsCtrl\n   *\n   * @description\n   *\n   */\n  angular.module('mainApp').controller('SettingsCtrl', SettingsCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var ReviewWordsCtrl = function ReviewWordsCtrl(WordsService, $stateParams, $moment, Sm2Service, ConfigService, DictionaryService, TextConvertService, $sce, ngAudio) {\n    _classCallCheck(this, ReviewWordsCtrl);\n\n    var vm = this;\n\n    // config ////////////////////////////////////////////////////////////////////////////\n\n    var collectionId = $stateParams.collectionId;\n    vm.wordCounter = 0; // keeps track of which word user is reviewing\n    vm.showAnswer = false;\n    vm.editToggle = false;\n    vm.formData = {};\n    vm.finished = false;\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Change successfully saved!',\n      error: 'Something went wrong. Please try again.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n\n    // init //////////////////////////////////////////////////////////////////////////////\n\n    WordsService.getDue(collectionId).then(function (res) {\n      vm.words = angular.fromJson(res).data;\n      vm.totalWordsCount = vm.words.length;\n\n      vm.currentWord = getCurrentWord(vm.wordCounter, vm.words);\n\n      // get pronunciation of the current word\n      return DictionaryService.getPronunciation(ConfigService.forvoKey, vm.currentWord.word);\n    }).then(function (pronunciationPath) {\n      vm.pronunciation = pronunciationPath !== null ? ngAudio.load(pronunciationPath) : null;\n\n      // initialize the edit form inputs\n      initEditWord(vm.currentWord);\n    })['catch'](errorHandler);\n\n    // helper functions /////////////////////////////////////////////////////////////////\n\n    function errorHandler(err) {\n      console.log('Something went wrong: ', err);\n    }\n\n    function getCurrentWord(wordCounter, words) {\n      var currentWord = words[wordCounter];\n      console.log(words);\n      currentWord.definition = TextConvertService.fromHtml(currentWord.definition);\n\n      return currentWord;\n    }\n\n    function initEditWord(currentWord) {\n      vm.formData.word = currentWord.word;\n      vm.formData.definition = currentWord.definition;\n    }\n\n    // main //////////////////////////////////////////////////////////////////////////////\n\n    vm.toggleAnswer = function () {\n      vm.showAnswer = !vm.showAnswer;\n    };\n\n    vm.toggleEdit = function () {\n      vm.editToggle = !vm.editToggle;\n    };\n\n    vm.playPronunciation = function () {\n      if (vm.pronunciation !== null) {\n        vm.pronunciation.play();\n      }\n    };\n\n    vm.submitEdit = function (wordId, word, definition) {\n      var wordUpdate = {\n        word: word,\n        definition: TextConvertService.toHtml(definition)\n      };\n\n      WordsService.update(wordId, wordUpdate).then(function () {\n        vm.currentWord.word = word;\n        vm.currentWord.definition = TextConvertService.fromHtml(definition);\n\n        vm.notification.success = true;\n\n        vm.toggleEdit();\n      })['catch'](function (err) {\n        vm.notification.error = true;\n        console.log('Something went wrong: ', err);\n      });\n    };\n\n    vm.submitRes = function (word, choice) {\n\n      var newEaseFactor = Sm2Service.calcEaseFactor(word.easeFactor, choice);\n      var newPhase = Sm2Service.calcPhase(word.phase, word.interval, choice);\n      var newInterval = Sm2Service.calcInterval(word.phase, word.interval, word.easeFactor, choice);\n      var lastReviewed = $moment();\n      var lastReviewedEpochTime = lastReviewed.unix();\n      var newNextReview = Sm2Service.calcNextReview(newInterval);\n      var newNextReviewEpochTime = newNextReview.unix();\n\n      var newReviewRes = angular.copy(word.reviewRes);\n      newReviewRes[choice]++;\n\n      var wordUpdate = {\n        reviewRes: newReviewRes,\n        lastReviewedEpochTime: lastReviewedEpochTime,\n        easeFactor: newEaseFactor,\n        phase: newPhase,\n        interval: newInterval,\n        nextReviewEpochTime: newNextReviewEpochTime\n      };\n\n      WordsService.update(word.id, wordUpdate).then(function () {\n        vm.wordCounter++;\n        vm.currentWord = vm.words[vm.wordCounter];\n\n        if (vm.currentWord === undefined) {\n          vm.finished = true;\n        } else {\n          vm.currentWord.definition = TextConvertService.fromHtml(vm.currentWord.definition);\n\n          // get pronunciation of the current word\n          return DictionaryService.getPronunciation(ConfigService.forvoKey, vm.currentWord.word);\n        }\n      }).then(function (pronunciationPath) {\n        vm.pronunciation = pronunciationPath !== null ? ngAudio.load(pronunciationPath) : null;\n\n        vm.toggleAnswer();\n\n        // intialize edit fields\n        initEditWord(vm.currentWord);\n      })['catch'](function (err) {\n        console.log('Something went wrong: ', err);\n        vm.toggleAnswer();\n      });\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ReviewWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('ReviewWordsCtrl', ReviewWordsCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('mainApp').config(config);\n\n  function config($stateProvider) {\n    $stateProvider.state('mainApp', {\n      abstract: true,\n      url: '/main-app',\n      views: {\n        '': {\n          templateUrl: 'main-app/main-app.tpl.html'\n        },\n        'sidebar@mainApp': {\n          templateUrl: 'main-app/sidebar.tpl.html',\n          controller: 'SidebarCtrl',\n          controllerAs: 'sidebar'\n        }\n      }\n    }).state('mainApp.collections', {\n      url: '/collections',\n      templateUrl: 'main-app/collections.tpl.html',\n      controller: 'CollectionsCtrl',\n      controllerAs: 'collections',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.add-words', {\n      url: '/collections/:collectionId/add-words',\n      templateUrl: 'main-app/add-words.tpl.html',\n      controller: 'AddWordsCtrl',\n      controllerAs: 'addWords',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.review-words', {\n      url: '/collections/:collectionId/review-words',\n      templateUrl: 'main-app/review-words.tpl.html',\n      controller: 'ReviewWordsCtrl',\n      controllerAs: 'reviewWords',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.list-words', {\n      url: '/list-words',\n      templateUrl: 'main-app/list-words.tpl.html',\n      controller: 'ListWordsCtrl',\n      controllerAs: 'listWords',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.test-words', {\n      url: '/test-words',\n      templateUrl: 'main-app/test-words.tpl.html',\n      controller: 'TestWordsCtrl',\n      controllerAs: 'testWords',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.logout', {\n      url: '/logout',\n      templateUrl: 'main-app/logout.tpl.html',\n      controller: 'LogoutCtrl',\n      controllerAs: 'logout',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.import', {\n      url: '/import',\n      templateUrl: 'main-app/import.tpl.html',\n      controller: 'ImportCtrl',\n      controllerAs: 'import',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    }).state('mainApp.settings', {\n      url: '/settings',\n      templateUrl: 'main-app/settings.tpl.html',\n      controller: 'SettingsCtrl',\n      controllerAs: 'settings',\n      resolve: {\n        user: function user(AuthService) {\n          return AuthService.checkLoggedIn();\n        }\n      }\n    });\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var LogoutCtrl = function LogoutCtrl(AuthService, $window) {\n    _classCallCheck(this, LogoutCtrl);\n\n    var vm = this;\n\n    vm.logout = function () {\n      AuthService.logout().then(function () {\n        console.log('User logged out successfully');\n        $window.location = '/#/home';\n      })['catch'](function (err) {\n        console.log('Something went wrong: ', err);\n      });\n    };\n\n    vm.goBack = function () {\n      $window.history.go(-1);\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:LogoutCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('LogoutCtrl', LogoutCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var ListWordsCtrl = function ListWordsCtrl(CollectionsService, WordsService, TextConvertService, ConfigService, DictionaryService, $timeout, user, ngAudio) {\n    _classCallCheck(this, ListWordsCtrl);\n\n    var vm = this;\n\n    // config ////////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.showEdit = {};\n    vm.displayLimit = 200;\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Change successfully saved!',\n      deleteSuccess: 'Word deleted succesfully',\n      error: 'Something went wrong. Please try again.',\n      pronunciationError: 'Sorry - pronunciation for this word cannot be found.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n\n    // init //////////////////////////////////////////////////////////////////////////////\n\n    getAllWords(user.id);\n\n    // helper functions //////////////////////////////////////////////////////////////////\n\n    function submitErrorHandler(err) {\n      vm.btnState.loading = false;\n      vm.notification.error = true;\n      console.log('Something went wrong: ', err);\n    }\n\n    function getAllWords(userId) {\n      WordsService.getUserAll(userId).then(function (res) {\n        var words = angular.fromJson(res).data;\n\n        vm.words = words;\n        vm.wordsCount = words.length;\n\n        vm.words.map(function (word) {\n          word.definition = TextConvertService.fromHtml(word.definition);\n          return word;\n        });\n\n        initShowEdit(words);\n      })['catch'](submitErrorHandler);\n    }\n\n    function initShowEdit(words) {\n      words.map(function (word) {\n        vm.showEdit[word.id] = false;\n        return word;\n      });\n    }\n\n    // main //////////////////////////////////////////////////////////////////////////////\n\n    vm.toggleEdit = function (word) {\n      vm.formData.word = word.word;\n      vm.formData.definition = word.definition;\n\n      vm.showEdit[word.id] = !vm.showEdit[word.id];\n    };\n\n    vm.modalYes = function (wordId) {\n      WordsService['delete'](wordId).then(function () {\n        // update the current view to reflect the removal\n        var currentWord = vm.words.filter(function (currentWord) {\n          return currentWord.id === wordId;\n        })[0];\n        var index = vm.words.indexOf(currentWord);\n        vm.words.splice(index, 1);\n\n        vm.notificationSuccessMsg = vm.msg.deleteSuccess;\n        vm.notification.success = true;\n      })['catch'](submitErrorHandler);\n    };\n\n    vm.modalClose = function () {\n      vm.showModal = false;\n      // delete the item on local\n    };\n\n    vm.playPronunciation = function (word) {\n      DictionaryService.getPronunciation(ConfigService.forvoKey, word.word).then(function (pronunciationPath) {\n        vm.pronunciation = pronunciationPath !== null ? ngAudio.load(pronunciationPath) : null;\n        if (vm.pronunciation !== null) {\n          vm.pronunciation.play();\n        } else {\n          vm.notificationErrorMsg = vm.msg.pronunciationError;\n          vm.notification.error = true;\n        }\n      })['catch'](function (err) {\n        console.log('Something went wrong: ', err);\n      });\n    };\n\n    vm.saveChanges = function (isValid, word, formData) {\n      if (!isValid) {\n        return;\n      }\n\n      WordsService.update(word.id, formData).then(function () {\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.notificationSuccessMsg = vm.msg.success;\n        vm.notification.success = true;\n\n        $timeout(function () {\n          vm.btnState.success = false;\n\n          vm.showEdit[word.id] = !vm.showEdit[word.id];\n\n          // update the current view to reflect the change\n          vm.words.map(function (currentWord) {\n            if (currentWord.id === word.id) {\n              currentWord.word = vm.formData.word;\n              currentWord.definition = TextConvertService.fromHtml(vm.formData.definition);\n            }\n\n            return currentWord;\n          });\n        }, 1500);\n      })['catch'](submitErrorHandler);\n    };\n\n    vm.submitDelete = function (wordId) {\n      vm.showModal = true;\n      vm.selectedWordId = wordId;\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ListWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('ListWordsCtrl', ListWordsCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var ImportCtrl = function ImportCtrl(ImportService, WordsService, DictionaryService, ConfigService, SettingsService, user, $timeout, $window, $q) {\n    _classCallCheck(this, ImportCtrl);\n\n    var vm = this;\n\n    // config ///////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.placeholder = {\n      files: 'Click to upload anki text files',\n      collectionTitle: 'Add collection title here'\n    };\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Words successfully imported!',\n      error: 'Something went wrong. Please try again.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n\n    // helper functions /////////////////////////////////////////////////////////////////\n\n    function importTextfile(userId, data) {\n\n      vm.btnState.loading = true;\n\n      var promises = [ImportService.anki(userId, data), SettingsService.update(user.id, { maxWords: 150 })];\n\n      $q.all(promises).then(function (dbRes) {\n        var dbResData = angular.fromJson(dbRes[0]).data;\n        var collectionId = dbResData.generated_keys[0];\n\n        return WordsService.getAll(collectionId);\n      })['catch'](function (err) {\n        vm.btnState.loading = false;\n\n        vm.notification.error = true;\n\n        console.log('Something went wrong with importing', err);\n\n        return $q.reject(err);\n      }).then(function (res) {\n        var words = angular.fromJson(res).data;\n        var promises = [];\n\n        words.forEach(function (word) {\n          promises.push(addPronunciation(ConfigService.forvoKey, word));\n        });\n\n        return $q.all(promises);\n      }).then(function () {\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.notification.success = true;\n\n        $timeout(function () {\n          vm.btnState.success = false;\n          $window.location.href = '/#/main-app/collections';\n        }, 1500);\n      })['catch'](function (err) {\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.notification.success = true;\n\n        $timeout(function () {\n          vm.btnState.success = false;\n          $window.location.href = '/#/main-app/collections';\n        }, 1500);\n\n        console.log('Import successful, but adding pronunciations failed: ', err);\n      });\n    }\n\n    function addPronunciation(forvoKey, word) {\n      var deferred = $q.defer();\n\n      DictionaryService.getPronunciation(forvoKey, word.word).then(function (res) {\n        var pronunciationData = angular.fromJson(res).data;\n        var pronunciationPath = pronunciationData.attributes.total !== 0 ? pronunciationData.items[0].pathmp3 : null;\n\n        var wordUpdate = {\n          pronunciationPath: pronunciationPath\n        };\n\n        return WordsService.update(word.id, wordUpdate);\n      }).then(function (dbRes) {\n        deferred.resolve(dbRes);\n      })['catch'](function (err) {\n        deferred.reject(err);\n        console.log('Something went wrong: ', err);\n      });\n\n      return deferred.promise;\n    }\n\n    // main /////////////////////////////////////////////////////////////////////////////\n\n    vm.importTextfile = function (isValid, formData) {\n\n      if (!isValid) {\n        return;\n      }\n\n      importTextfile(user.id, formData);\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ImportCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('ImportCtrl', ImportCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name mainApp.factory:CollectionsService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').factory('CollectionsService', CollectionsService);\n\n  function CollectionsService($http) {\n\n    var CollectionsServiceBase = {};\n\n    CollectionsServiceBase.getAll = function (userId) {\n      return $http.get('/api/' + userId + '/collections');\n    };\n\n    CollectionsServiceBase.create = function (collection) {\n      return $http.post('/api/collections', collection);\n    };\n\n    CollectionsServiceBase.get = function (collectionId) {\n      return $http.get('/api/collections/' + collectionId);\n    };\n\n    CollectionsServiceBase.merge = function (collectionId, newCollectionId) {\n      return $http.put('/api/collections/merge/' + collectionId, newCollectionId);\n    };\n\n    CollectionsServiceBase.update = function (collectionId, newCollection) {\n      return $http.put('/api/collections/' + collectionId, newCollection);\n    };\n\n    CollectionsServiceBase['delete'] = function (collectionId) {\n      return $http['delete']('/api/collections/' + collectionId);\n    };\n\n    return CollectionsServiceBase;\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var CollectionsCtrl = function CollectionsCtrl(CollectionsService, WordsService, $timeout, user, $q) {\n    _classCallCheck(this, CollectionsCtrl);\n\n    var vm = this;\n\n    // config ///////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.placeholder = {\n      collectionTitle: 'Enter Collection name here'\n    };\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.user = user;\n    vm.checks = {};\n    vm.showEdit = false;\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Success!',\n      error: 'Something went wrong - please try again.',\n      mergeError: 'Please select two or more collections.',\n      noneSelectedError: 'Please select one or more collections.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n    vm.showModal = false;\n\n    // init /////////////////////////////////////////////////////////////////////////////\n\n    getAllCollections(user);\n\n    // helper functions //////////////////////////////////////////////////////////////////\n\n    function getAllCollections(user) {\n\n      CollectionsService.getAll(user.id).then(function (res) {\n        vm.collectionList = angular.fromJson(res).data;\n\n        // intiialize checks to all false\n        vm.checks = initChecks(vm.collectionList);\n      })['catch'](function (err) {\n        console.log('Something went wrong: ', err);\n      });\n    }\n\n    function mergeCollections(collectionIds) {\n      var mainCollectionId = collectionIds[0];\n      var remainingCollectionIds = collectionIds.filter(function (collectionId) {\n        return collectionId !== mainCollectionId;\n      });\n\n      var promises = [];\n\n      remainingCollectionIds.forEach(function (collectionId) {\n        promises.push(CollectionsService.merge(collectionId, { newCollectionId: mainCollectionId }));\n      });\n\n      return $q.all(promises);\n    }\n\n    function deleteCollections(collectionIds) {\n      var promises = [];\n\n      collectionIds.forEach(function (collectionId) {\n        promises.push(CollectionsService['delete'](collectionId));\n      });\n\n      return $q.all(promises);\n    }\n\n    function initChecks(collections) {\n      var checks = {};\n\n      collections.forEach(function (collection) {\n        checks[collection.id] = false;\n      });\n\n      return checks;\n    }\n\n    function resetForm() {\n      vm.addCollectionForm.collectionTitle.$touched = false;\n      vm.addCollectionForm.$submitted = false;\n      vm.formData = {};\n    }\n\n    // main /////////////////////////////////////////////////////////////////////////////\n\n    vm.toggleEdit = function () {\n      vm.showEdit = !vm.showEdit;\n    };\n\n    vm.toggleSuccessNotification = function (successMessage) {\n      vm.notification.success = true;\n      vm.notificationSuccessMsg = successMessage;\n    };\n\n    vm.toggleErrorNotification = function (errorMessage) {\n      vm.notification.error = true;\n      vm.notificationErrorMsg = errorMessage;\n    };\n\n    vm.createCollection = function (isValid, collection) {\n      if (!isValid) {\n        return;\n      }\n\n      vm.btnState.loading = true;\n\n      CollectionsService.create(collection).then(function () {\n        vm.btnState.loading = false;\n        vm.btnState.success = true;\n\n        vm.toggleSuccessNotification(vm.msg.success);\n\n        getAllCollections(user);\n        resetForm();\n\n        $timeout(function () {\n          vm.btnState.success = false;\n        }, 1500);\n      })['catch'](function (err) {\n        vm.btnState.loading = false;\n        vm.toggleErrorNotification(vm.msg.mergeError);\n\n        console.log('Something went wrong: ', err);\n      });\n    };\n\n    vm.mergeCollections = function (collections, checks) {\n\n      var mergeList = [];\n\n      collections.forEach(function (collection) {\n        if (checks[collection.id] === true) {\n          mergeList.push(collection.id);\n        }\n      });\n\n      if (mergeList.length >= 2) {\n        mergeCollections(mergeList).then(function () {\n          vm.toggleSuccessNotification(vm.msg.success);\n          getAllCollections(user);\n        })['catch'](function (err) {\n          vm.toggleErrorNotification(vm.msg.error);\n          console.log('Something went wrong: ', err);\n        });\n      } else {\n        vm.toggleErrorNotification(vm.msg.mergeError);\n      }\n    };\n\n    vm.deleteCollections = function (collections, checks) {\n\n      var deleteList = [];\n\n      collections.forEach(function (collection) {\n        if (checks[collection.id] === true) {\n          deleteList.push(collection.id);\n        }\n      });\n\n      if (deleteList.length >= 1) {\n        deleteCollections(deleteList).then(function () {\n          vm.toggleSuccessNotification(vm.msg.success);\n          getAllCollections(user);\n        })['catch'](function (err) {\n          vm.toggleErrorNotification(vm.msg.error);\n          console.log('Something went wrong: ', err);\n        });\n      } else {\n        vm.toggleErrorNotification(vm.msg.noneSelectedError);\n      }\n    };\n\n    vm.showConfirmDeleteModal = function (collections, checks) {\n      var deleteList = [];\n\n      collections.forEach(function (collection) {\n        if (checks[collection.id] === true) {\n          deleteList.push(collection.id);\n        }\n      });\n\n      if (deleteList.length >= 1) {\n        vm.showModal = true;\n      } else {\n        vm.toggleErrorNotification(vm.msg.noneSelectedError);\n      }\n    };\n\n    vm.confirmModal = function () {\n      vm.deleteCollections(vm.collectionList, vm.checks);\n    };\n\n    vm.closeModal = function () {\n      vm.showModal = false;\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:CollectionsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('CollectionsCtrl', CollectionsCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var AddWordsCtrl = function AddWordsCtrl(ConfigService, DictionaryService, WordsService, TextConvertService, $stateParams, $timeout, $moment) {\n    _classCallCheck(this, AddWordsCtrl);\n\n    var vm = this;\n\n    // config //////////////////////////////////////////////////////////////////////////\n\n    vm.formData = {};\n    vm.placeholder = {\n      word: 'i.e. audacious',\n      definition: 'i.e. Fearlessly, often recklessly daring; bold. See Synonyms at adventurous, brave.'\n    };\n    vm.btnState = {\n      loading: false,\n      success: false\n    };\n    vm.collectionId = $stateParams.collectionId;\n    vm.notification = {\n      success: false,\n      error: false\n    };\n    vm.msg = {\n      success: 'Word successfully added!',\n      error: 'Something went wrong. Please try again.'\n    };\n    vm.notificationSuccessMsg = vm.msg.success;\n    vm.notificationErrorMsg = vm.msg.error;\n    vm.showModal = false;\n\n    // helper functions //////////////////////////////////////////////////////////////////\n\n    function submitSuccessHandler() {\n      vm.btnState.loading = false;\n      vm.btnState.success = true;\n\n      resetForm();\n      vm.definitions = []; // reset definition list\n\n      vm.notification.success = true;\n\n      $timeout(function () {\n        vm.btnState.success = false;\n      }, 1500);\n    }\n\n    function submitErrorHandler(err) {\n      vm.btnState.loading = false;\n      vm.notification.error = true;\n      console.log('Something went wrong: ', err);\n    }\n\n    function composeWordDetails(collectionId, formData) {\n      var lastReviewed = $moment();\n      var lastReviewedEpochTime = lastReviewed.unix();\n      var nextReview = $moment().add(1, 'minutes');\n      var nextReviewEpochTime = nextReview.unix();\n\n      var convertedDefinition = TextConvertService.toHtml(formData.definition);\n\n      var word = {\n        word: formData.word,\n        definition: convertedDefinition,\n        collectionId: collectionId,\n        lastReviewedEpochTime: lastReviewedEpochTime,\n        interval: 1,\n        nextReviewEpochTime: nextReviewEpochTime,\n        phase: 'learning',\n        reviewRes: {\n          again: 0,\n          hard: 0,\n          good: 0,\n          easy: 0\n        },\n        easeFactor: 2.5\n      };\n\n      return word;\n    }\n\n    function addWord(collectionId, formData) {\n      var word = composeWordDetails(collectionId, formData);\n\n      WordsService.create(word).then(submitSuccessHandler)['catch'](submitErrorHandler);\n    }\n\n    function updateWord(collectionId, formData) {\n      var word = composeWordDetails(collectionId, formData);\n\n      WordsService.find(collectionId, formData.word).then(function (res) {\n        var wordId = angular.fromJson(res).data[0].id;\n        return WordsService.update(wordId, word);\n      }).then(submitSuccessHandler)['catch'](submitErrorHandler);\n    }\n\n    function checkDuplicate(collectionId, formData) {\n      WordsService.exists(collectionId, formData.word).then(function (res) {\n        var isDuplicate = angular.fromJson(res).data;\n\n        if (isDuplicate) {\n          vm.showModal = true;\n          vm.btnState.loading = false;\n        } else {\n          addWord(collectionId, formData);\n        }\n      })['catch'](function (err) {\n        console.log('checkDuplicate err: ', err);\n      });\n    }\n\n    function resetForm() {\n      vm.addWordForm.word.$touched = false;\n      vm.addWordForm.definition.$touched = false;\n      vm.addWordForm.$submitted = false;\n      vm.formData = {};\n    }\n\n    // main /////////////////////////////////////////////////////////////////////////////\n\n    vm.modalClose = function () {\n      vm.showModal = false;\n    };\n\n    vm.modalYes = function (collectionId, formData) {\n      updateWord(collectionId, formData);\n    };\n\n    vm.modalNo = function (collectionId, formData) {\n      addWord(collectionId, formData);\n    };\n\n    vm.getDefinition = function (word) {\n      if (word !== undefined) {\n        DictionaryService.getDefinition(ConfigService.mashapeKey, word).then(function (res) {\n          vm.definitions = res.data.definitions;\n        })['catch'](function (err) {\n          console.log('Something went wrong; ', err);\n        });\n      }\n    };\n\n    vm.submit = function (isValid, collectionId, formData) {\n      if (!isValid) {\n        return;\n      }\n\n      vm.btnState.loading = true;\n\n      checkDuplicate(collectionId, formData);\n    };\n\n    vm.copyDefinition = function (definition) {\n      if (vm.formData.definition !== undefined) {\n        vm.formData.definition = vm.formData.definition + '\\n\\n' + definition;\n      } else {\n        vm.formData.definition = definition;\n      }\n    };\n\n    vm.resetForm = function () {\n      resetForm();\n    };\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:AddWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('mainApp').controller('AddWordsCtrl', AddWordsCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name home\n   * @description\n   *\n   */\n  angular.module('home', ['ui.router']);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var NavHomeCtrl = function NavHomeCtrl(AuthService, $window) {\n    _classCallCheck(this, NavHomeCtrl);\n\n    var vm = this;\n\n    // config //////////////////////////////////////////////////////////////////////////\n\n    vm.user = false;\n\n    vm.setActive = function (page) {\n      vm.active = page;\n    };\n\n    // init ////////////////////////////////////////////////////////////////////////////\n\n    AuthService.isLoggedIn().then(function (user) {\n      if (user.data !== false) {\n        vm.user = true;\n        $window.location = '/#/main-app/collections';\n      }\n\n      console.log('Logged in?', vm.user);\n    })['catch'](function (err) {\n      console.log('Something went wrong: ', err);\n    });\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name home.controller:NavHomeCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('home').controller('NavHomeCtrl', NavHomeCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('home').config(config);\n\n  function config($stateProvider) {\n    $stateProvider.state('root', {\n      abstract: true,\n      views: {\n        '': {\n          templateUrl: 'home/root.tpl.html'\n        },\n        'nav-home@root': {\n          templateUrl: 'home/nav-home.tpl.html',\n          controller: 'NavHomeCtrl',\n          controllerAs: 'navHome'\n        }\n      }\n    }).state('root.home', {\n      url: '/home',\n      templateUrl: 'home/home.tpl.html',\n      controller: 'HomeCtrl',\n      controllerAs: 'home'\n    });\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var HomeCtrl = function HomeCtrl() {\n    _classCallCheck(this, HomeCtrl);\n\n    var vm = this;\n    vm.ctrlName = 'HomeCtrl';\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name home.controller:HomeCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('home').controller('HomeCtrl', HomeCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name common\n   * @description\n   *\n   */\n  angular.module('common', []);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name common.factory:TextConvertService\n   *\n   * @description\n   *\n   */\n  angular.module('common').factory('TextConvertService', TextConvertService);\n\n  function TextConvertService() {\n\n    var TextConvertServiceBase = {};\n\n    TextConvertServiceBase.toHtml = function (text) {\n      var convertedText = text.replace(/\\n/g, '<br>');\n      return convertedText;\n    };\n\n    TextConvertServiceBase.fromHtml = function (text) {\n      var convertedText = text.replace(/<br>/g, '\\n').replace(/<div>/g, '\\n').replace(/<\\/div>/g, '\\n').replace(/&amp;/g, '&').replace(/&nbsp;/g, ' ').replace(/&gt;/g, '>');\n      return convertedText;\n    };\n\n    return TextConvertServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:spinner\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <example module=\"common\">\r\n       <file name=\"index.html\">\r\n        <spinner></spinner>\r\n       </file>\r\n     </example>\r\n   *\r\n   */\n  angular.module('common').directive('spinner', spinner);\n\n  function spinner() {\n    return {\n      restrict: 'EA',\n      scope: {},\n      templateUrl: 'common/spinner-directive.tpl.html',\n      replace: true,\n      link: function link(scope, element, attrs) {\n        /*jshint unused:false */\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\n        scope.width = attrs.width;\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:Sm2Service\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('common').factory('Sm2Service', Sm2Service);\n\n  function Sm2Service($moment) {\n    var Sm2ServiceBase = {};\n\n    /*    \r\n      SM2 (Super Memo 2) Algorithm\r\n        Learning phase: 1min / 10min\r\n      Review phase default: 4 days\r\n      I(n) = I(n-1) * EF\r\n      Minimum EF: 1.3\r\n        Review response:\r\n      Again: reset phase to learning + -20% to EF\r\n      Hard: -15% to EF\r\n      Good: do nothing\r\n      Easy: +15% to EF\r\n    */\n\n    // main //////////////////////////////////////////////////////////////////////////////\n\n    // calcEaseFactor :: Float -> String -> Float\n    Sm2ServiceBase.calcEaseFactor = function (easeFactor, choice) {\n      var oldEaseFactor = easeFactor;\n      var newEaseFactor = undefined;\n      var minEaseFactor = 1.3;\n\n      switch (choice) {\n        case 'again':\n          newEaseFactor = oldEaseFactor - 0.2;\n          newEaseFactor = newEaseFactor < minEaseFactor ? minEaseFactor : newEaseFactor;\n          break;\n        case 'hard':\n          newEaseFactor = oldEaseFactor - 0.15;\n          newEaseFactor = newEaseFactor < minEaseFactor ? minEaseFactor : newEaseFactor;\n          break;\n        case 'good':\n          newEaseFactor = oldEaseFactor;\n          break;\n        case 'easy':\n          newEaseFactor = oldEaseFactor + 0.15;\n          break;\n      }\n\n      return newEaseFactor;\n    };\n\n    // calcPhase :: String -> Integer -> String -> String\n    Sm2ServiceBase.calcPhase = function (phase, interval, choice) {\n      if (choice === 'again') {\n        return 'learning';\n      } else if (choice === 'easy') {\n        return 'review';\n      }\n\n      if (phase === 'learning') {\n        if (interval === 1) {\n          return 'learning';\n        } else if (interval === 10) {\n          return 'review';\n        }\n      }\n\n      if (phase === 'review') {\n        return 'review';\n      }\n    };\n\n    // calcInterval :: String -> Integer -> Float -> String -> Integer\n    // note: interval is in minutes\n    Sm2ServiceBase.calcInterval = function (phase, interval, easeFactor, choice) {\n      if (choice === 'again') {\n        return 1;\n      } else if (choice === 'easy' && phase === 'learning') {\n        return 4 * 24 * 60;\n      }\n\n      if (phase === 'learning') {\n        switch (interval) {\n          case 1:\n            return 10;\n          case 10:\n            return 4 * 24 * 60;\n        }\n      } else if (phase === 'review') {\n        return interval * easeFactor;\n      }\n    };\n\n    Sm2ServiceBase.calcNextReview = function (newInterval) {\n      return $moment().add(newInterval, 'minutes');\n    };\n\n    return Sm2ServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:notification\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <notification show=\"collections.showNotification\" color=\"green\">Some message</notification>\r\n   *\r\n   */\n  angular.module('common').directive('notification', notification);\n\n  function notification($timeout) {\n    return {\n      restrict: 'EA',\n      scope: {\n        show: '=',\n        color: '@'\n      },\n      templateUrl: 'common/notification-directive.tpl.html',\n      transclude: true,\n      replace: false,\n      link: function link(scope, element, attrs) {\n        /*jshint unused:false */\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\n        scope.$watch('show', function () {\n          $timeout(function () {\n            scope.show = false;\n          }, 2500);\n        });\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:modal\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <modal show=\"collections.showModal\" \r\n            modal-bg=\"bg-red\" \r\n            yes-cb=\"collections.confirm()\" \r\n            no-cb=\"collections.no()\" \r\n            yes-message=\"Yes, delete\" \r\n            no-message=\"No, don't save\"\r\n            add-abort-button>\r\n     </modal>\r\n   *\r\n   */\n  angular.module('common').directive('modal', modal);\n\n  function modal() {\n    return {\n      restrict: 'EA',\n      scope: {\n        show: '=',\n        yesCb: '&?',\n        noCb: '&?'\n      },\n      templateUrl: 'common/modal-directive.tpl.html',\n      replace: false,\n      transclude: true,\n      link: function link(scope, element, attrs) {\n        /*jshint unused:false */\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\n        scope.modalBg = attrs.modalBg || '';\n\n        scope.yesMessage = attrs.yesMessage || 'Yes';\n        scope.noMessage = attrs.noMessage || 'No';\n\n        scope.showYesBtn = scope.yesCb !== undefined ? true : false;\n        scope.showNoBtn = scope.noCb !== undefined ? true : false;\n\n        scope.showAbortBtn = attrs.addAbortButton !== undefined ? true : false;\n\n        scope.closeModal = function () {\n          scope.show = false;\n        };\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name common.factory:ImportService\n   *\n   * @description\n   *\n   */\n  angular.module('common').factory('ImportService', ImportService);\n\n  function ImportService($http) {\n    var ImportServiceBase = {};\n\n    // anki :: String -> { collectionTitle, [files] } -> {dbRes}\n    ImportServiceBase.anki = function (userId, data) {\n      return $http.post('/api/import/anki/' + userId, data);\n    };\n\n    return ImportServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:fileread\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <example module=\"common\">\r\n       <file name=\"index.html\">\r\n        <fileread></fileread>\r\n       </file>\r\n     </example>\r\n   *\r\n   */\n  angular.module('common').directive('fileread', fileread);\n\n  function fileread() {\n    return {\n      restrict: 'A',\n      scope: {\n        fileread: '='\n      },\n      replace: false,\n      link: function link(scope, element, attrs) {\n        /*jshint unused:false */\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\n\n        element.bind('change', function (changeEvent) {\n          scope.fileread = [];\n          var files = changeEvent.target.files;\n\n          for (var i = 0, f = undefined; f = files[i]; i++) {\n            var reader = new FileReader();\n\n            reader.onload = (function (file) {\n              return function (loadEvent) {\n                scope.$apply(function () {\n                  scope.fileread.push({ name: file.name, content: loadEvent.target.result });\n                });\n              };\n            })(f);\n\n            reader.readAsText(f);\n          }\n        });\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:DictionaryService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('common').factory('DictionaryService', DictionaryService);\n\n  function DictionaryService($http, $q) {\n\n    var DictionaryServiceBase = {};\n\n    DictionaryServiceBase.getDefinition = function (mashapeKey, word) {\n      return $http.get('https://montanaflynn-dictionary.p.mashape.com/define?word=' + word, {\n        headers: { 'X-Mashape-Key': mashapeKey }\n      });\n    };\n\n    // getPronunciation :: string -> string -> Promise(String)\n    DictionaryServiceBase.getPronunciation = function (forvoKey, word) {\n\n      var deferred = $q.defer();\n\n      console.log(word);\n\n      $http.jsonp('http://apifree.forvo.com/action/word-pronunciations/format/json/word/' + word + '/language/en/order/rate-desc/limit/1/key/' + forvoKey + '?callback=JSON_CALLBACK').then(function (res) {\n        var pronunciationData = angular.fromJson(res).data;\n        console.log(pronunciationData);\n        var pronunciationPath = pronunciationData.attributes.total !== 0 ? pronunciationData.items[0].pathmp3 : null;\n\n        deferred.resolve(pronunciationPath);\n      })['catch'](function (err) {\n        deferred.reject(err);\n        console.log('Something went wrong: ', err);\n      });\n\n      return deferred.promise;\n    };\n\n    return DictionaryServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:ConfigService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('common').factory('ConfigService', ConfigService);\n\n  function ConfigService() {\n\n    var ConfigServiceBase = {};\n\n    ConfigServiceBase.mashapeKey = 'S4DvXSr43Cmsh5Kww0kOuX9QxNbXp1hjhkYjsn84TFraf8SlG3';\n    ConfigServiceBase.forvoKey = 'f850390038cd293954cb5bdf7dc36d8a';\n\n    return ConfigServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name auth\n   * @description\n   *\n   */\n  angular.module('auth', ['ui.router']);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var RegisterCtrl = function RegisterCtrl() {\n    _classCallCheck(this, RegisterCtrl);\n\n    var vm = this;\n    vm.ctrlName = 'RegisterCtrl';\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name auth.controller:RegisterCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('auth').controller('RegisterCtrl', RegisterCtrl);\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var LoginCtrl = function LoginCtrl() {\n    _classCallCheck(this, LoginCtrl);\n\n    var vm = this;\n    vm.ctrlName = 'LoginCtrl';\n  };\n\n  /**\r\n   * @ngdoc object\r\n   * @name auth.controller:LoginCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('auth').controller('LoginCtrl', LoginCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * @ngdoc service\r\n   * @name auth.factory:AuthService\r\n   *\r\n   * @description\r\n   *\r\n   */\n  angular.module('auth').factory('AuthService', AuthService);\n\n  function AuthService(ConfigService, $http, $q, $window) {\n\n    var AuthServiceBase = {};\n\n    // only check login status\n    // used in nav\n    AuthServiceBase.isLoggedIn = function () {\n      return $http.get('/auth/loggedin');\n    };\n\n    // check login status and redirect if not logged in\n    // used for route resolve for protected paths\n    AuthServiceBase.checkLoggedIn = function () {\n\n      var deferred = $q.defer();\n\n      $http.get('/auth/loggedin').then(function (user) {\n        var user = user.data;\n        if (user !== false) {\n          deferred.resolve(user.new_val);\n        } else {\n          deferred.reject();\n          $window.location = '/#/login';\n        }\n      })['catch'](function (err) {\n        deferred.reject();\n        $window.location = '/#/';\n        console.log('Something went wrong: ', err);\n      });\n\n      return deferred.promise;\n    };\n\n    AuthServiceBase.logout = function () {\n      return $http.get('/auth/logout');\n    };\n\n    return AuthServiceBase;\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('auth').config(config);\n\n  function config($stateProvider) {\n    $stateProvider.state('root.auth', {\n      abstract: true,\n      views: {\n        '': {\n          templateUrl: 'auth/auth.tpl.html'\n        }\n      }\n    }).state('root.auth.login', {\n      url: '/login',\n      templateUrl: 'auth/login.tpl.html',\n      controller: 'LoginCtrl',\n      controllerAs: 'login'\n    }).state('root.auth.register', {\n      url: '/register',\n      templateUrl: 'auth/register.tpl.html',\n      controller: 'RegisterCtrl',\n      controllerAs: 'register'\n    }).state('root.auth.logout', {\n      url: '/logout',\n      templateUrl: 'auth/logout.tpl.html',\n      controller: 'LogoutCtrl',\n      controllerAs: 'logout'\n    });\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('bigvocab').config(config);\n\n  function config($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/home');\n  }\n})();","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name bigvocab\n   * @description\n   *\n   */\n  angular\n    .module('bigvocab', [\n      'ngAria',\n      'ngAnimate',\n      'ngMessages',\n      'ui.router',\n      '720kb.tooltips',\n      'ngAudio',\n      'angular-momentjs',\n      'home',\n      'auth',\n      'mainApp',\n      // 'ramda',\n      'common'\n    ]);\n\n  // ramda module\n  // angular.module('ramda', []);\n  // angular.module('ramda').factory('R', function ($window) {\n  //   return $window.R;\n  // });\n\n}());\n","<div class=\"container\">\r\n\t<div class=\"clearfix center\">\r\n\r\n\t\t<h1 class=\"mt1 mb3\">Test Time!</h1>\r\n\r\n\t\t<div class=\"mb2 bold\"><span class=\"gray\">Today's Quota:</span> 78 <span class=\"gray\">/ 123 words left</span></div>\r\n\r\n\t\t<div class=\"md-col-4 sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"h2 px2 py4 bg-white rounded\">Hello</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"md-col-4 sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"clearfix mxn1\">\r\n\t\t\t\t<div class=\"col col-6 px1\">\r\n\t\t\t\t\t<a class=\"btn mt2 bg-red block white\">Not sure<span class=\"ti-close ml1\"></span></a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col col-6 px1\">\r\n\t\t\t\t\t<a class=\"btn mt2 bg-green block white\">Easy<span class=\"ti-check ml1\"></span></a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>","<!--/////////// DESKTOP ONLY ///////////-->\r\n<div class=\"sm-show\" style=\"margin-right: 63px;\">\r\n\r\n\t<div class=\"bg-navy fixed white z1\" style=\"height: 100vh;\">\r\n\t\t<div class=\"flex flex-column flex-center py3\">\r\n\t\t\t\r\n\t\t\t<a ui-sref=\"mainApp.collections\"><img class=\"mb2\" src=\"../images/logo/bigvocab-logo-color.svg\" width=\"56px\"></a>\r\n\t\t\t<a ui-sref=\"{{ navItem.link }}\" tooltips title=\"{{ navItem.title }}\" tooltip-placement=\"right\" class=\"btn btn-icon h2 center p2\" ng-repeat=\"navItem in sidebar.navItems | orderBy:'id'\" tabindex=\"-1\">\r\n\t\t\t\t<span class=\"{{ navItem.icon }}\"></span>\r\n\t\t\t</a>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>\r\n<!--/////////// end: DESKTOP ONLY ///////////-->\r\n\r\n<!--/////////// MOBILE ONLY ///////////-->\r\n<div class=\"sm-hide\">\r\n\r\n\t<!-- toggle button background -->\r\n\t<div class=\"fixed z2\" style=\"background-color: rgba(255,255,255,0.93); width: 58px; height:58px;\"></div>\r\n\t<!-- toggle button background -->\r\n\r\n\t<!-- toggle button -->\r\n\t<div class=\"fixed z3\">\r\n\t\t<a ng-click=\"sidebar.toggleSidebar()\" class=\"btn btn-icon p2 h3\" ng-class=\"{'black': sidebar.toggle === false, 'white': sidebar.toggle === true}\"><span class=\"ti-menu\"></span></a>\r\n\t</div>\r\n\t<!-- end: toggle button -->\r\n\r\n\t<!-- menu items -->\r\n\t<div class=\"bg-navy fixed white z2 translateX-n-100 transition-all-300\" ng-class=\"{'translateX-n-100': sidebar.toggle === false, 'translateX-0': sidebar.toggle === true }\" style=\"height: 100vh;\">\r\n\t\t<div class=\"flex flex-column py2 mt4\">\r\n\t\t\t\r\n\t\t\t<div style=\"margin-left:20px\"><img class=\"mb2\" src=\"../images/logo/bigvocab-logo-color.svg\" width=\"56px\"></div>\r\n\t\t\t<a ui-sref=\"{{ navItem.link }}\" ng-click=\"sidebar.toggleSidebar();\" class=\"btn btn-icon py2 px3 flex flex-center\" ng-repeat=\"navItem in sidebar.navItems | orderBy:'id'\" tabindex=\"-1\">\r\n\t\t\t\t<div class=\"{{ navItem.icon }} h3 mr2\"></div>\r\n\t\t\t\t<div class=\"h5\">{{ navItem.title }}</div>\r\n\t\t\t</a>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\t<!-- end: menu items -->\r\n\r\n</div>\r\n<!--/////////// end: MOBILE ONLY ///////////-->\r\n","<div class=\"container\">\n\t<div class=\"clearfix\">\n\n\t\t<div class=\"sm-col-8 md-col-4 mx-auto center px2\">\n\t\n\t\t\t<h1 class=\"mt1 mb2\">Settings</h1>\n\n\t\t\t<form name=\"settings.settingsForm\" \n\t\t\t\t\t\tng-submit=\"settings.saveSettings(settings.formData.maxDailyWords)\"\n\t\t\t\t\t\tnovalidate>\n\n\t\t\t\t<div class=\"mb1 bold\">Max # of study words per day</div>\n\t\t\t\t<input name=\"maxDailyWords\" type=\"number\" ng-model=\"settings.formData.maxDailyWords\" class=\"field col-12\" placeholder=\"{{ settings.placeholder.maxDailyWords }}\" autofocus>\n\n\t\t\t\t<button class=\"btn btn-primary col-12 mt2\" type=\"submit\">\n\t\t\t\t\t\t<span ng-if=\"!settings.btnState.loading && !settings.btnState.success\">Save Changes</span>\n\t\t\t\t\t\t<span ng-if=\"settings.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\n\t\t\t\t\t\t<span ng-if=\"settings.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\n\t\t\t\t</button>\n\n\t\t\t</form>\n\n\t\t</div>\n\n\t</div>\n</div>\n\n<!-- notification -->\n<notification color=\"green\" show=\"settings.notification.success\"><span class=\"ti-check mr1\"></span>{{ settings.notificationSuccessMsg }}</notification>\n<notification color=\"red\" show=\"settings.notification.error\"><span class=\"ti-alert mr1\"></span>{{ settings.notificationErrorMsg }}</notification>\n<!-- end: notification -->\n\n","<div class=\"container\">\r\n\t<div class=\"clearfix center\">\r\n\r\n\t\t<h1 class=\"mt1 mb3\">Study Time!</h1>\r\n\r\n\t\t<div class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"flex flex-justify\">\r\n\t\t\t\t<div class=\"mb2 bold\">\r\n\t\t\t\t\t<span class=\"gray\">Today's Quota:</span> {{ reviewWords.totalWordsCount - reviewWords.wordCounter }} <span class=\"gray\">/ {{ reviewWords.totalWordsCount }} words left</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<a ng-click=\"reviewWords.toggleEdit()\" ng-if=\"!reviewWords.finished\" class=\"h5 gray underline\">Edit</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- edit word -->\r\n\t\t<div class=\"sm-col-6 mx-auto px2 bg-lighten-3 rounded py2 mb2\" ng-if=\"reviewWords.editToggle && !reviewWords.finished\">\r\n\t\t\t<form>\r\n\t\t\t\t<input type=\"text\" name=\"editWord\" ng-model=\"reviewWords.formData.word\" class=\"field col-12 mb1\" required>\r\n\t\t\t\t<textarea name=\"editDefinition\" ng-model=\"reviewWords.formData.definition\" class=\"field col-12\" style=\"height: 80px;\"></textarea>\r\n\t\t\t\t<button ng-click=\"reviewWords.submitEdit(reviewWords.currentWord.id, reviewWords.formData.word, reviewWords.formData.definition)\" class=\"btn btn-green btn-form col-12 mt1\">Save Changes</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t<!-- end: edit word -->\r\n\r\n\t\t<div class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"p3 bg-white rounded flex flex-column flex-center-justified\" style=\"min-height: 184px\">\r\n\r\n\t\t\t\t<!-- word -->\r\n\t\t\t\t<div class=\"h2 mb1\">{{ reviewWords.currentWord.word }}</div>\r\n\t\t\t\t<!-- end: word -->\r\n\r\n\t\t\t\t\r\n\t\t\t\t<div ng-if=\"reviewWords.showAnswer\">\r\n\t\t\t\t\t<!-- definition -->\r\n\t\t\t\t\t<div class=\"h4 dark-gray\" style=\"white-space: pre-wrap;\">{{ reviewWords.currentWord.definition }}</div>\r\n\t\t\t\t\t<!-- end: definition -->\r\n\r\n\t\t\t\t\t<!-- pronunciation -->\r\n\t\t\t\t\t<button ng-if=\"reviewWords.pronunciation !== null && !reviewWords.finished\" \r\n\t\t\t\t\t\t\t\t\tng-click=\"reviewWords.playPronunciation()\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-blue-outline btn-sm mt2 mx-auto center\" style=\"width: 48px; height: 48px; border-radius: 50%;\">\r\n\t\t\t\t\t\t<span class=\"ti-control-play\" style=\"margin-left:4px\"></span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<!-- end: pronunciation -->\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- finish message -->\r\n\t\t\t\t<div class=\"h2 mb1\" ng-if=\"reviewWords.finished\">All done for the day!</div>\r\n\t\t\t\t<!-- finish message -->\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- show answer button -->\r\n\t\t<div ng-if=\"!reviewWords.showAnswer\" class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t<button ng-click=\"reviewWords.toggleAnswer()\" \r\n\t\t\t\t\t\t\tng-disabled=\"reviewWords.finished\"\r\n\t\t\t\t\t\t\tclass=\"btn btn-primary mt2 col-12\">Show Answer</button>\r\n\t\t</div>\r\n\t\t<!-- end: show answer button -->\r\n\r\n\t\t<!-- review response buttons -->\r\n\t\t<div ng-if=\"reviewWords.showAnswer && !reviewWords.finished\" class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t<div class=\"clearfix mxn1\">\r\n\t\t\t\t<div class=\"col col-3 px1 red\">\r\n\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, 'again')\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-red mt2 col-12\">Again</button>\r\n\t\t\t\t\t<div class=\"h6 gray center mt1\">Can't recall</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col col-3 px1 green\">\r\n\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, 'hard')\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-yellow-green mt2 col-12\">Hard</button>\r\n\t\t\t\t\t<div class=\"h6 gray center mt1\">Challenging</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col col-3 px1 green\">\r\n\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, 'good')\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-green mt2 col-12\">Good</button>\r\n\t\t\t\t\t<div class=\"h6 gray center mt1\">Just right</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col col-3 px1 green\">\r\n\t\t\t\t\t<button ng-click=\"reviewWords.submitRes(reviewWords.currentWord, 'easy')\" \r\n\t\t\t\t\t\t\t\t\tclass=\"btn btn-green mt2 col-12\">Easy</button>\r\n\t\t\t\t\t<div class=\"h6 gray center mt1\">Too easy</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<!-- end: review response buttons -->\r\n\r\n\t</div>\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"addWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ addWords.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"addWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ addWords.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n","<div class=\"flex\">\n\t<div ui-view=\"sidebar\"></div>\n\t<div ui-view class=\"flex-auto bg-darken-1 py4\" style=\"min-height: 100vh\"></div>\n</div>\n","<div class=\"container\">\r\n\t<div class=\"clearfix\">\r\n\r\n\t\t<div class=\"sm-col-10 md-col-6 mx-auto center px2\">\r\n\t\r\n\t\t\t<h1 class=\"mt1 mb2\">Log Out</h1>\r\n\r\n\t\t\t<div class=\"mb3 h4\">Are you sure you want to sign out from Big Vocab?</div>\r\n\r\n\t\t\t<button class=\"btn btn-blue-outline\" ng-click=\"logout.logout()\">Yes, log me out</button>&nbsp;&nbsp;\r\n\t\t\t<button class=\"btn btn-primary\" ng-click=\"logout.goBack()\">No, send me back</button>\r\n\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>","<div class=\"container\">\r\n\t<div class=\"clearfix\">\r\n\r\n\t\t<h1 class=\"mt1 mb2 center\">List of All Words<span ng-if=\"listWords.collectionTitle\"> in <span class=\"italic\">{{ listWords.collectionTitle }}</span></span></h1>\r\n\r\n\t\t<!-- search words form -->\r\n\t\t<div class=\"sm-col-6 mx-auto px2\">\r\n\t\t\t\r\n\t\t\t<form name=\"listWords.listWordsForm\" class=\"center\">\r\n\t\t\t\t<span class=\"center bold gray\">Total word count: {{ listWords.wordsCount }}</span>\r\n\t\t\t\t<input name=\"searchWords\" type=\"text\" ng-model=\"listWords.formData.searchWords\" class=\"field col-12 mt1 mb3\" placeholder=\"Search any word or definition\">\r\n\t\t\t</form>\r\n\r\n\t\t</div>\r\n\t\t<!-- end: search words form -->\r\n\r\n\t\t<!-- list of words -->\r\n\t\t<div class=\"sm-col-10 mx-auto px2\">\r\n\t\t\t\r\n\t\t\t<div ng-repeat=\"word in listWords.words | filter: listWords.formData.searchWords | orderBy: 'word' | limitTo: listWords.displayLimit\" class=\"clearfix col-12 mb2\" ng-class=\"{ 'rounded bg-lighten-3 p2 mb3': listWords.showEdit[word.id] }\" track by word.id>\r\n\t\t\t\t<form name=\"listWordsForm\" ng-submit=\"listWords.saveChanges(listWords.listWordsForm.$valid, word, listWords.formData)\">\r\n\r\n\t\t\t\t\t<!-- word -->\r\n\t\t\t\t\t<div class=\"sm-col sm-col-3 flex flex-center\">\r\n\r\n\t\t\t\t\t\t<!-- pronunciation -->\r\n\t\t\t\t\t\t<a ng-click=\"listWords.playPronunciation(word)\" \r\n\t\t\t\t\t\t\t class=\"btn btn-blue-outline mr2 center\" style=\"padding: 0.3em 0.24em; border-radius: 50%;\">\r\n\t\t\t\t\t\t\t<span class=\"ti-control-play\" style=\"margin-left:4px\"></span>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<!-- end: pronunciation -->\r\n\r\n\t\t\t\t\t\t<a ng-click=\"listWords.toggleEdit(word)\" class=\"link bold\" ng-if=\"!listWords.showEdit[word.id]\">{{ word.word }}</a>\r\n\r\n\t\t\t\t\t\t<!-- edit form -->\r\n\t\t\t\t\t\t<a ng-if=\"listWords.showEdit[word.id]\" class=\"ti-close mr1\" ng-click=\"listWords.toggleEdit(word)\"></a>\r\n\t\t\t\t\t\t<input name=\"word\" \r\n\t\t\t\t\t\t\t\t\t type=\"text\" \r\n\t\t\t\t\t\t\t\t\t ng-model=\"listWords.formData.word\" \r\n\t\t\t\t\t\t\t\t\t ng-if=\"listWords.showEdit[word.id]\" \r\n\t\t\t\t\t\t\t\t\t class=\"field flex-auto mr1\" \r\n\t\t\t\t\t\t\t\t\t placeholder=\"{{ listWords.placeholder.word }}\" \r\n\t\t\t\t\t\t\t\t\t autofocus required>\r\n\t\t\t\t\t\t<!-- end: edit form -->\r\n\t\r\n\t\t\t\t\t\t<!-- error handling -->\r\n\t\t\t\t\t\t<div ng-messages=\"listWords.listWordsForm.word.$error\" \r\n\t\t\t\t\t\t\t\t ng-if=\"listWords.listWordsForm.$submitted && listWords.listWordsForm.word.$touched\" \r\n\t\t\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- end: error handling -->\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- word -->\r\n\r\n\t\t\t\t\t<!-- definition -->\r\n\t\t\t\t\t<div class=\"sm-col sm-col-9 dark-gray flex flex-start flex-wrap\">\r\n\r\n\t\t\t\t\t\t<div class=\"flex flex-center flex-justify col-12\">\r\n\t\t\t\t\t\t\t<span ng-if=\"!listWords.showEdit[word.id]\" class=\"flex-auto\" style=\"white-space: pre-wrap;\">{{ word.definition }}</span>\r\n\t\t\t\t\t\t\t<!-- delete button -->\r\n\t\t\t\t\t\t\t<a ng-click=\"listWords.submitDelete(word.id)\"\r\n\t\t\t\t\t\t\t\t ng-disabled=\"listWords.btnState.success || listWords.btnState.loading\"\r\n\t\t\t\t\t\t\t\t ng-if=\"!listWords.showEdit[word.id]\" \r\n\t\t\t\t\t\t\t\t class=\"ti-trash red inline-block ml2\">\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t<!-- end: delete button -->\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<!-- edit form -->\r\n\t\t\t\t\t\t<textarea name=\"definition\" \r\n\t\t\t\t\t\t\t\t\t\t\tng-model=\"listWords.formData.definition\" \r\n\t\t\t\t\t\t\t\t\t\t\tng-if=\"listWords.showEdit[word.id]\" \r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"field flex-auto\" \r\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"height: 96px;\" \r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"{{ listWords.placeholder.definition }}\">\r\n\t\t\t\t\t\t</textarea>\r\n\t\t\t\t\t\t<div class=\"sm-col-4 flex flex-wrap\">\r\n\t\t\t\t\t\t\t<!-- save button -->\r\n\t\t\t\t\t\t\t<button type=\"submit\" \r\n\t\t\t\t\t\t\t\t\t\t\tng-if=\"listWords.showEdit[word.id]\" \r\n\t\t\t\t\t\t\t\t\t\t\tng-disabled=\"listWords.btnState.success || listWords.btnState.loading\"\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-form btn-primary col-12 ml1\">\r\n\t\t\t\t\t\t\t\t<span ng-if=\"!listWords.btnState.loading && !listWords.btnState.success\">Save Changes</span>\r\n\t\t\t\t\t\t\t\t<span ng-if=\"listWords.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t\t\t\t<span ng-if=\"listWords.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<!-- end: save button -->\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!-- end: edit form -->\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- end: definition -->\r\n\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t<!-- end: list of words -->\r\n\r\n\t</div>\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"listWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ listWords.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"listWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ listWords.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n\r\n<!-- modal -->\r\n<modal show=\"listWords.showModal\" \r\n\t      modal-bg=\"bg-white\" \r\n\t      yes-cb=\"listWords.modalYes(listWords.selectedWordId)\" \r\n\t      no-cb=\"listWords.modalClose()\"\r\n\t      yes-message=\"Yes, delete\"\r\n\t      no-message=\"No, cancel\">\r\n\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\r\n</modal>\r\n<!-- end: modal -->","<div class=\"container\">\r\n\t<div class=\"clearfix\">\r\n\r\n\t\t<div class=\"sm-col-10 md-col-6 mx-auto center px2\">\r\n\t\r\n\t\t\t<h1 class=\"mt1 mb2\">Import from Anki</h1>\r\n\r\n\t\t\t<div class=\"mb3\">If you upload multiple files, it will merge them and input it into a single collection. If you want each text file to have its own collection, upload one file at a time.</div>\r\n\r\n\t\t\t<form name=\"import.importForm\" \r\n\t\t\t\t\t\tng-submit=\"import.importTextfile(import.importForm.$valid, import.formData)\"\r\n\t\t\t\t\t\tnovalidate>\r\n\r\n\t\t\t\t<div class=\"mb1 bold\">Title of the collection to be imported</div>\r\n\t\t\t\t<input name=\"collectionTitle\" type=\"text\" ng-model=\"import.formData.collectionTitle\" class=\"field col-12\" placeholder=\"{{ import.placeholder.collectionTitle }}\" autofocus required>\r\n\r\n\t\t\t\t<!-- error handling -->\r\n\t\t\t\t<div ng-messages=\"import.importForm.collectionTitle.$error\" \r\n\t\t\t\t\t\t ng-if=\"import.importForm.$submitted && import.importForm.collectionTitle.$touched\" \r\n\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: error handling -->\r\n\r\n\t\t\t\t<div class=\"mt3 mb1 bold\">Anki text file (i.e. anki-collection-2015.txt)</div>\r\n\t\t\t\t<div class=\"file-input\">\r\n\t\t\t\t\tClick here to upload your files<span class=\"ti-folder ml1\">\r\n\t\t\t\t\t<input name=\"files\" type=\"file\" multiple=\"multiple\" accept=\".txt\" fileread=\"import.formData.files\" class=\"field col-12\" style=\"cursor: pointer; margin-bottom: none\" placeholder=\"{{ import.placeholder.files }}\" required>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- file names -->\r\n\t\t\t\t<div class=\"mt1\">\r\n\t\t\t\t\t<div ng-repeat=\"file in import.formData.files\" track by $index>{{ file.name }}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: file names -->\r\n\r\n\t\t\t\t<!-- error handling -->\r\n\t\t\t\t<div ng-messages=\"import.importForm.files.$error\" \r\n\t\t\t\t\t\t ng-if=\"import.importForm.$submitted\" \r\n\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: error handling -->\r\n\r\n\t\t\t\t<!-- submit button -->\r\n\t\t\t\t<button type=\"submit\" class=\"btn btn-primary mt3 mb2\" ng-disabled=\"import.btnState.success || import.btnState.loading\">\r\n\t\t\t\t\t<span ng-if=\"!import.btnState.loading && !import.btnState.success\">Import Anki Text File<span class=\"ti-import ml1\"></span></span>\r\n\t\t\t\t\t<span ng-if=\"import.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t<span ng-if=\"import.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t</button>\r\n\t\t\t\t<!-- end: submit button -->\r\n\r\n\t\t\t</form>\r\n\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"import.notification.success\"><span class=\"ti-check mr1\"></span>{{ import.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"import.notification.error\"><span class=\"ti-alert mr1\"></span>{{ import.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n","<div class=\"clearfix\">\r\n\r\n\t<h1 class=\"mt1 center\">My Collections&nbsp;&nbsp;<a ng-click=\"collections.toggleEdit()\" ng-if=\"collections.collectionList.length >= 1\" class=\"h5 gray underline\">Edit</a></h1>\r\n\r\n\t<!-- edit collection options -->\r\n\t<div class=\"md-col-10 lg-col-8 mx-auto px2\" ng-if=\"collections.showEdit\">\r\n\t\t<button class=\"btn btn-sm btn-yellow-green h6 mb2\" ng-click=\"collections.mergeCollections(collections.collectionList, collections.checks)\">Merge Selected</button>\r\n\t\t<button class=\"btn btn-sm btn-red h6 ml1 mb2\" ng-click=\"collections.showConfirmDeleteModal(collections.collectionList, collections.checks)\">Delete Selected</button>\r\n\t</div>\r\n\t<!-- end: edit collection options -->\r\n\r\n\t<div class=\"md-col-10 lg-col-8 mx-auto px2\">\r\n\r\n\t\t<!-- collection list -->\r\n\t\t<div class=\"clearfix bg-white rounded p1 mb2 ng-animation-fadeInUp\" ng-repeat=\"collection in collections.collectionList | orderBy: 'id'\">\r\n\r\n\t\t\t<div class=\"sm-col sm-col-7\">\r\n\t\t\t\t\r\n\t\t\t\t<!-- select collection -->\r\n\t\t\t\t<input type=\"checkbox\" style=\"margin-left: 8px; margin-right: -16px;\" ng-model=\"collections.checks[collection.id]\" ng-if=\"collections.showEdit\">\r\n\t\t\t\t<!-- end: select collection -->\r\n\r\n\t\t\t\t<div class=\"btn btn-md bold ml1 mt1 mb1\" style=\"cursor: text\">{{ collection.title }} <span class=\"gray\">(due: {{ collection.dueWordCount }}, new: {{ collection.newWordCount }} )</span></div>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class=\"sm-col sm-col-5 flex flex-wrap\">\r\n\t\t\t\t<a ui-sref=\"mainApp.review-words({ collectionId: collection.id })\" class=\"btn btn-md btn-primary flex-auto center m1 h5\">Study<span class=\"ti-arrow-right ml1\"></span></a>\r\n\t\t\t\t<a ui-sref=\"mainApp.add-words({ collectionId: collection.id })\" class=\"btn btn-md btn-blue-outline center dark-gray m1 h5\"><span class=\"ti-plus\"></span></a>\r\n\t\t\t\t<a ui-sref=\"mainApp.list-words\" class=\"btn btn-md btn-blue-outline center dark-gray m1 h5\"><span class=\"ti-list\"></span></a>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t<!-- end: collection list -->\r\n\r\n\t\t<!-- add collection -->\r\n\t\t<div class=\"clearfix bg-light-green px2 py2 mt3 rounded\">\r\n\r\n\t\t\t<div class=\"center\">\r\n\t\t\t\t<div class=\"caps bold m1\">Add Collection</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<form name=\"collections.addCollectionForm\" \r\n\t\t\t\t\t\tng-submit=\"collections.createCollection(collections.addCollectionForm.$valid, { \r\n\t\t\t\t\t\t\tuserId: collections.user.id,\r\n\t\t\t\t\t\t\ttitle: collections.formData.collectionTitle \r\n\t\t\t\t\t\t})\"\r\n\t\t\t\t\t\tnovalidate>\r\n\r\n\t\t\t\t<div class=\"sm-col sm-col-8 p1\">\r\n\t\t\t\t\t<input name=\"collectionTitle\" type=\"text\" ng-model=\"collections.formData.collectionTitle\" class=\"field col-12\" placeholder=\"{{ collections.placeholder.collectionTitle }}\" required>\r\n\r\n\t\t\t\t\t<!-- error handling -->\r\n\t\t\t\t\t<div ng-messages=\"collections.addCollectionForm.collectionTitle.$error\" \r\n\t\t\t\t\t\t\t ng-if=\"collections.addCollectionForm.$submitted && collections.addCollectionForm.collectionTitle.$touched\" \r\n\t\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- end: error handling -->\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- submit button -->\r\n\t\t\t\t<div class=\"sm-col sm-col-4 p1\">\r\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-form btn-green col-12\" ng-disabled=\"collections.btnState.success || collections.btnState.loading\">\r\n\t\t\t\t\t\t<span ng-if=\"!collections.btnState.loading && !collections.btnState.success\">Add Collection</span>\r\n\t\t\t\t\t\t<span ng-if=\"collections.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t\t<span ng-if=\"collections.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: submit button -->\r\n\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t<!-- end: add collection -->\r\n\r\n\t</div>\r\n\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"collections.notification.success\"><span class=\"ti-check mr1\"></span>{{ collections.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"collections.notification.error\"><span class=\"ti-alert mr1\"></span>{{ collections.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n\r\n<!-- modal -->\r\n<modal show=\"collections.showModal\" \r\n\t      modal-bg=\"bg-white\" \r\n\t      yes-cb=\"collections.confirmModal()\" \r\n\t      no-cb=\"collections.closeModal()\" \r\n\t      yes-message=\"Yes, delete\" \r\n\t      no-message=\"No, abort\">\r\n\t<div class=\"center h3\">Are you sure you want to delete the selected collection(s)?</div>\r\n</modal>\r\n<!-- end: modal -->","<div class=\"container\">\r\n\t<div class=\"clearfix\">\r\n\r\n\t\t<h1 class=\"mt1 mb3 center\">Add New Words</h1>\r\n\r\n\t\t<!-- add words form -->\r\n\t\t<div class=\"md-col md-col-6 px2\">\r\n\r\n\t\t\t<form name=\"addWords.addWordForm\" \r\n\t\t\t\t\t\tng-submit=\"addWords.submit(addWords.addWordForm.$valid, addWords.collectionId, addWords.formData)\"\r\n\t\t\t\t\t\tnovalidate>\r\n\r\n\t\t\t\t<div class=\"mb1 bold\">WORD</div>\r\n\t\t\t\t<input name=\"word\" type=\"text\" ng-model=\"addWords.formData.word\" ng-blur=\"addWords.getDefinition(addWords.formData.word)\" class=\"field col-12\" placeholder=\"{{ addWords.placeholder.word }}\" autofocus required>\r\n\r\n\t\t\t\t<!-- error handling -->\r\n\t\t\t\t<div ng-messages=\"addWords.addWordForm.word.$error\" \r\n\t\t\t\t\t\t ng-if=\"addWords.addWordForm.$submitted && addWords.addWordForm.word.$touched\" \r\n\t\t\t\t\t\t class=\"red bold h6 mt1\">\r\n\t\t\t\t\t<div ng-message=\"required\"><span class=\"ti-alert mr1\"></span>This field is required</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- end: error handling -->\r\n\r\n\t\t\t\t<div class=\"mb1 mt2 bold\">MEANING</div>\r\n\t\t\t\t<textarea name=\"definition\" ng-model=\"addWords.formData.definition\" class=\"field col-12\" style=\"height: 160px;\" placeholder=\"{{ addWords.placeholder.definition }}\"></textarea>\r\n\r\n\t\t\t\t<div class=\"flex flex-justify\">\r\n\t\t\t\t\t<button ng-click=\"addWords.resetForm()\" class=\"btn btn-outline mt2 mb2\">Reset Form</button>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<!-- submit button -->\r\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary mt2 mb2\" ng-disabled=\"addWords.btnState.success || addWords.btnState.loading\">\r\n\t\t\t\t\t\t<span ng-if=\"!addWords.btnState.loading && !addWords.btnState.success\"><span class=\"ti-plus mr1\"></span>Add Word</span>\r\n\t\t\t\t\t\t<span ng-if=\"addWords.btnState.loading\"><spinner width=\"16px\"></spinner>Please wait...</span>\r\n\t\t\t\t\t\t<span ng-if=\"addWords.btnState.success\"><span class=\"ti-check mr1\"></span>Success!</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<!-- end: submit button -->\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</form>\r\n\r\n\t\t</div>\r\n\t\t<!-- end: add words form -->\r\n\r\n\t\t<!-- definitions from dictionary API -->\r\n\t\t<div class=\"md-col md-col-6 px2\">\r\n\r\n\t\t\t<div class=\"bold gray mb2\">Word definitions from <span class=\"italic\">The American Heritage® Dictionary of the English Language, 4th Edition</span></div>\r\n\r\n\t\t\t<div class=\"bg-light-green rounded p2 mb2 near-black ng-animation-fadeInUp\" ng-repeat=\"definition in addWords.definitions\">\r\n\t\t\t\t<div class=\"flex flex-center\">\r\n\t\t\t\t\t<div class=\"flex-none\" style=\"width: 52px\">\r\n\t\t\t\t\t\t<a ng-click=\"addWords.copyDefinition(definition.text)\" class=\"btn btn-sm btn-green-outline\" tabindex=\"-1\"><span class=\"ti-plus\"></span></a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"h5\">{{ definition.text }}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t<!-- definitions from dictionary API -->\r\n\r\n\t</div>\r\n</div>\r\n\r\n<!-- notification -->\r\n<notification color=\"green\" show=\"addWords.notification.success\"><span class=\"ti-check mr1\"></span>{{ addWords.notificationSuccessMsg }}</notification>\r\n<notification color=\"red\" show=\"addWords.notification.error\"><span class=\"ti-alert mr1\"></span>{{ addWords.notificationErrorMsg }}</notification>\r\n<!-- end: notification -->\r\n\r\n<!-- modal -->\r\n<modal show=\"addWords.showModal\" \r\n\t      modal-bg=\"bg-white\" \r\n\t      yes-cb=\"addWords.modalYes(addWords.collectionId, addWords.formData)\" \r\n\t      no-cb=\"addWords.modalNo(addWords.collectionId, addWords.formData)\"\r\n\t      yes-message=\"Yes, overwrite\"\r\n\t      no-message=\"No, add new\"\r\n\t      add-abort-button>\r\n\t<div class=\"center h3\">You already have this word in your collection. Are you sure you want to overwrite the existing word?</div>\r\n</modal>\r\n<!-- end: modal -->","<div ui-view=\"nav-home\"></div>\r\n<div ui-view></div>","<div class=\"fixed white border-bottom border-lighten-2\" style=\"width: 100%\">\r\n\t<div class=\"container\">\r\n\t\t<div class=\"flex flex-center\">\r\n\t\t\t<a class=\"btn btn-sm\" ui-sref=\"root.home\">\r\n\t\t\t\t<img src=\"../images/logo/bigvocab-logo-white.svg\" width=\"50px\" />\r\n\t\t\t</a>\r\n\r\n\t\t\t<div class=\"flex-auto\"></div>\r\n\r\n\t\t\t<div>\r\n\r\n\t\t\t\t<!-- nav items -->\r\n\t\t\t\t<a ui-sref=\"root.home\" ng-click=\"navHome.setActive('home')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{'bold muted-0': navHome.active === 'home'}\">Home</a>\r\n\t\t\t\t<a ui-sref=\"root.features\" ng-click=\"navHome.setActive('features')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{'bold muted-0': navHome.active === 'features'}\">How it works</a>\r\n\t\t\t\t<!--<a ui-sref=\"root.about\" ng-click=\"navHome.setActive('about')\" class=\"btn btn-narrow btn-text py2 h6\" ng-class=\"{'bold muted-0': navHome.active === 'about'}\">About</a>-->\r\n\t\t\t\t<!-- end: nav items -->\r\n\r\n\t\t\t\t<!-- login button -->\r\n\t\t\t\t<a href=\"/auth/google\" ng-if=\"!navHome.user\" class=\"btn btn-outline btn-sm ml2 mr2 py2 h6\">Login&nbsp;&rarr;</a>\r\n\t\t\t\t<!-- end: login button -->\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>","<div class=\"bg-cover bg-gradient-home\">\r\n\r\n\t<div class=\"flex flex-center\" style=\"min-height: 100vh;\">\r\n\t\t<div class=\"container flex-auto\">\r\n\t\t\t<div class=\"clearfix\">\r\n\r\n\t\t\t\t<div class=\"sm-col-6 p2 mx-auto white center\">\r\n\t\t\t\t\t<div class=\"h1 light\">Big Vocab</div>\r\n\t\t\t\t\t<p>Big Vocab uses a method called Spaced Repetition to improve word recall. Think of it as a virtual flash card that's optimized to help you remember more words.</p>\r\n\t\t\t\t\t<a ui-sref=\"root.auth.register\" class=\"btn btn-red\">Sign Up</a>&nbsp;&nbsp;\r\n\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-outline\">Login</a>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>","<img src=\"../images/spinner/oval-sm.svg\" class=\"mr1\" width=\"{{ width }}\">","<div ng-if=\"show\" class=\"rounded bg-{{color}} px3 py2 fixed white h5 ng-animation-fadeInUp\" style=\"top: 24px; right: 24px; max-width: 240px;\">\n\t<div ng-transclude></div>\n</div>","<!-- overlay -->\n<div ng-if=\"show\" class=\"fixed z2 top-0 right-0 bottom-0 left-0 bg-darken-3\" ng-click=\"closeModal()\">\n</div>\n<!-- end: overlay -->\n\n<div ng-if=\"show\" class=\"fixed z3 top-0 right-0 bottom-0 left-0 ng-animation-fadeInUp\">\n\t<div class=\"flex flex-center flex-center-justified px2\" style=\"width: 100%; height: 100vh;\">\n\t\t<div class=\"sm-col-8 md-col-7 lg-col-5 relative {{ modalBg }}\">\n\t\t\t\n\t\t\t<!-- close button -->\n\t\t\t<div>\n\t\t\t\t<a class=\"ti-close absolute right-0 h3 p3\" ng-click=\"closeModal()\"></a>\n\t\t\t</div>\n\t\t\t<!-- end: close button -->\n\n\t\t\t<!-- content -->\n\t\t\t<div class=\"px4 py3 mt1\">\n\t\t\t\t<div ng-transclude></div>\n\t\t\t\t<!-- end: content -->\n\n\t\t\t\t<!-- buttons -->\n\t\t\t\t<div class=\"center mt1 mb1\">\n\t\t\t\t\t<button class=\"btn btn-primary mt2\" ng-click=\"yesCb(); closeModal()\" ng-if=\"showYesBtn\">{{ yesMessage }}</button>&nbsp;&nbsp;\n\t\t\t\t\t<button class=\"btn btn-primary mt2\" ng-click=\"noCb(); closeModal()\" ng-if=\"showNoBtn\">{{ noMessage }}</button>&nbsp;&nbsp;\n\t\t\t\t\t<button class=\"btn btn-red mt2\" ng-click=\"closeModal()\" ng-if=\"showAbortBtn\">Cancel</button>\n\t\t\t\t</div>\n\t\t\t\t<!-- end: buttons -->\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n</div>","<div class=\"bg-cover bg-gradient-navy\">\r\n\r\n\t<div class=\"flex flex-center\" style=\"min-height: 100vh\">\r\n\t\t<div class=\"container-sm flex-auto\">\r\n\t\t\t<div class=\"clearfix white\">\r\n\r\n\t\t\t\t<div class=\"sm-col sm-col-8 px2 mb3\">\r\n\t\t\t\t\t<div class=\"h2 light mb2\">Sign Up</div>\r\n\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-primary\">Sign up with Your Google Account</a>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"sm-col sm-col-4 px2\">\r\n\t\t\t\t\t<div class=\"border border-lighten-3 p2\">\r\n\t\t\t\t\t\t<p>Already have an account?</p>\r\n\t\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-outline block\">Login with Google</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>","<div class=\"bg-cover bg-gradient-navy\">\r\n\r\n\t<div class=\"flex flex-center\" style=\"min-height: 100vh;\">\r\n\t\t<div class=\"container flex-auto\">\r\n\t\t\t<div class=\"clearfix\">\r\n\r\n\t\t\t\t<div class=\"sm-col-6 p2 mx-auto white center\">\r\n\t\t\t\t\t<div class=\"h1 light mb2\">Login to Big Vocab</div>\r\n\t\t\t\t\t<a href=\"/auth/google\" class=\"btn btn-red\">Login with Google</a>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>","<div ui-view=\"root.nav-home\"></div>\r\n<div ui-view></div>","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name mainApp\n   * @description\n   *\n   */\n  angular\n    .module('mainApp', [\n      'ui.router'\n    ]);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name mainApp.factory:WordsService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .factory('WordsService', WordsService);\r\n\r\n  function WordsService($http) {\r\n\r\n    let WordsServiceBase = {};\r\n\r\n    // every word for this user\r\n    WordsServiceBase.getUserAll = userId => {\r\n      return $http.get('/api/words/all/' + userId);\r\n    };\r\n\r\n    // all words for this collection\r\n    WordsServiceBase.getAll = collectionId => {\r\n      return $http.get('/api/' + collectionId + '/words');\r\n    };\r\n\r\n    WordsServiceBase.create = word => {\r\n      return $http.post('/api/words', word);\r\n    };\r\n\r\n    WordsServiceBase.get = wordId => {\r\n      return $http.get('/api/words/' + wordId);\r\n    };\r\n\r\n    // find :: String -> String -> Promise({word})\r\n    WordsServiceBase.find = (collectionId, word) => {\r\n      return $http.get('/api/' + collectionId + '/words/' + word);\r\n    };\r\n\r\n    // find :: String -> String -> Promise({word})\r\n    WordsServiceBase.exists = (collectionId, word) => {\r\n      return $http.get('/api/' + collectionId + '/words/' + word + '/?exists');\r\n    };\r\n\r\n    // get only the words to be reviewed today\r\n    WordsServiceBase.getDue = collectionId => {\r\n      return $http.get('/api/'+ collectionId + '/words/?filter=dueToday');\r\n    };\r\n\r\n    WordsServiceBase.update = (wordId, wordUpdate) => {\r\n      return $http.put('/api/words/' + wordId, wordUpdate);\r\n    };\r\n\r\n    WordsServiceBase.delete = wordId => {\r\n      return $http.delete('/api/words/' + wordId);\r\n    };\r\n\r\n    return WordsServiceBase;\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class TestWordsCtrl {\r\n    constructor() {\r\n      let vm = this;\r\n      vm.ctrlName = 'TestWordsCtrl';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:TestWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('TestWordsCtrl', TestWordsCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class SidebarCtrl {\r\n    constructor() {\r\n\r\n      let vm = this;\r\n\r\n      vm.toggle = false;\r\n      vm.toggleSidebar = () => {\r\n        vm.toggle = !vm.toggle;\r\n      };\r\n\r\n      vm.navItems = [\r\n        {\r\n          id: 1,\r\n          title: 'Collections',\r\n          icon: 'ti-layers-alt',\r\n          link: 'mainApp.collections'\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'View All Words',\r\n          icon: 'ti-list',\r\n          link: 'mainApp.list-words'\r\n        },\r\n        // {\r\n        //   id: 3,\r\n        //   title: 'Test',\r\n        //   icon: 'ti-check-box',\r\n        //   link: 'mainApp.test-words'\r\n        // },\r\n        {\r\n          id: 4,\r\n          title: 'Import',\r\n          icon: 'ti-import',\r\n          link: 'mainApp.import'\r\n        },\r\n        {\r\n          id: 5,\r\n          title: 'Settings',\r\n          icon: 'ti-settings',\r\n          link: 'mainApp.settings'\r\n        },        \r\n        {\r\n          id: 6,\r\n          title: 'Log Out',\r\n          icon: 'ti-arrow-left',\r\n          link: 'mainApp.logout'\r\n        }\r\n      ];\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:SidebarCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('SidebarCtrl', SidebarCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name mainApp.factory:SettingsService\n   *\n   * @description\n   *\n   */\n  angular\n    .module('mainApp')\n    .factory('SettingsService', SettingsService);\n\n  function SettingsService($http) {\n\n    let SettingsServiceBase = {};\n\n    SettingsServiceBase.update = (userId, settingsUpdate) => {\n    \treturn $http.put('/api/users/' + userId, settingsUpdate);\n    };\n\n    return SettingsServiceBase;\n  }\n}());\n","(() => {\n  'use strict';\n\n  class SettingsCtrl {\n    constructor(SettingsService, user, $timeout) {\n\n      let vm = this;\n\n      // config ////////////////////////////////////////////////////////////////////////////\n\n      vm.formData = {};\n      vm.formData.maxDailyWords = user.maxDailyWords;\n\n      vm.placeholder = {\n        maxDailyWords: 'i.e. 100 (default: 150)'\n      };\n      vm.btnState = {\n        loading: false,\n        success: false\n      };\n      vm.notification = {\n        success: false,\n        error: false\n      };\n      vm.msg = {\n        success: 'Change successfully saved!',\n        error: 'Something went wrong. Please try again.'\n      };\n      vm.notificationSuccessMsg = vm.msg.success;\n      vm.notificationErrorMsg = vm.msg.error;\n\n      // helper functions /////////////////////////////////////////////////////////////////\n\n      function changeSettings (userId, maxDailyWords) {\n      \tlet settingsUpdate = { maxDailyWords: maxDailyWords };\n      \tconsole.log(settingsUpdate);\n\n      \treturn SettingsService.update(userId, settingsUpdate);\n      }\n\n      // main //////////////////////////////////////////////////////////////////////////////\n\n      vm.saveSettings = maxDailyWords => {\n      \tchangeSettings(user.id, maxDailyWords)\n      \t\t.then(dbRes => {\n\n      \t\t\tconsole.log(dbRes);\n            vm.btnState.loading = false;\n            vm.btnState.success = true;\n\n            vm.notification.success = true;\n\n            $timeout(() => {\n              vm.btnState.success = false;\n            }, 1500);\n          })\n          .catch(err => {\n            vm.btnState.loading = false;\n\n            vm.notification.error = true;\n          });\n      };\n\n    }\n  }\n\n  /**\n   * @ngdoc object\n   * @name mainApp.controller:SettingsCtrl\n   *\n   * @description\n   *\n   */\n  angular\n    .module('mainApp')\n    .controller('SettingsCtrl', SettingsCtrl);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class ReviewWordsCtrl {\r\n    constructor(WordsService, $stateParams, $moment, Sm2Service, ConfigService, DictionaryService, TextConvertService, $sce, ngAudio) {\r\n\r\n      let vm = this;\r\n\r\n      // config ////////////////////////////////////////////////////////////////////////////\r\n\r\n      let collectionId = $stateParams.collectionId;\r\n      vm.wordCounter = 0; // keeps track of which word user is reviewing\r\n      vm.showAnswer = false;\r\n      vm.editToggle = false;\r\n      vm.formData = {};\r\n      vm.finished = false;\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Change successfully saved!',\r\n        error: 'Something went wrong. Please try again.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n\r\n      // init //////////////////////////////////////////////////////////////////////////////\r\n\r\n      WordsService.getDue(collectionId)\r\n        .then(res => {\r\n          vm.words = angular.fromJson(res).data;\r\n          vm.totalWordsCount = vm.words.length;\r\n\r\n          vm.currentWord = getCurrentWord(vm.wordCounter, vm.words);\r\n\r\n          // get pronunciation of the current word\r\n          return DictionaryService.getPronunciation(ConfigService.forvoKey, vm.currentWord.word);\r\n        })\r\n        .then(pronunciationPath => {\r\n          vm.pronunciation = pronunciationPath !== null ? ngAudio.load(pronunciationPath) : null;\r\n\r\n          // initialize the edit form inputs\r\n          initEditWord(vm.currentWord);\r\n        })\r\n        .catch(errorHandler);\r\n\r\n      // helper functions /////////////////////////////////////////////////////////////////\r\n\r\n      function errorHandler (err) {\r\n        console.log('Something went wrong: ', err);\r\n      }\r\n\r\n      function getCurrentWord (wordCounter, words) {\r\n        let currentWord = words[wordCounter];\r\n        console.log(words);\r\n        currentWord.definition = TextConvertService.fromHtml(currentWord.definition);\r\n\r\n        return currentWord;\r\n      }\r\n\r\n      function initEditWord (currentWord) {\r\n        vm.formData.word = currentWord.word;\r\n        vm.formData.definition = currentWord.definition;\r\n      }\r\n\r\n      // main //////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.toggleAnswer = () => {\r\n        vm.showAnswer = !vm.showAnswer;\r\n      };\r\n\r\n      vm.toggleEdit = () => {\r\n        vm.editToggle = !vm.editToggle;\r\n      };\r\n\r\n      vm.playPronunciation = () => {\r\n        if (vm.pronunciation !== null) {\r\n          vm.pronunciation.play();\r\n        }\r\n      };\r\n\r\n      vm.submitEdit = (wordId, word, definition) => {\r\n        let wordUpdate = {\r\n          word: word,\r\n          definition: TextConvertService.toHtml(definition)\r\n        };\r\n\r\n        WordsService.update(wordId, wordUpdate)\r\n          .then(() => {\r\n            vm.currentWord.word = word;\r\n            vm.currentWord.definition = TextConvertService.fromHtml(definition);\r\n            \r\n            vm.notification.success = true;\r\n\r\n            vm.toggleEdit();\r\n          })\r\n          .catch(err => {\r\n            vm.notification.error = true;\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n      };\r\n\r\n      vm.submitRes = (word, choice) => {\r\n\r\n        let newEaseFactor = Sm2Service.calcEaseFactor(word.easeFactor, choice);\r\n        let newPhase = Sm2Service.calcPhase(word.phase, word.interval, choice);\r\n        let newInterval = Sm2Service.calcInterval(word.phase, word.interval, word.easeFactor, choice);\r\n        let lastReviewed = $moment();\r\n        let lastReviewedEpochTime = lastReviewed.unix();\r\n        let newNextReview = Sm2Service.calcNextReview(newInterval);\r\n        let newNextReviewEpochTime = newNextReview.unix();\r\n\r\n        let newReviewRes = angular.copy(word.reviewRes);\r\n        newReviewRes[choice]++;\r\n\r\n        let wordUpdate = {\r\n          reviewRes: newReviewRes,\r\n          lastReviewedEpochTime: lastReviewedEpochTime,\r\n          easeFactor: newEaseFactor,\r\n          phase: newPhase,\r\n          interval: newInterval,\r\n          nextReviewEpochTime: newNextReviewEpochTime\r\n        };\r\n\r\n        WordsService.update(word.id, wordUpdate)\r\n          .then(() => {\r\n            vm.wordCounter++;\r\n            vm.currentWord = vm.words[vm.wordCounter];\r\n\r\n            if (vm.currentWord === undefined) {\r\n              vm.finished = true;\r\n            } else {\r\n              vm.currentWord.definition = TextConvertService.fromHtml(vm.currentWord.definition);\r\n\r\n              // get pronunciation of the current word\r\n              return DictionaryService.getPronunciation(ConfigService.forvoKey, vm.currentWord.word);\r\n            }\r\n          })\r\n          .then(pronunciationPath => {\r\n            vm.pronunciation = pronunciationPath !== null ? ngAudio.load(pronunciationPath) : null;\r\n\r\n            vm.toggleAnswer();\r\n\r\n            // intialize edit fields\r\n            initEditWord(vm.currentWord);\r\n          })\r\n          .catch(err => {\r\n            console.log('Something went wrong: ', err);\r\n            vm.toggleAnswer();\r\n          });\r\n      \r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ReviewWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('ReviewWordsCtrl', ReviewWordsCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  angular\n    .module('mainApp')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('mainApp', {\n        abstract: true,\n        url: '/main-app',\n        views: {\n          '': {\n            templateUrl: 'main-app/main-app.tpl.html',\n          },\n          'sidebar@mainApp': {\n            templateUrl: 'main-app/sidebar.tpl.html',\n            controller: 'SidebarCtrl',\n            controllerAs: 'sidebar'\n          }\n        }\n      })\n      .state('mainApp.collections', {\n        url: '/collections',\n        templateUrl: 'main-app/collections.tpl.html',\n        controller: 'CollectionsCtrl',\n        controllerAs: 'collections',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.add-words', {\n        url: '/collections/:collectionId/add-words',\n        templateUrl: 'main-app/add-words.tpl.html',\n        controller: 'AddWordsCtrl',\n        controllerAs: 'addWords',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.review-words', {\n        url: '/collections/:collectionId/review-words',\n        templateUrl: 'main-app/review-words.tpl.html',\n        controller: 'ReviewWordsCtrl',\n        controllerAs: 'reviewWords',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.list-words', {\n        url: '/list-words',\n        templateUrl: 'main-app/list-words.tpl.html',\n        controller: 'ListWordsCtrl',\n        controllerAs: 'listWords',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.test-words', {\n        url: '/test-words',\n        templateUrl: 'main-app/test-words.tpl.html',\n        controller: 'TestWordsCtrl',\n        controllerAs: 'testWords',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.logout', {\n        url: '/logout',\n        templateUrl: 'main-app/logout.tpl.html',\n        controller: 'LogoutCtrl',\n        controllerAs: 'logout',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.import', {\n        url: '/import',\n        templateUrl: 'main-app/import.tpl.html',\n        controller: 'ImportCtrl',\n        controllerAs: 'import',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      })\n      .state('mainApp.settings', {\n        url: '/settings',\n        templateUrl: 'main-app/settings.tpl.html',\n        controller: 'SettingsCtrl',\n        controllerAs: 'settings',\n        resolve: {\n          user: AuthService => {\n            return AuthService.checkLoggedIn();\n          }\n        }\n      });\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class LogoutCtrl {\r\n    constructor(AuthService, $window) {\r\n\r\n      let vm = this;\r\n      \r\n      vm.logout = () => {\r\n        AuthService.logout()\r\n          .then(() => {\r\n            console.log('User logged out successfully');\r\n            $window.location = '/#/home';\r\n          })\r\n          .catch(err => {\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n      };\r\n\r\n      vm.goBack = () => {\r\n        $window.history.go(-1);\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:LogoutCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('LogoutCtrl', LogoutCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class ListWordsCtrl {\r\n    constructor(CollectionsService, WordsService, TextConvertService, ConfigService, DictionaryService, $timeout, user, ngAudio) {\r\n\r\n      let vm = this;\r\n\r\n\t\t\t// config ////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.formData = {};\r\n      vm.showEdit = {};\r\n      vm.displayLimit = 200;\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Change successfully saved!',\r\n        deleteSuccess: 'Word deleted succesfully',\r\n        error: 'Something went wrong. Please try again.',\r\n        pronunciationError: 'Sorry - pronunciation for this word cannot be found.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n\r\n\t\t\t// init //////////////////////////////////////////////////////////////////////////////\r\n\r\n\t\t\tgetAllWords(user.id);\r\n\r\n      // helper functions //////////////////////////////////////////////////////////////////\r\n\r\n      function submitErrorHandler (err) {\r\n        vm.btnState.loading = false;\r\n        vm.notification.error = true;\r\n        console.log('Something went wrong: ', err);\r\n      }\r\n\r\n      function getAllWords (userId) {\r\n\t      WordsService.getUserAll(userId)\r\n\t      \t.then(res => {\r\n\t      \t\tvar words = angular.fromJson(res).data;\r\n\r\n\t      \t\tvm.words = words;\r\n\t      \t\tvm.wordsCount = words.length;\r\n\r\n            vm.words.map(word => {\r\n              word.definition = TextConvertService.fromHtml(word.definition);\r\n              return word;\r\n            });\r\n\r\n\t      \t\tinitShowEdit(words);\r\n\t      \t})\r\n\t      \t.catch(submitErrorHandler);\r\n      }\r\n\r\n      function initShowEdit (words) {\r\n      \twords.map(word => {\r\n      \t\tvm.showEdit[word.id] = false;\r\n      \t\treturn word;\r\n      \t});\r\n      }\r\n\r\n      // main //////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.toggleEdit = word => {\r\n    \t\tvm.formData.word = word.word;\r\n\t  \t\tvm.formData.definition = word.definition;\r\n\r\n      \tvm.showEdit[word.id] = !vm.showEdit[word.id];\r\n      };\r\n\r\n      vm.modalYes = wordId => {\r\n        WordsService.delete(wordId)\r\n          .then(() => {\r\n            // update the current view to reflect the removal\r\n            var currentWord = vm.words.filter(currentWord => {\r\n              return currentWord.id === wordId;\r\n            })[0];\r\n            var index = vm.words.indexOf(currentWord);\r\n            vm.words.splice(index, 1);\r\n\r\n            vm.notificationSuccessMsg = vm.msg.deleteSuccess;\r\n            vm.notification.success = true;\r\n          })\r\n          .catch(submitErrorHandler);\r\n      };\r\n\r\n      vm.modalClose = () => {\r\n        vm.showModal = false;\r\n        // delete the item on local\r\n      };\r\n\r\n      vm.playPronunciation = word => {\r\n        DictionaryService.getPronunciation(ConfigService.forvoKey, word.word)\r\n          .then(pronunciationPath => {\r\n            vm.pronunciation = pronunciationPath !== null ? ngAudio.load(pronunciationPath) : null;\r\n            if (vm.pronunciation !== null) {\r\n              vm.pronunciation.play();\r\n            } else {\r\n              vm.notificationErrorMsg = vm.msg.pronunciationError;\r\n              vm.notification.error = true;\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n      };\r\n\r\n      vm.saveChanges = (isValid, word, formData) => {\r\n      \tif (!isValid) { return; }\r\n\r\n      \tWordsService.update(word.id, formData)\r\n      \t\t.then(() => {\r\n            vm.btnState.loading = false;\r\n            vm.btnState.success = true;\r\n\r\n            vm.notificationSuccessMsg = vm.msg.success;\r\n            vm.notification.success = true;\r\n\r\n            $timeout(() => {\r\n              vm.btnState.success = false;\r\n\t\r\n\t            vm.showEdit[word.id] = !vm.showEdit[word.id];\r\n\r\n\t            // update the current view to reflect the change\r\n\t            vm.words.map(currentWord => {\r\n\t            \tif (currentWord.id === word.id) {\r\n\t            \t\tcurrentWord.word = vm.formData.word;\r\n\t            \t\tcurrentWord.definition = TextConvertService.fromHtml(vm.formData.definition);\r\n\t            \t}\r\n\r\n\t            \treturn currentWord;\r\n\t            }); \r\n            }, 1500);\r\n      \t\t})\r\n      \t\t.catch(submitErrorHandler);\r\n      };\r\n\r\n      vm.submitDelete = wordId => {\r\n        vm.showModal = true;\r\n        vm.selectedWordId = wordId;\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ListWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('ListWordsCtrl', ListWordsCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class ImportCtrl {\r\n    constructor(ImportService, WordsService, DictionaryService, ConfigService, SettingsService, user, $timeout, $window, $q) {\r\n\r\n      let vm = this;\r\n      \r\n      // config ///////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.formData = {};\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.placeholder = {\r\n        files: 'Click to upload anki text files',\r\n        collectionTitle: 'Add collection title here'\r\n      };\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Words successfully imported!',\r\n        error: 'Something went wrong. Please try again.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n\r\n      // helper functions /////////////////////////////////////////////////////////////////\r\n\r\n      function importTextfile (userId, data) {\r\n        \r\n        vm.btnState.loading = true;\r\n\r\n        let promises = [\r\n        \tImportService.anki(userId, data), \r\n        \tSettingsService.update(user.id, { maxWords: 150 })\r\n        ];\r\n\r\n        $q.all(promises)\r\n          .then(dbRes => {\r\n            let dbResData = angular.fromJson(dbRes[0]).data;\r\n            let collectionId = dbResData.generated_keys[0];\r\n\r\n            return WordsService.getAll(collectionId);\r\n          })\r\n          .catch(err => {\r\n            vm.btnState.loading = false;\r\n\r\n            vm.notification.error = true;\r\n\r\n            console.log('Something went wrong with importing', err);\r\n\r\n            return $q.reject(err);\r\n          })\r\n          .then(res => {\r\n            let words = angular.fromJson(res).data;\r\n            let promises = [];\r\n\r\n            words.forEach(word => {\r\n              promises.push(addPronunciation(ConfigService.forvoKey, word));\r\n            });\r\n\r\n            return $q.all(promises);\r\n          })\r\n          .then(() => {\r\n            vm.btnState.loading = false;\r\n            vm.btnState.success = true;\r\n\r\n            vm.notification.success = true;\r\n            \r\n            $timeout(() => {\r\n              vm.btnState.success = false;\r\n              $window.location.href = '/#/main-app/collections';\r\n            }, 1500);\r\n          })\r\n          .catch(err => {\r\n            vm.btnState.loading = false;\r\n            vm.btnState.success = true;\r\n\r\n            vm.notification.success = true;\r\n\r\n            $timeout(() => {\r\n              vm.btnState.success = false;\r\n              $window.location.href = '/#/main-app/collections';\r\n            }, 1500);\r\n\r\n            console.log('Import successful, but adding pronunciations failed: ', err);\r\n          });\r\n\r\n      }\r\n\r\n      function addPronunciation (forvoKey, word) {\r\n        let deferred = $q.defer();\r\n\r\n        DictionaryService.getPronunciation(forvoKey, word.word)\r\n          .then(res => {\r\n            let pronunciationData = angular.fromJson(res).data;\r\n            let pronunciationPath = pronunciationData.attributes.total !== 0 ? pronunciationData.items[0].pathmp3 : null;\r\n\r\n            let wordUpdate = {\r\n              pronunciationPath: pronunciationPath\r\n            };\r\n\r\n            return WordsService.update(word.id, wordUpdate);\r\n          })\r\n          .then(dbRes => {\r\n            deferred.resolve(dbRes);\r\n          })\r\n          .catch(err => {\r\n            deferred.reject(err);\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n\r\n        return deferred.promise;\r\n      }\r\n\r\n      // main /////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.importTextfile = (isValid, formData) => {\r\n\r\n        if (!isValid) { return; }\r\n\r\n        importTextfile(user.id, formData);\r\n\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ImportCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('ImportCtrl', ImportCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name mainApp.factory:CollectionsService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .factory('CollectionsService', CollectionsService);\r\n\r\n  function CollectionsService($http) {\r\n\r\n    let CollectionsServiceBase = {};\r\n\r\n    CollectionsServiceBase.getAll = userId => {\r\n      return $http.get('/api/' + userId + '/collections');\r\n    };\r\n\r\n    CollectionsServiceBase.create = collection => {\r\n      return $http.post('/api/collections', collection);\r\n    };\r\n\r\n    CollectionsServiceBase.get = collectionId => {\r\n      return $http.get('/api/collections/' + collectionId);\r\n    };\r\n\r\n    CollectionsServiceBase.merge = (collectionId, newCollectionId) => {\r\n      return $http.put('/api/collections/merge/' + collectionId, newCollectionId);\r\n    };\r\n\r\n    CollectionsServiceBase.update = (collectionId, newCollection) => {\r\n      return $http.put('/api/collections/' + collectionId, newCollection);\r\n    };\r\n\r\n    CollectionsServiceBase.delete = collectionId => {\r\n      return $http.delete('/api/collections/' + collectionId);\r\n    };\r\n\r\n    return CollectionsServiceBase;\r\n\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class CollectionsCtrl {\r\n    constructor(CollectionsService, WordsService, $timeout, user, $q) {\r\n\r\n      let vm = this;\r\n\r\n      // config ///////////////////////////////////////////////////////////////////////////\r\n      \r\n      vm.formData = {};\r\n      vm.placeholder = {\r\n        collectionTitle: 'Enter Collection name here'\r\n      };\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.user = user;\r\n      vm.checks = {};\r\n      vm.showEdit = false;\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Success!',\r\n        error: 'Something went wrong - please try again.',\r\n        mergeError: 'Please select two or more collections.',\r\n        noneSelectedError: 'Please select one or more collections.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n      vm.showModal = false;\r\n\r\n      // init /////////////////////////////////////////////////////////////////////////////\r\n      \r\n      getAllCollections(user);\r\n\r\n      // helper functions //////////////////////////////////////////////////////////////////\r\n      \r\n      function getAllCollections (user) {\r\n        \r\n        CollectionsService.getAll(user.id)\r\n          .then(res => {\r\n            vm.collectionList = angular.fromJson(res).data;\r\n\r\n            // intiialize checks to all false\r\n            vm.checks = initChecks(vm.collectionList);\r\n          })\r\n          .catch(err => {\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n      }\r\n\r\n      function mergeCollections (collectionIds) {\r\n        let mainCollectionId = collectionIds[0];\r\n        let remainingCollectionIds = collectionIds.filter(collectionId => {\r\n          return collectionId !== mainCollectionId;\r\n        });\r\n\r\n        let promises = [];\r\n\r\n        remainingCollectionIds.forEach(collectionId => {\r\n          promises.push(CollectionsService.merge(collectionId, { newCollectionId: mainCollectionId }));\r\n        });\r\n\r\n        return $q.all(promises);\r\n      }\r\n\r\n      function deleteCollections (collectionIds) {\r\n        let promises = [];\r\n\r\n        collectionIds.forEach(collectionId => {\r\n          promises.push(CollectionsService.delete(collectionId));\r\n        });\r\n\r\n        return $q.all(promises);\r\n      }\r\n\r\n      function initChecks(collections) {\r\n        let checks = {};\r\n\r\n        collections.forEach(collection => {\r\n          checks[collection.id] = false;\r\n        });\r\n\r\n        return checks;\r\n      }\r\n\r\n      function resetForm () {\r\n        vm.addCollectionForm.collectionTitle.$touched = false;\r\n        vm.addCollectionForm.$submitted = false;\r\n        vm.formData = {};\r\n      }\r\n\r\n      // main /////////////////////////////////////////////////////////////////////////////\r\n      \r\n      vm.toggleEdit = () => {\r\n        vm.showEdit = !vm.showEdit;\r\n      };\r\n\r\n      vm.toggleSuccessNotification = (successMessage) => {\r\n        vm.notification.success = true;\r\n        vm.notificationSuccessMsg = successMessage;\r\n      };\r\n\r\n      vm.toggleErrorNotification = (errorMessage) => {\r\n        vm.notification.error = true;\r\n        vm.notificationErrorMsg = errorMessage;\r\n      };\r\n\r\n      vm.createCollection = (isValid, collection) => {\r\n        if (!isValid) { return; }\r\n\r\n        vm.btnState.loading = true;\r\n\r\n        CollectionsService.create(collection)\r\n          .then(() => {\r\n            vm.btnState.loading = false;\r\n            vm.btnState.success = true;\r\n\r\n            vm.toggleSuccessNotification(vm.msg.success);\r\n\r\n            getAllCollections(user);\r\n            resetForm();\r\n\r\n            $timeout(() => {\r\n              vm.btnState.success = false;\r\n            }, 1500);\r\n          })\r\n          .catch(err => {\r\n            vm.btnState.loading = false;\r\n            vm.toggleErrorNotification(vm.msg.mergeError);\r\n            \r\n            console.log('Something went wrong: ', err);\r\n          });\r\n      };\r\n\r\n      vm.mergeCollections = (collections, checks) => {\r\n\r\n        let mergeList = [];\r\n\r\n        collections.forEach((collection) => {\r\n          if (checks[collection.id] === true) {\r\n            mergeList.push(collection.id);\r\n          }\r\n        });\r\n\r\n        if (mergeList.length >= 2) {\r\n          mergeCollections(mergeList)\r\n            .then(() => {\r\n              vm.toggleSuccessNotification(vm.msg.success);\r\n              getAllCollections(user);\r\n            })\r\n            .catch(err => {\r\n              vm.toggleErrorNotification(vm.msg.error);\r\n              console.log('Something went wrong: ', err);\r\n            });\r\n        } else {\r\n          vm.toggleErrorNotification(vm.msg.mergeError);\r\n        }\r\n\r\n      };\r\n\r\n      vm.deleteCollections = (collections, checks) => {\r\n\r\n        let deleteList = [];\r\n\r\n        collections.forEach((collection) => {\r\n          if (checks[collection.id] === true) {\r\n            deleteList.push(collection.id);\r\n          }\r\n        });\r\n\r\n        if (deleteList.length >= 1) {\r\n          deleteCollections(deleteList)\r\n            .then(() => {\r\n              vm.toggleSuccessNotification(vm.msg.success);\r\n              getAllCollections(user);\r\n            })\r\n            .catch(err => {\r\n              vm.toggleErrorNotification(vm.msg.error);\r\n              console.log('Something went wrong: ', err);\r\n            });\r\n        } else {\r\n          vm.toggleErrorNotification(vm.msg.noneSelectedError);\r\n        }\r\n\r\n      };\r\n\r\n      vm.showConfirmDeleteModal = (collections, checks) => {\r\n        let deleteList = [];\r\n\r\n        collections.forEach((collection) => {\r\n          if (checks[collection.id] === true) {\r\n            deleteList.push(collection.id);\r\n          }\r\n        });\r\n\r\n        if (deleteList.length >= 1) {\r\n          vm.showModal = true;\r\n        } else {\r\n          vm.toggleErrorNotification(vm.msg.noneSelectedError);\r\n        }\r\n      };\r\n\r\n      vm.confirmModal = () => {\r\n        vm.deleteCollections(vm.collectionList, vm.checks);\r\n      };\r\n\r\n      vm.closeModal = () => {\r\n        vm.showModal = false;\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:CollectionsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('CollectionsCtrl', CollectionsCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class AddWordsCtrl {\r\n    constructor(ConfigService, DictionaryService, WordsService, TextConvertService, $stateParams, $timeout, $moment) {\r\n\r\n      let vm = this;\r\n\r\n      // config //////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.formData = {};\r\n      vm.placeholder = {\r\n        word: 'i.e. audacious',\r\n        definition: 'i.e. Fearlessly, often recklessly daring; bold. See Synonyms at adventurous, brave.'\r\n      };\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.collectionId = $stateParams.collectionId;\r\n      vm.notification = {\r\n        success: false,\r\n        error: false\r\n      };\r\n      vm.msg = {\r\n        success: 'Word successfully added!',\r\n        error: 'Something went wrong. Please try again.'\r\n      };\r\n      vm.notificationSuccessMsg = vm.msg.success;\r\n      vm.notificationErrorMsg = vm.msg.error;\r\n      vm.showModal = false;\r\n\r\n      // helper functions //////////////////////////////////////////////////////////////////\r\n      \r\n      function submitSuccessHandler () {\r\n        vm.btnState.loading = false;\r\n        vm.btnState.success = true;\r\n\r\n        resetForm();\r\n        vm.definitions = []; // reset definition list\r\n\r\n        vm.notification.success = true;\r\n\r\n        $timeout(() => {\r\n          vm.btnState.success = false;\r\n        }, 1500);\r\n      }\r\n\r\n      function submitErrorHandler (err) {\r\n        vm.btnState.loading = false;\r\n        vm.notification.error = true;\r\n        console.log('Something went wrong: ', err);\r\n      }\r\n\r\n      function composeWordDetails (collectionId, formData) {\r\n        let lastReviewed = $moment();\r\n        let lastReviewedEpochTime = lastReviewed.unix();\r\n        let nextReview = $moment().add(1, 'minutes');\r\n        let nextReviewEpochTime = nextReview.unix();\r\n\r\n        let convertedDefinition = TextConvertService.toHtml(formData.definition);\r\n\r\n        let word = {\r\n          word: formData.word,\r\n          definition: convertedDefinition,\r\n          collectionId: collectionId,\r\n          lastReviewedEpochTime: lastReviewedEpochTime,\r\n          interval: 1,\r\n          nextReviewEpochTime: nextReviewEpochTime,\r\n          phase: 'learning',\r\n          reviewRes: {\r\n            again: 0,\r\n            hard: 0,\r\n            good: 0,\r\n            easy: 0\r\n          },\r\n          easeFactor: 2.5\r\n        };\r\n\r\n        return word;\r\n      }\r\n\r\n      function addWord (collectionId, formData) {\r\n        var word = composeWordDetails(collectionId, formData);\r\n\r\n        WordsService.create(word)\r\n          .then(submitSuccessHandler)\r\n          .catch(submitErrorHandler);\r\n      }\r\n\r\n      function updateWord (collectionId, formData) {\r\n        var word = composeWordDetails(collectionId, formData);\r\n\r\n        WordsService.find(collectionId, formData.word)\r\n          .then(res => {\r\n            var wordId = angular.fromJson(res).data[0].id;\r\n            return WordsService.update(wordId, word);\r\n          })\r\n          .then(submitSuccessHandler)\r\n          .catch(submitErrorHandler);\r\n      }\r\n\r\n      function checkDuplicate (collectionId, formData) {\r\n        WordsService.exists(collectionId, formData.word)\r\n          .then(res => {\r\n            var isDuplicate = angular.fromJson(res).data;\r\n\r\n            if (isDuplicate) { \r\n              vm.showModal = true;\r\n              vm.btnState.loading = false;\r\n            } else {\r\n              addWord(collectionId, formData);\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.log('checkDuplicate err: ', err);\r\n          });\r\n      }\r\n\r\n      function resetForm () {\r\n        vm.addWordForm.word.$touched = false;\r\n        vm.addWordForm.definition.$touched = false;\r\n        vm.addWordForm.$submitted = false;\r\n        vm.formData = {};\r\n      }\r\n\r\n      // main /////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.modalClose = () => {\r\n        vm.showModal = false;\r\n      };\r\n\r\n      vm.modalYes = (collectionId, formData) => {\r\n        updateWord(collectionId, formData);\r\n      };\r\n\r\n      vm.modalNo = (collectionId, formData) => {\r\n        addWord(collectionId, formData);\r\n      };\r\n\r\n      vm.getDefinition = word => {\r\n        if (word !== undefined) {\r\n          DictionaryService.getDefinition(ConfigService.mashapeKey, word)\r\n            .then(res => {\r\n              vm.definitions = res.data.definitions;\r\n            })\r\n            .catch(err => {\r\n              console.log('Something went wrong; ', err);\r\n            });\r\n        }\r\n      };\r\n\r\n      vm.submit = (isValid, collectionId, formData) => {\r\n        if (!isValid) { return; }\r\n\r\n        vm.btnState.loading = true;\r\n\r\n        checkDuplicate(collectionId, formData);\r\n      };\r\n\r\n      vm.copyDefinition = definition => {\r\n        if (vm.formData.definition !== undefined) {\r\n          vm.formData.definition = vm.formData.definition + '\\n\\n' + definition;\r\n        } else {\r\n          vm.formData.definition = definition;\r\n        }\r\n      };\r\n\r\n      vm.resetForm = () => {\r\n        resetForm();\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:AddWordsCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('AddWordsCtrl', AddWordsCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name home\n   * @description\n   *\n   */\n  angular\n    .module('home', [\n      'ui.router'\n    ]);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class NavHomeCtrl {\r\n    constructor(AuthService, $window) {\r\n\r\n      let vm = this;\r\n\r\n      // config //////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.user = false;\r\n\r\n      vm.setActive = page => {\r\n        vm.active = page;\r\n      };\r\n\r\n      // init ////////////////////////////////////////////////////////////////////////////\r\n      \r\n      AuthService.isLoggedIn()\r\n        .then(user => {\r\n          if (user.data !== false) {\r\n            vm.user = true;\r\n            $window.location = '/#/main-app/collections';\r\n          } \r\n\r\n          console.log('Logged in?', vm.user);\r\n        })\r\n        .catch(err => {\r\n          console.log('Something went wrong: ', err);\r\n        });\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name home.controller:NavHomeCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('home')\r\n    .controller('NavHomeCtrl', NavHomeCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  angular\n    .module('home')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('root', {\n        abstract: true,\n        views: {\n          '': {\n            templateUrl: 'home/root.tpl.html',\n          },\n          'nav-home@root': {\n            templateUrl: 'home/nav-home.tpl.html',\n            controller: 'NavHomeCtrl',\n            controllerAs: 'navHome'\n          }\n        }\n      })\n      .state('root.home', {\n        url: '/home',\n        templateUrl: 'home/home.tpl.html',\n        controller: 'HomeCtrl',\n        controllerAs: 'home'\n      });\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class HomeCtrl {\r\n    constructor() {\r\n      let vm = this;\r\n      vm.ctrlName = 'HomeCtrl';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name home.controller:HomeCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('home')\r\n    .controller('HomeCtrl', HomeCtrl);\r\n}());\r\n","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name common\n   * @description\n   *\n   */\n  angular\n    .module('common', []);\n}());\n","(() => {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name common.factory:TextConvertService\n   *\n   * @description\n   *\n   */\n  angular\n    .module('common')\n    .factory('TextConvertService', TextConvertService);\n\n  function TextConvertService() {\n\n    let TextConvertServiceBase = {};\n\n    TextConvertServiceBase.toHtml = text => {\n      let convertedText = text.replace(/\\n/g, '<br>');\n      return convertedText;\n    };\n\n    TextConvertServiceBase.fromHtml = text => {\n      let convertedText = text.replace(/<br>/g, '\\n')\n                              .replace(/<div>/g, '\\n')\n                              .replace(/<\\/div>/g, '\\n')\n                              .replace(/&amp;/g, '&')\n                              .replace(/&nbsp;/g, ' ')\n                              .replace(/&gt;/g, '>');\n      return convertedText;\n    };\n\n    return TextConvertServiceBase;\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:spinner\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <example module=\"common\">\r\n       <file name=\"index.html\">\r\n        <spinner></spinner>\r\n       </file>\r\n     </example>\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .directive('spinner', spinner);\r\n\r\n  function spinner() {\r\n    return {\r\n      restrict: 'EA',\r\n      scope: {},\r\n      templateUrl: 'common/spinner-directive.tpl.html',\r\n      replace: true,\r\n      link(scope, element, attrs) {\r\n        /*jshint unused:false */\r\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\r\n        scope.width = attrs.width;\r\n      }\r\n    };\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:Sm2Service\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .factory('Sm2Service', Sm2Service);\r\n\r\n  function Sm2Service($moment) {\r\n    let Sm2ServiceBase = {};\r\n\r\n    /*    \r\n      SM2 (Super Memo 2) Algorithm\r\n\r\n      Learning phase: 1min / 10min\r\n      Review phase default: 4 days\r\n      I(n) = I(n-1) * EF\r\n      Minimum EF: 1.3\r\n\r\n      Review response:\r\n      Again: reset phase to learning + -20% to EF\r\n      Hard: -15% to EF\r\n      Good: do nothing\r\n      Easy: +15% to EF\r\n    */\r\n   \r\n    // main //////////////////////////////////////////////////////////////////////////////\r\n\r\n    // calcEaseFactor :: Float -> String -> Float\r\n    Sm2ServiceBase.calcEaseFactor = (easeFactor, choice) => {\r\n      let oldEaseFactor = easeFactor;\r\n      let newEaseFactor;\r\n      let minEaseFactor = 1.3;\r\n\r\n      switch (choice) {\r\n        case 'again':\r\n          newEaseFactor = oldEaseFactor - 0.2;\r\n          newEaseFactor = newEaseFactor < minEaseFactor ? minEaseFactor : newEaseFactor;\r\n          break;\r\n        case 'hard':\r\n          newEaseFactor = oldEaseFactor - 0.15;\r\n          newEaseFactor = newEaseFactor < minEaseFactor ? minEaseFactor : newEaseFactor;\r\n          break;\r\n        case 'good':\r\n          newEaseFactor = oldEaseFactor;\r\n          break;\r\n        case 'easy':\r\n          newEaseFactor = oldEaseFactor + 0.15;\r\n          break;\r\n      }\r\n\r\n      return newEaseFactor;\r\n    };\r\n\r\n    // calcPhase :: String -> Integer -> String -> String\r\n    Sm2ServiceBase.calcPhase = (phase, interval, choice) => {\r\n      if (choice === 'again') {\r\n        return 'learning';\r\n      } else if (choice === 'easy') {\r\n        return 'review';\r\n      }\r\n\r\n      if (phase === 'learning') {\r\n        if  (interval === 1) {\r\n          return 'learning';\r\n        } else if (interval === 10) {\r\n          return 'review';\r\n        }\r\n      }\r\n\r\n      if (phase === 'review') {\r\n        return 'review';\r\n      }\r\n    };\r\n\r\n    // calcInterval :: String -> Integer -> Float -> String -> Integer\r\n    // note: interval is in minutes\r\n    Sm2ServiceBase.calcInterval = (phase, interval, easeFactor, choice) => {\r\n      if (choice === 'again') {\r\n        return 1;\r\n      } else if (choice === 'easy' && phase === 'learning') {\r\n        return 4 * 24 * 60;\r\n      }\r\n\r\n      if (phase === 'learning') {\r\n        switch (interval) {\r\n          case 1:\r\n            return 10;\r\n          case 10:\r\n            return 4 * 24 * 60;\r\n        }\r\n      } else if (phase === 'review') {\r\n        return interval * easeFactor;\r\n      }\r\n    };\r\n\r\n    Sm2ServiceBase.calcNextReview = (newInterval) => {\r\n      return $moment().add(newInterval, 'minutes');\r\n    };\r\n\r\n    return Sm2ServiceBase;\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:notification\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <notification show=\"collections.showNotification\" color=\"green\">Some message</notification>\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .directive('notification', notification);\r\n\r\n  function notification($timeout) {\r\n    return {\r\n      restrict: 'EA',\r\n      scope: {\r\n        show: '=',\r\n        color: '@'\r\n      },\r\n      templateUrl: 'common/notification-directive.tpl.html',\r\n      transclude: true,\r\n      replace: false,\r\n      link(scope, element, attrs) {\r\n        /*jshint unused:false */\r\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\r\n        scope.$watch('show', function () {\r\n          $timeout(() => {\r\n            scope.show = false;\r\n          }, 2500);\r\n        });\r\n      }\r\n    };\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:modal\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <modal show=\"collections.showModal\" \r\n            modal-bg=\"bg-red\" \r\n            yes-cb=\"collections.confirm()\" \r\n            no-cb=\"collections.no()\" \r\n            yes-message=\"Yes, delete\" \r\n            no-message=\"No, don't save\"\r\n            add-abort-button>\r\n     </modal>\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .directive('modal', modal);\r\n\r\n  function modal() {\r\n    return {\r\n      restrict: 'EA',\r\n      scope: {\r\n        show: '=',\r\n        yesCb: '&?',\r\n        noCb: '&?',\r\n      },\r\n      templateUrl: 'common/modal-directive.tpl.html',\r\n      replace: false,\r\n      transclude: true,\r\n      link(scope, element, attrs) {\r\n        /*jshint unused:false */\r\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\r\n        scope.modalBg = attrs.modalBg || '';\r\n\r\n        scope.yesMessage = attrs.yesMessage || 'Yes';\r\n        scope.noMessage = attrs.noMessage || 'No';\r\n\r\n        scope.showYesBtn = scope.yesCb !== undefined ? true : false;\r\n        scope.showNoBtn = scope.noCb !== undefined ? true : false;\r\n\r\n        scope.showAbortBtn = attrs.addAbortButton !== undefined ? true : false;\r\n\r\n        scope.closeModal = () => {\r\n          scope.show = false;\r\n        };\r\n      }\r\n    };\r\n  }\r\n}());\r\n","(() => {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name common.factory:ImportService\n   *\n   * @description\n   *\n   */\n  angular\n    .module('common')\n    .factory('ImportService', ImportService);\n\n  function ImportService($http) {\n    let ImportServiceBase = {};\n\n    // anki :: String -> { collectionTitle, [files] } -> {dbRes}\n    ImportServiceBase.anki = (userId, data) => {\n      return $http.post('/api/import/anki/' + userId, data);\n    };\n\n    return ImportServiceBase;\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @name common.directive:fileread\r\n   * @restrict EA\r\n   * @element\r\n   *\r\n   * @description\r\n   *\r\n   * @example\r\n     <example module=\"common\">\r\n       <file name=\"index.html\">\r\n        <fileread></fileread>\r\n       </file>\r\n     </example>\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .directive('fileread', fileread);\r\n\r\n  function fileread() {\r\n    return {\r\n      restrict: 'A',\r\n      scope: {\r\n        fileread: '='\r\n      },\r\n      replace: false,\r\n      link(scope, element, attrs) {\r\n        /*jshint unused:false */\r\n        /*eslint \"no-unused-vars\": [2, {\"args\": \"none\"}]*/\r\n\r\n        element.bind(\"change\", function (changeEvent) {\r\n          scope.fileread = [];\r\n          var files = changeEvent.target.files;\r\n\r\n          for (let i = 0, f; f = files[i]; i++) {\r\n            var reader = new FileReader();\r\n\r\n            reader.onload = (function (file) {\r\n              return function (loadEvent) {\r\n                scope.$apply(function () {\r\n                  scope.fileread.push({ name: file.name, content: loadEvent.target.result });\r\n                });\r\n              };\r\n            })(f);\r\n\r\n            reader.readAsText(f);\r\n          }\r\n        });      \r\n      }\r\n    };\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:DictionaryService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .factory('DictionaryService', DictionaryService);\r\n\r\n  function DictionaryService($http, $q) {\r\n\r\n    let DictionaryServiceBase = {};\r\n    \r\n    DictionaryServiceBase.getDefinition = (mashapeKey, word) => {\r\n      return $http.get('https://montanaflynn-dictionary.p.mashape.com/define?word=' + word, {\r\n        headers: { 'X-Mashape-Key': mashapeKey }\r\n      });\r\n    };\r\n\r\n    // getPronunciation :: string -> string -> Promise(String)\r\n    DictionaryServiceBase.getPronunciation = (forvoKey, word) => {\r\n\r\n      let deferred = $q.defer();\r\n\r\n      console.log(word);\r\n\r\n      $http.jsonp('http://apifree.forvo.com/action/word-pronunciations/format/json/word/' + word + '/language/en/order/rate-desc/limit/1/key/' + forvoKey + '?callback=JSON_CALLBACK')\r\n        .then(res => {\r\n          let pronunciationData = angular.fromJson(res).data;\r\n          console.log(pronunciationData);\r\n          let pronunciationPath = pronunciationData.attributes.total !== 0 ? pronunciationData.items[0].pathmp3 : null;\r\n\r\n          deferred.resolve(pronunciationPath);\r\n        })\r\n        .catch(err => {\r\n          deferred.reject(err);\r\n          console.log('Something went wrong: ', err);\r\n        });\r\n\r\n      return deferred.promise;\r\n\r\n    };\r\n    \r\n    return DictionaryServiceBase;\r\n\r\n  }\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name common.factory:ConfigService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .factory('ConfigService', ConfigService);\r\n\r\n  function ConfigService() {\r\n\r\n    let ConfigServiceBase = {};\r\n    \r\n    ConfigServiceBase.mashapeKey = 'S4DvXSr43Cmsh5Kww0kOuX9QxNbXp1hjhkYjsn84TFraf8SlG3';\r\n    ConfigServiceBase.forvoKey = 'f850390038cd293954cb5bdf7dc36d8a';\r\n    \r\n    return ConfigServiceBase;\r\n\r\n  }\r\n}());\r\n","(() => {\n  'use strict';\n\n  /* @ngdoc object\n   * @name auth\n   * @description\n   *\n   */\n  angular\n    .module('auth', [\n      'ui.router'\n    ]);\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  class RegisterCtrl {\r\n    constructor() {\r\n      let vm = this;\r\n      vm.ctrlName = 'RegisterCtrl';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name auth.controller:RegisterCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('auth')\r\n    .controller('RegisterCtrl', RegisterCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  class LoginCtrl {\r\n    constructor() {\r\n      let vm = this;\r\n      vm.ctrlName = 'LoginCtrl';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name auth.controller:LoginCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('auth')\r\n    .controller('LoginCtrl', LoginCtrl);\r\n}());\r\n","(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name auth.factory:AuthService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('auth')\r\n    .factory('AuthService', AuthService);\r\n\r\n  function AuthService(ConfigService, $http, $q, $window) {\r\n\r\n    let AuthServiceBase = {};\r\n\r\n    // only check login status\r\n    // used in nav\r\n    AuthServiceBase.isLoggedIn = () => {\r\n      return $http.get('/auth/loggedin');\r\n    };\r\n\r\n    // check login status and redirect if not logged in\r\n    // used for route resolve for protected paths\r\n    AuthServiceBase.checkLoggedIn = () => {\r\n\r\n      var deferred = $q.defer();\r\n\r\n      $http.get('/auth/loggedin')\r\n        .then(user => {\r\n          var user = user.data;\r\n          if (user !== false) {\r\n            deferred.resolve(user.new_val);\r\n          } else {\r\n            deferred.reject();\r\n            $window.location = '/#/login';\r\n          }\r\n        })\r\n        .catch(err => {\r\n          deferred.reject();\r\n          $window.location = '/#/';\r\n          console.log('Something went wrong: ', err);\r\n        });\r\n\r\n      return deferred.promise;\r\n      \r\n    };\r\n\r\n    AuthServiceBase.logout = () => {\r\n      return $http.get('/auth/logout');\r\n    };\r\n    \r\n    return AuthServiceBase;\r\n\r\n  }\r\n}());\r\n","(() => {\n  'use strict';\n\n  angular\n    .module('auth')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('root.auth', {\n        abstract: true,\n        views: {\n          '': {\n            templateUrl: 'auth/auth.tpl.html'\n          }\n        }\n      })\n      .state('root.auth.login', {\n        url: '/login',\n        templateUrl: 'auth/login.tpl.html',\n        controller: 'LoginCtrl',\n        controllerAs: 'login'\n      })\n      .state('root.auth.register', {\n        url: '/register',\n        templateUrl: 'auth/register.tpl.html',\n        controller: 'RegisterCtrl',\n        controllerAs: 'register'\n      })\n      .state('root.auth.logout', {\n        url: '/logout',\n        templateUrl: 'auth/logout.tpl.html',\n        controller: 'LogoutCtrl',\n        controllerAs: 'logout'\n      });\n  }\n}());\n","(() => {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('bigvocab')\r\n    .config(config);\r\n\r\n  function config($urlRouterProvider) {\r\n    $urlRouterProvider.otherwise('/home');\r\n  }\r\n}());\r\n"],"sourceRoot":"/source/"}