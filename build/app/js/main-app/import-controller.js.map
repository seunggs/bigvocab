{"version":3,"sources":["main-app/import-controller.es6"],"names":[],"mappings":"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","file":"main-app/import-controller.js","sourcesContent":["(() => {\r\n  'use strict';\r\n\r\n  class ImportCtrl {\r\n    constructor(ImportService, WordsService, DictionaryService, ConfigService, user, $timeout, $window, $q) {\r\n\r\n      let vm = this;\r\n      \r\n      // config ///////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.formData = {};\r\n      vm.btnState = {\r\n        loading: false,\r\n        success: false\r\n      };\r\n      vm.placeholder = {\r\n        files: 'Click to upload anki text files',\r\n        collectionTitle: 'Add collection title here'\r\n      };\r\n\r\n      // helper functions /////////////////////////////////////////////////////////////////\r\n\r\n      function importTextfile (userId, data) {\r\n        \r\n        vm.btnState.loading = true;\r\n\r\n        ImportService.anki(userId, data)\r\n          .then(dbRes => {\r\n            let dbResData = angular.fromJson(dbRes).data;\r\n            let collectionId = dbResData.generated_keys[0];\r\n\r\n            return WordsService.getAll(collectionId);\r\n          })\r\n          .then(res => {\r\n            let words = angular.fromJson(res).data;\r\n            let promises = [];\r\n\r\n            words.forEach(word => {\r\n              promises.push(addPronunciation(ConfigService.forvoKey, word));\r\n            });\r\n\r\n            return $q.all(promises);\r\n          })\r\n          .then(() => {\r\n            vm.btnState.loading = false;\r\n            vm.btnState.success = true;\r\n            \r\n            $timeout(() => {\r\n              vm.btnState.success = false;\r\n              $window.location.href = '/#/main-app/collections';\r\n            }, 1500);\r\n          })\r\n          .catch(err => {\r\n            vm.btnState.loading = false;\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n\r\n      }\r\n\r\n      function addPronunciation (forvoKey, word) {\r\n        let deferred = $q.defer();\r\n\r\n        DictionaryService.getPronunciation(forvoKey, word.word)\r\n          .then(res => {\r\n            let pronunciationData = angular.fromJson(res).data;\r\n            let pronunciationPath = pronunciationData.attributes.total !== 0 ? pronunciationData.items[0].pathmp3 : null;\r\n\r\n            let wordUpdate = {\r\n              pronunciationPath: pronunciationPath\r\n            };\r\n\r\n            return WordsService.update(word.id, wordUpdate);\r\n          })\r\n          .then(dbRes => {\r\n            deferred.resolve(dbRes);\r\n          })\r\n          .catch(err => {\r\n            deferred.reject(err);\r\n            console.log('Something went wrong: ', err);\r\n          });\r\n\r\n        return deferred.promise;\r\n      }\r\n\r\n      // main /////////////////////////////////////////////////////////////////////////////\r\n\r\n      vm.importTextfile = (isValid, formData) => {\r\n\r\n        if (!isValid) { return; }\r\n\r\n        importTextfile(user.id, formData);\r\n\r\n      };\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name mainApp.controller:ImportCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('mainApp')\r\n    .controller('ImportCtrl', ImportCtrl);\r\n}());\r\n"],"sourceRoot":"/source/"}