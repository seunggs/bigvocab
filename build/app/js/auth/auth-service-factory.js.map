{"version":3,"sources":["auth/auth-service-factory.es6"],"names":[],"mappings":";;AAAA,AAAC,CAAA,YAAM;AACL,cAAY,CAAC;;;;;;;;;AASb,SAAO,CACJ,MAAM,CAAC,MAAM,CAAC,CACd,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;;AAEvC,WAAS,WAAW,CAAC,aAAa,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE;;AAEtD,QAAI,eAAe,GAAG,EAAE,CAAC;;;;AAIzB,mBAAe,CAAC,UAAU,GAAG,YAAM;AACjC,aAAO,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;KACpC,CAAC;;;;AAIF,mBAAe,CAAC,aAAa,GAAG,YAAM;;AAEpC,UAAI,QAAQ,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;;AAE1B,WAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,CACxB,IAAI,CAAC,UAAA,IAAI,EAAI;AACZ,YAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;AACvC,YAAI,IAAI,KAAK,KAAK,EAAE;AAClB,kBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACxB,MAAM;AACL,kBAAQ,CAAC,MAAM,EAAE,CAAC;AAClB,iBAAO,CAAC,QAAQ,GAAG,UAAU,CAAC;SAC/B;OACF,CAAC,SACI,CAAC,UAAA,GAAG,EAAI;AACZ,gBAAQ,CAAC,MAAM,EAAE,CAAC;AAClB,eAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;AACzB,eAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;OAC5C,CAAC,CAAC;;AAEL,aAAO,QAAQ,CAAC,OAAO,CAAC;KAEzB,CAAC;;AAEF,mBAAe,CAAC,MAAM,GAAG,YAAM;AAC7B,aAAO,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;KAClC,CAAC;;AAEF,WAAO,eAAe,CAAC;GAExB;CACF,CAAA,EAAE,CAAE","file":"auth/auth-service-factory.js","sourcesContent":["(() => {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name auth.factory:AuthService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('auth')\r\n    .factory('AuthService', AuthService);\r\n\r\n  function AuthService(ConfigService, $http, $q, $window) {\r\n\r\n    let AuthServiceBase = {};\r\n\r\n    // only check login status\r\n    // used in nav\r\n    AuthServiceBase.isLoggedIn = () => {\r\n      return $http.get('/auth/loggedin');\r\n    };\r\n\r\n    // check login status and redirect if not logged in\r\n    // used for route resolve for protected paths\r\n    AuthServiceBase.checkLoggedIn = () => {\r\n\r\n      var deferred = $q.defer();\r\n\r\n      $http.get('/auth/loggedin')\r\n        .then(user => {\r\n          var user = angular.fromJson(user).data;\r\n          if (user !== false) {\r\n            deferred.resolve(user);\r\n          } else {\r\n            deferred.reject();\r\n            $window.location = '/#/login';\r\n          }\r\n        })\r\n        .catch(err => {\r\n          deferred.reject();\r\n          $window.location = '/#/';\r\n          console.log('Something went wrong: ', err);\r\n        });\r\n\r\n      return deferred.promise;\r\n      \r\n    };\r\n\r\n    AuthServiceBase.logout = () => {\r\n      return $http.get('/auth/logout');\r\n    };\r\n    \r\n    return AuthServiceBase;\r\n\r\n  }\r\n}());\r\n"],"sourceRoot":"/source/"}